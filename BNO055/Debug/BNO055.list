
BNO055.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008cc4  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000334  08008e70  08008e70  00018e70  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080091a4  080091a4  0002007c  2**0
                  CONTENTS
  4 .ARM          00000008  080091a4  080091a4  000191a4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080091ac  080091ac  0002007c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  080091ac  080091ac  000191ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080091b4  080091b4  000191b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000007c  20000000  080091b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000d48  20000080  08009234  00020080  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000dc8  08009234  00020dc8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002007c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017a1f  00000000  00000000  000200ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d56  00000000  00000000  00037acb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000da8  00000000  00000000  0003a828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d00  00000000  00000000  0003b5d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025b6a  00000000  00000000  0003c2d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010cc5  00000000  00000000  00061e3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dd538  00000000  00000000  00072aff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00150037  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e2c  00000000  00000000  0015008c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000080 	.word	0x20000080
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08008e58 	.word	0x08008e58

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000084 	.word	0x20000084
 80001e8:	08008e58 	.word	0x08008e58

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <__aeabi_drsub>:
 80001fc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000200:	e002      	b.n	8000208 <__adddf3>
 8000202:	bf00      	nop

08000204 <__aeabi_dsub>:
 8000204:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000208 <__adddf3>:
 8000208:	b530      	push	{r4, r5, lr}
 800020a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800020e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000212:	ea94 0f05 	teq	r4, r5
 8000216:	bf08      	it	eq
 8000218:	ea90 0f02 	teqeq	r0, r2
 800021c:	bf1f      	itttt	ne
 800021e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000222:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000226:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800022a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800022e:	f000 80e2 	beq.w	80003f6 <__adddf3+0x1ee>
 8000232:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000236:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800023a:	bfb8      	it	lt
 800023c:	426d      	neglt	r5, r5
 800023e:	dd0c      	ble.n	800025a <__adddf3+0x52>
 8000240:	442c      	add	r4, r5
 8000242:	ea80 0202 	eor.w	r2, r0, r2
 8000246:	ea81 0303 	eor.w	r3, r1, r3
 800024a:	ea82 0000 	eor.w	r0, r2, r0
 800024e:	ea83 0101 	eor.w	r1, r3, r1
 8000252:	ea80 0202 	eor.w	r2, r0, r2
 8000256:	ea81 0303 	eor.w	r3, r1, r3
 800025a:	2d36      	cmp	r5, #54	; 0x36
 800025c:	bf88      	it	hi
 800025e:	bd30      	pophi	{r4, r5, pc}
 8000260:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000264:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000268:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800026c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000270:	d002      	beq.n	8000278 <__adddf3+0x70>
 8000272:	4240      	negs	r0, r0
 8000274:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000278:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800027c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000280:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000284:	d002      	beq.n	800028c <__adddf3+0x84>
 8000286:	4252      	negs	r2, r2
 8000288:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 800028c:	ea94 0f05 	teq	r4, r5
 8000290:	f000 80a7 	beq.w	80003e2 <__adddf3+0x1da>
 8000294:	f1a4 0401 	sub.w	r4, r4, #1
 8000298:	f1d5 0e20 	rsbs	lr, r5, #32
 800029c:	db0d      	blt.n	80002ba <__adddf3+0xb2>
 800029e:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002a2:	fa22 f205 	lsr.w	r2, r2, r5
 80002a6:	1880      	adds	r0, r0, r2
 80002a8:	f141 0100 	adc.w	r1, r1, #0
 80002ac:	fa03 f20e 	lsl.w	r2, r3, lr
 80002b0:	1880      	adds	r0, r0, r2
 80002b2:	fa43 f305 	asr.w	r3, r3, r5
 80002b6:	4159      	adcs	r1, r3
 80002b8:	e00e      	b.n	80002d8 <__adddf3+0xd0>
 80002ba:	f1a5 0520 	sub.w	r5, r5, #32
 80002be:	f10e 0e20 	add.w	lr, lr, #32
 80002c2:	2a01      	cmp	r2, #1
 80002c4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002c8:	bf28      	it	cs
 80002ca:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002ce:	fa43 f305 	asr.w	r3, r3, r5
 80002d2:	18c0      	adds	r0, r0, r3
 80002d4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002dc:	d507      	bpl.n	80002ee <__adddf3+0xe6>
 80002de:	f04f 0e00 	mov.w	lr, #0
 80002e2:	f1dc 0c00 	rsbs	ip, ip, #0
 80002e6:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002ea:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ee:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002f2:	d31b      	bcc.n	800032c <__adddf3+0x124>
 80002f4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002f8:	d30c      	bcc.n	8000314 <__adddf3+0x10c>
 80002fa:	0849      	lsrs	r1, r1, #1
 80002fc:	ea5f 0030 	movs.w	r0, r0, rrx
 8000300:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000304:	f104 0401 	add.w	r4, r4, #1
 8000308:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800030c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000310:	f080 809a 	bcs.w	8000448 <__adddf3+0x240>
 8000314:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000318:	bf08      	it	eq
 800031a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800031e:	f150 0000 	adcs.w	r0, r0, #0
 8000322:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000326:	ea41 0105 	orr.w	r1, r1, r5
 800032a:	bd30      	pop	{r4, r5, pc}
 800032c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000330:	4140      	adcs	r0, r0
 8000332:	eb41 0101 	adc.w	r1, r1, r1
 8000336:	3c01      	subs	r4, #1
 8000338:	bf28      	it	cs
 800033a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800033e:	d2e9      	bcs.n	8000314 <__adddf3+0x10c>
 8000340:	f091 0f00 	teq	r1, #0
 8000344:	bf04      	itt	eq
 8000346:	4601      	moveq	r1, r0
 8000348:	2000      	moveq	r0, #0
 800034a:	fab1 f381 	clz	r3, r1
 800034e:	bf08      	it	eq
 8000350:	3320      	addeq	r3, #32
 8000352:	f1a3 030b 	sub.w	r3, r3, #11
 8000356:	f1b3 0220 	subs.w	r2, r3, #32
 800035a:	da0c      	bge.n	8000376 <__adddf3+0x16e>
 800035c:	320c      	adds	r2, #12
 800035e:	dd08      	ble.n	8000372 <__adddf3+0x16a>
 8000360:	f102 0c14 	add.w	ip, r2, #20
 8000364:	f1c2 020c 	rsb	r2, r2, #12
 8000368:	fa01 f00c 	lsl.w	r0, r1, ip
 800036c:	fa21 f102 	lsr.w	r1, r1, r2
 8000370:	e00c      	b.n	800038c <__adddf3+0x184>
 8000372:	f102 0214 	add.w	r2, r2, #20
 8000376:	bfd8      	it	le
 8000378:	f1c2 0c20 	rsble	ip, r2, #32
 800037c:	fa01 f102 	lsl.w	r1, r1, r2
 8000380:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000384:	bfdc      	itt	le
 8000386:	ea41 010c 	orrle.w	r1, r1, ip
 800038a:	4090      	lslle	r0, r2
 800038c:	1ae4      	subs	r4, r4, r3
 800038e:	bfa2      	ittt	ge
 8000390:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000394:	4329      	orrge	r1, r5
 8000396:	bd30      	popge	{r4, r5, pc}
 8000398:	ea6f 0404 	mvn.w	r4, r4
 800039c:	3c1f      	subs	r4, #31
 800039e:	da1c      	bge.n	80003da <__adddf3+0x1d2>
 80003a0:	340c      	adds	r4, #12
 80003a2:	dc0e      	bgt.n	80003c2 <__adddf3+0x1ba>
 80003a4:	f104 0414 	add.w	r4, r4, #20
 80003a8:	f1c4 0220 	rsb	r2, r4, #32
 80003ac:	fa20 f004 	lsr.w	r0, r0, r4
 80003b0:	fa01 f302 	lsl.w	r3, r1, r2
 80003b4:	ea40 0003 	orr.w	r0, r0, r3
 80003b8:	fa21 f304 	lsr.w	r3, r1, r4
 80003bc:	ea45 0103 	orr.w	r1, r5, r3
 80003c0:	bd30      	pop	{r4, r5, pc}
 80003c2:	f1c4 040c 	rsb	r4, r4, #12
 80003c6:	f1c4 0220 	rsb	r2, r4, #32
 80003ca:	fa20 f002 	lsr.w	r0, r0, r2
 80003ce:	fa01 f304 	lsl.w	r3, r1, r4
 80003d2:	ea40 0003 	orr.w	r0, r0, r3
 80003d6:	4629      	mov	r1, r5
 80003d8:	bd30      	pop	{r4, r5, pc}
 80003da:	fa21 f004 	lsr.w	r0, r1, r4
 80003de:	4629      	mov	r1, r5
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	f094 0f00 	teq	r4, #0
 80003e6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003ea:	bf06      	itte	eq
 80003ec:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003f0:	3401      	addeq	r4, #1
 80003f2:	3d01      	subne	r5, #1
 80003f4:	e74e      	b.n	8000294 <__adddf3+0x8c>
 80003f6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003fa:	bf18      	it	ne
 80003fc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000400:	d029      	beq.n	8000456 <__adddf3+0x24e>
 8000402:	ea94 0f05 	teq	r4, r5
 8000406:	bf08      	it	eq
 8000408:	ea90 0f02 	teqeq	r0, r2
 800040c:	d005      	beq.n	800041a <__adddf3+0x212>
 800040e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000412:	bf04      	itt	eq
 8000414:	4619      	moveq	r1, r3
 8000416:	4610      	moveq	r0, r2
 8000418:	bd30      	pop	{r4, r5, pc}
 800041a:	ea91 0f03 	teq	r1, r3
 800041e:	bf1e      	ittt	ne
 8000420:	2100      	movne	r1, #0
 8000422:	2000      	movne	r0, #0
 8000424:	bd30      	popne	{r4, r5, pc}
 8000426:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800042a:	d105      	bne.n	8000438 <__adddf3+0x230>
 800042c:	0040      	lsls	r0, r0, #1
 800042e:	4149      	adcs	r1, r1
 8000430:	bf28      	it	cs
 8000432:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000436:	bd30      	pop	{r4, r5, pc}
 8000438:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800043c:	bf3c      	itt	cc
 800043e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000442:	bd30      	popcc	{r4, r5, pc}
 8000444:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000448:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800044c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000450:	f04f 0000 	mov.w	r0, #0
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800045a:	bf1a      	itte	ne
 800045c:	4619      	movne	r1, r3
 800045e:	4610      	movne	r0, r2
 8000460:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000464:	bf1c      	itt	ne
 8000466:	460b      	movne	r3, r1
 8000468:	4602      	movne	r2, r0
 800046a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800046e:	bf06      	itte	eq
 8000470:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000474:	ea91 0f03 	teqeq	r1, r3
 8000478:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	bf00      	nop

08000480 <__aeabi_ui2d>:
 8000480:	f090 0f00 	teq	r0, #0
 8000484:	bf04      	itt	eq
 8000486:	2100      	moveq	r1, #0
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000490:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000494:	f04f 0500 	mov.w	r5, #0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e750      	b.n	8000340 <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_i2d>:
 80004a0:	f090 0f00 	teq	r0, #0
 80004a4:	bf04      	itt	eq
 80004a6:	2100      	moveq	r1, #0
 80004a8:	4770      	bxeq	lr
 80004aa:	b530      	push	{r4, r5, lr}
 80004ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004b8:	bf48      	it	mi
 80004ba:	4240      	negmi	r0, r0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e73e      	b.n	8000340 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_f2d>:
 80004c4:	0042      	lsls	r2, r0, #1
 80004c6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ca:	ea4f 0131 	mov.w	r1, r1, rrx
 80004ce:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004d2:	bf1f      	itttt	ne
 80004d4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004d8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004dc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004e0:	4770      	bxne	lr
 80004e2:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004e6:	bf08      	it	eq
 80004e8:	4770      	bxeq	lr
 80004ea:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ee:	bf04      	itt	eq
 80004f0:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004f4:	4770      	bxeq	lr
 80004f6:	b530      	push	{r4, r5, lr}
 80004f8:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000500:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000504:	e71c      	b.n	8000340 <__adddf3+0x138>
 8000506:	bf00      	nop

08000508 <__aeabi_ul2d>:
 8000508:	ea50 0201 	orrs.w	r2, r0, r1
 800050c:	bf08      	it	eq
 800050e:	4770      	bxeq	lr
 8000510:	b530      	push	{r4, r5, lr}
 8000512:	f04f 0500 	mov.w	r5, #0
 8000516:	e00a      	b.n	800052e <__aeabi_l2d+0x16>

08000518 <__aeabi_l2d>:
 8000518:	ea50 0201 	orrs.w	r2, r0, r1
 800051c:	bf08      	it	eq
 800051e:	4770      	bxeq	lr
 8000520:	b530      	push	{r4, r5, lr}
 8000522:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000526:	d502      	bpl.n	800052e <__aeabi_l2d+0x16>
 8000528:	4240      	negs	r0, r0
 800052a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800052e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000532:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000536:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800053a:	f43f aed8 	beq.w	80002ee <__adddf3+0xe6>
 800053e:	f04f 0203 	mov.w	r2, #3
 8000542:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000546:	bf18      	it	ne
 8000548:	3203      	addne	r2, #3
 800054a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800054e:	bf18      	it	ne
 8000550:	3203      	addne	r2, #3
 8000552:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000556:	f1c2 0320 	rsb	r3, r2, #32
 800055a:	fa00 fc03 	lsl.w	ip, r0, r3
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 fe03 	lsl.w	lr, r1, r3
 8000566:	ea40 000e 	orr.w	r0, r0, lr
 800056a:	fa21 f102 	lsr.w	r1, r1, r2
 800056e:	4414      	add	r4, r2
 8000570:	e6bd      	b.n	80002ee <__adddf3+0xe6>
 8000572:	bf00      	nop

08000574 <__aeabi_uldivmod>:
 8000574:	b953      	cbnz	r3, 800058c <__aeabi_uldivmod+0x18>
 8000576:	b94a      	cbnz	r2, 800058c <__aeabi_uldivmod+0x18>
 8000578:	2900      	cmp	r1, #0
 800057a:	bf08      	it	eq
 800057c:	2800      	cmpeq	r0, #0
 800057e:	bf1c      	itt	ne
 8000580:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000584:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000588:	f000 b96e 	b.w	8000868 <__aeabi_idiv0>
 800058c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000590:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000594:	f000 f806 	bl	80005a4 <__udivmoddi4>
 8000598:	f8dd e004 	ldr.w	lr, [sp, #4]
 800059c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80005a0:	b004      	add	sp, #16
 80005a2:	4770      	bx	lr

080005a4 <__udivmoddi4>:
 80005a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80005a8:	9d08      	ldr	r5, [sp, #32]
 80005aa:	4604      	mov	r4, r0
 80005ac:	468c      	mov	ip, r1
 80005ae:	2b00      	cmp	r3, #0
 80005b0:	f040 8083 	bne.w	80006ba <__udivmoddi4+0x116>
 80005b4:	428a      	cmp	r2, r1
 80005b6:	4617      	mov	r7, r2
 80005b8:	d947      	bls.n	800064a <__udivmoddi4+0xa6>
 80005ba:	fab2 f282 	clz	r2, r2
 80005be:	b142      	cbz	r2, 80005d2 <__udivmoddi4+0x2e>
 80005c0:	f1c2 0020 	rsb	r0, r2, #32
 80005c4:	fa24 f000 	lsr.w	r0, r4, r0
 80005c8:	4091      	lsls	r1, r2
 80005ca:	4097      	lsls	r7, r2
 80005cc:	ea40 0c01 	orr.w	ip, r0, r1
 80005d0:	4094      	lsls	r4, r2
 80005d2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80005d6:	0c23      	lsrs	r3, r4, #16
 80005d8:	fbbc f6f8 	udiv	r6, ip, r8
 80005dc:	fa1f fe87 	uxth.w	lr, r7
 80005e0:	fb08 c116 	mls	r1, r8, r6, ip
 80005e4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80005e8:	fb06 f10e 	mul.w	r1, r6, lr
 80005ec:	4299      	cmp	r1, r3
 80005ee:	d909      	bls.n	8000604 <__udivmoddi4+0x60>
 80005f0:	18fb      	adds	r3, r7, r3
 80005f2:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 80005f6:	f080 8119 	bcs.w	800082c <__udivmoddi4+0x288>
 80005fa:	4299      	cmp	r1, r3
 80005fc:	f240 8116 	bls.w	800082c <__udivmoddi4+0x288>
 8000600:	3e02      	subs	r6, #2
 8000602:	443b      	add	r3, r7
 8000604:	1a5b      	subs	r3, r3, r1
 8000606:	b2a4      	uxth	r4, r4
 8000608:	fbb3 f0f8 	udiv	r0, r3, r8
 800060c:	fb08 3310 	mls	r3, r8, r0, r3
 8000610:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000614:	fb00 fe0e 	mul.w	lr, r0, lr
 8000618:	45a6      	cmp	lr, r4
 800061a:	d909      	bls.n	8000630 <__udivmoddi4+0x8c>
 800061c:	193c      	adds	r4, r7, r4
 800061e:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000622:	f080 8105 	bcs.w	8000830 <__udivmoddi4+0x28c>
 8000626:	45a6      	cmp	lr, r4
 8000628:	f240 8102 	bls.w	8000830 <__udivmoddi4+0x28c>
 800062c:	3802      	subs	r0, #2
 800062e:	443c      	add	r4, r7
 8000630:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000634:	eba4 040e 	sub.w	r4, r4, lr
 8000638:	2600      	movs	r6, #0
 800063a:	b11d      	cbz	r5, 8000644 <__udivmoddi4+0xa0>
 800063c:	40d4      	lsrs	r4, r2
 800063e:	2300      	movs	r3, #0
 8000640:	e9c5 4300 	strd	r4, r3, [r5]
 8000644:	4631      	mov	r1, r6
 8000646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800064a:	b902      	cbnz	r2, 800064e <__udivmoddi4+0xaa>
 800064c:	deff      	udf	#255	; 0xff
 800064e:	fab2 f282 	clz	r2, r2
 8000652:	2a00      	cmp	r2, #0
 8000654:	d150      	bne.n	80006f8 <__udivmoddi4+0x154>
 8000656:	1bcb      	subs	r3, r1, r7
 8000658:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800065c:	fa1f f887 	uxth.w	r8, r7
 8000660:	2601      	movs	r6, #1
 8000662:	fbb3 fcfe 	udiv	ip, r3, lr
 8000666:	0c21      	lsrs	r1, r4, #16
 8000668:	fb0e 331c 	mls	r3, lr, ip, r3
 800066c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000670:	fb08 f30c 	mul.w	r3, r8, ip
 8000674:	428b      	cmp	r3, r1
 8000676:	d907      	bls.n	8000688 <__udivmoddi4+0xe4>
 8000678:	1879      	adds	r1, r7, r1
 800067a:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 800067e:	d202      	bcs.n	8000686 <__udivmoddi4+0xe2>
 8000680:	428b      	cmp	r3, r1
 8000682:	f200 80e9 	bhi.w	8000858 <__udivmoddi4+0x2b4>
 8000686:	4684      	mov	ip, r0
 8000688:	1ac9      	subs	r1, r1, r3
 800068a:	b2a3      	uxth	r3, r4
 800068c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000690:	fb0e 1110 	mls	r1, lr, r0, r1
 8000694:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000698:	fb08 f800 	mul.w	r8, r8, r0
 800069c:	45a0      	cmp	r8, r4
 800069e:	d907      	bls.n	80006b0 <__udivmoddi4+0x10c>
 80006a0:	193c      	adds	r4, r7, r4
 80006a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80006a6:	d202      	bcs.n	80006ae <__udivmoddi4+0x10a>
 80006a8:	45a0      	cmp	r8, r4
 80006aa:	f200 80d9 	bhi.w	8000860 <__udivmoddi4+0x2bc>
 80006ae:	4618      	mov	r0, r3
 80006b0:	eba4 0408 	sub.w	r4, r4, r8
 80006b4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80006b8:	e7bf      	b.n	800063a <__udivmoddi4+0x96>
 80006ba:	428b      	cmp	r3, r1
 80006bc:	d909      	bls.n	80006d2 <__udivmoddi4+0x12e>
 80006be:	2d00      	cmp	r5, #0
 80006c0:	f000 80b1 	beq.w	8000826 <__udivmoddi4+0x282>
 80006c4:	2600      	movs	r6, #0
 80006c6:	e9c5 0100 	strd	r0, r1, [r5]
 80006ca:	4630      	mov	r0, r6
 80006cc:	4631      	mov	r1, r6
 80006ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80006d2:	fab3 f683 	clz	r6, r3
 80006d6:	2e00      	cmp	r6, #0
 80006d8:	d14a      	bne.n	8000770 <__udivmoddi4+0x1cc>
 80006da:	428b      	cmp	r3, r1
 80006dc:	d302      	bcc.n	80006e4 <__udivmoddi4+0x140>
 80006de:	4282      	cmp	r2, r0
 80006e0:	f200 80b8 	bhi.w	8000854 <__udivmoddi4+0x2b0>
 80006e4:	1a84      	subs	r4, r0, r2
 80006e6:	eb61 0103 	sbc.w	r1, r1, r3
 80006ea:	2001      	movs	r0, #1
 80006ec:	468c      	mov	ip, r1
 80006ee:	2d00      	cmp	r5, #0
 80006f0:	d0a8      	beq.n	8000644 <__udivmoddi4+0xa0>
 80006f2:	e9c5 4c00 	strd	r4, ip, [r5]
 80006f6:	e7a5      	b.n	8000644 <__udivmoddi4+0xa0>
 80006f8:	f1c2 0320 	rsb	r3, r2, #32
 80006fc:	fa20 f603 	lsr.w	r6, r0, r3
 8000700:	4097      	lsls	r7, r2
 8000702:	fa01 f002 	lsl.w	r0, r1, r2
 8000706:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800070a:	40d9      	lsrs	r1, r3
 800070c:	4330      	orrs	r0, r6
 800070e:	0c03      	lsrs	r3, r0, #16
 8000710:	fbb1 f6fe 	udiv	r6, r1, lr
 8000714:	fa1f f887 	uxth.w	r8, r7
 8000718:	fb0e 1116 	mls	r1, lr, r6, r1
 800071c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000720:	fb06 f108 	mul.w	r1, r6, r8
 8000724:	4299      	cmp	r1, r3
 8000726:	fa04 f402 	lsl.w	r4, r4, r2
 800072a:	d909      	bls.n	8000740 <__udivmoddi4+0x19c>
 800072c:	18fb      	adds	r3, r7, r3
 800072e:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000732:	f080 808d 	bcs.w	8000850 <__udivmoddi4+0x2ac>
 8000736:	4299      	cmp	r1, r3
 8000738:	f240 808a 	bls.w	8000850 <__udivmoddi4+0x2ac>
 800073c:	3e02      	subs	r6, #2
 800073e:	443b      	add	r3, r7
 8000740:	1a5b      	subs	r3, r3, r1
 8000742:	b281      	uxth	r1, r0
 8000744:	fbb3 f0fe 	udiv	r0, r3, lr
 8000748:	fb0e 3310 	mls	r3, lr, r0, r3
 800074c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000750:	fb00 f308 	mul.w	r3, r0, r8
 8000754:	428b      	cmp	r3, r1
 8000756:	d907      	bls.n	8000768 <__udivmoddi4+0x1c4>
 8000758:	1879      	adds	r1, r7, r1
 800075a:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 800075e:	d273      	bcs.n	8000848 <__udivmoddi4+0x2a4>
 8000760:	428b      	cmp	r3, r1
 8000762:	d971      	bls.n	8000848 <__udivmoddi4+0x2a4>
 8000764:	3802      	subs	r0, #2
 8000766:	4439      	add	r1, r7
 8000768:	1acb      	subs	r3, r1, r3
 800076a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800076e:	e778      	b.n	8000662 <__udivmoddi4+0xbe>
 8000770:	f1c6 0c20 	rsb	ip, r6, #32
 8000774:	fa03 f406 	lsl.w	r4, r3, r6
 8000778:	fa22 f30c 	lsr.w	r3, r2, ip
 800077c:	431c      	orrs	r4, r3
 800077e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000782:	fa01 f306 	lsl.w	r3, r1, r6
 8000786:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800078a:	fa21 f10c 	lsr.w	r1, r1, ip
 800078e:	431f      	orrs	r7, r3
 8000790:	0c3b      	lsrs	r3, r7, #16
 8000792:	fbb1 f9fe 	udiv	r9, r1, lr
 8000796:	fa1f f884 	uxth.w	r8, r4
 800079a:	fb0e 1119 	mls	r1, lr, r9, r1
 800079e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80007a2:	fb09 fa08 	mul.w	sl, r9, r8
 80007a6:	458a      	cmp	sl, r1
 80007a8:	fa02 f206 	lsl.w	r2, r2, r6
 80007ac:	fa00 f306 	lsl.w	r3, r0, r6
 80007b0:	d908      	bls.n	80007c4 <__udivmoddi4+0x220>
 80007b2:	1861      	adds	r1, r4, r1
 80007b4:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 80007b8:	d248      	bcs.n	800084c <__udivmoddi4+0x2a8>
 80007ba:	458a      	cmp	sl, r1
 80007bc:	d946      	bls.n	800084c <__udivmoddi4+0x2a8>
 80007be:	f1a9 0902 	sub.w	r9, r9, #2
 80007c2:	4421      	add	r1, r4
 80007c4:	eba1 010a 	sub.w	r1, r1, sl
 80007c8:	b2bf      	uxth	r7, r7
 80007ca:	fbb1 f0fe 	udiv	r0, r1, lr
 80007ce:	fb0e 1110 	mls	r1, lr, r0, r1
 80007d2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 80007d6:	fb00 f808 	mul.w	r8, r0, r8
 80007da:	45b8      	cmp	r8, r7
 80007dc:	d907      	bls.n	80007ee <__udivmoddi4+0x24a>
 80007de:	19e7      	adds	r7, r4, r7
 80007e0:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 80007e4:	d22e      	bcs.n	8000844 <__udivmoddi4+0x2a0>
 80007e6:	45b8      	cmp	r8, r7
 80007e8:	d92c      	bls.n	8000844 <__udivmoddi4+0x2a0>
 80007ea:	3802      	subs	r0, #2
 80007ec:	4427      	add	r7, r4
 80007ee:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80007f2:	eba7 0708 	sub.w	r7, r7, r8
 80007f6:	fba0 8902 	umull	r8, r9, r0, r2
 80007fa:	454f      	cmp	r7, r9
 80007fc:	46c6      	mov	lr, r8
 80007fe:	4649      	mov	r1, r9
 8000800:	d31a      	bcc.n	8000838 <__udivmoddi4+0x294>
 8000802:	d017      	beq.n	8000834 <__udivmoddi4+0x290>
 8000804:	b15d      	cbz	r5, 800081e <__udivmoddi4+0x27a>
 8000806:	ebb3 020e 	subs.w	r2, r3, lr
 800080a:	eb67 0701 	sbc.w	r7, r7, r1
 800080e:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000812:	40f2      	lsrs	r2, r6
 8000814:	ea4c 0202 	orr.w	r2, ip, r2
 8000818:	40f7      	lsrs	r7, r6
 800081a:	e9c5 2700 	strd	r2, r7, [r5]
 800081e:	2600      	movs	r6, #0
 8000820:	4631      	mov	r1, r6
 8000822:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000826:	462e      	mov	r6, r5
 8000828:	4628      	mov	r0, r5
 800082a:	e70b      	b.n	8000644 <__udivmoddi4+0xa0>
 800082c:	4606      	mov	r6, r0
 800082e:	e6e9      	b.n	8000604 <__udivmoddi4+0x60>
 8000830:	4618      	mov	r0, r3
 8000832:	e6fd      	b.n	8000630 <__udivmoddi4+0x8c>
 8000834:	4543      	cmp	r3, r8
 8000836:	d2e5      	bcs.n	8000804 <__udivmoddi4+0x260>
 8000838:	ebb8 0e02 	subs.w	lr, r8, r2
 800083c:	eb69 0104 	sbc.w	r1, r9, r4
 8000840:	3801      	subs	r0, #1
 8000842:	e7df      	b.n	8000804 <__udivmoddi4+0x260>
 8000844:	4608      	mov	r0, r1
 8000846:	e7d2      	b.n	80007ee <__udivmoddi4+0x24a>
 8000848:	4660      	mov	r0, ip
 800084a:	e78d      	b.n	8000768 <__udivmoddi4+0x1c4>
 800084c:	4681      	mov	r9, r0
 800084e:	e7b9      	b.n	80007c4 <__udivmoddi4+0x220>
 8000850:	4666      	mov	r6, ip
 8000852:	e775      	b.n	8000740 <__udivmoddi4+0x19c>
 8000854:	4630      	mov	r0, r6
 8000856:	e74a      	b.n	80006ee <__udivmoddi4+0x14a>
 8000858:	f1ac 0c02 	sub.w	ip, ip, #2
 800085c:	4439      	add	r1, r7
 800085e:	e713      	b.n	8000688 <__udivmoddi4+0xe4>
 8000860:	3802      	subs	r0, #2
 8000862:	443c      	add	r4, r7
 8000864:	e724      	b.n	80006b0 <__udivmoddi4+0x10c>
 8000866:	bf00      	nop

08000868 <__aeabi_idiv0>:
 8000868:	4770      	bx	lr
 800086a:	bf00      	nop

0800086c <BNO055_Init_I2C>:
uint8_t get_readingY 	= {BNO055_QUA_DATA_Y_LSB};
uint8_t get_readingZ 	= {BNO055_QUA_DATA_Z_LSB};
uint8_t get_readingW 	= {BNO055_QUA_DATA_W_LSB};

// Configure BNO sensor
void BNO055_Init_I2C(I2C_HandleTypeDef* hi2c_device) {
 800086c:	b580      	push	{r7, lr}
 800086e:	b08e      	sub	sp, #56	; 0x38
 8000870:	af02      	add	r7, sp, #8
 8000872:	6078      	str	r0, [r7, #4]
	// Select BNO055 config mode
	uint8_t opr_config_mode[2] = {BNO055_OPR_MODE, CONFIGMODE};
 8000874:	233d      	movs	r3, #61	; 0x3d
 8000876:	85bb      	strh	r3, [r7, #44]	; 0x2c
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_config_mode, sizeof(opr_config_mode), 10);
 8000878:	f107 022c 	add.w	r2, r7, #44	; 0x2c
 800087c:	230a      	movs	r3, #10
 800087e:	9300      	str	r3, [sp, #0]
 8000880:	2302      	movs	r3, #2
 8000882:	2150      	movs	r1, #80	; 0x50
 8000884:	6878      	ldr	r0, [r7, #4]
 8000886:	f005 fec5 	bl	8006614 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 800088a:	200a      	movs	r0, #10
 800088c:	f004 fe80 	bl	8005590 <HAL_Delay>

	// Select page 1 to configure sensors
	uint8_t conf_page1[2] = {BNO055_PAGE_ID, 0x01};
 8000890:	f240 1307 	movw	r3, #263	; 0x107
 8000894:	853b      	strh	r3, [r7, #40]	; 0x28
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page1, sizeof(conf_page1), 10);
 8000896:	f107 0228 	add.w	r2, r7, #40	; 0x28
 800089a:	230a      	movs	r3, #10
 800089c:	9300      	str	r3, [sp, #0]
 800089e:	2302      	movs	r3, #2
 80008a0:	2150      	movs	r1, #80	; 0x50
 80008a2:	6878      	ldr	r0, [r7, #4]
 80008a4:	f005 feb6 	bl	8006614 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80008a8:	200a      	movs	r0, #10
 80008aa:	f004 fe71 	bl	8005590 <HAL_Delay>

	// Configure ACC (Page 1; 0x08)
	uint8_t conf_acc[2] = {BNO055_ACC_CONFIG, APwrMode << 5 | Abw << 2 | Ascale};
 80008ae:	2308      	movs	r3, #8
 80008b0:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
 80008b4:	4b50      	ldr	r3, [pc, #320]	; (80009f8 <BNO055_Init_I2C+0x18c>)
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	015b      	lsls	r3, r3, #5
 80008ba:	b25a      	sxtb	r2, r3
 80008bc:	4b4f      	ldr	r3, [pc, #316]	; (80009fc <BNO055_Init_I2C+0x190>)
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	009b      	lsls	r3, r3, #2
 80008c2:	b25b      	sxtb	r3, r3
 80008c4:	4313      	orrs	r3, r2
 80008c6:	b25a      	sxtb	r2, r3
 80008c8:	4b4d      	ldr	r3, [pc, #308]	; (8000a00 <BNO055_Init_I2C+0x194>)
 80008ca:	781b      	ldrb	r3, [r3, #0]
 80008cc:	b25b      	sxtb	r3, r3
 80008ce:	4313      	orrs	r3, r2
 80008d0:	b25b      	sxtb	r3, r3
 80008d2:	b2db      	uxtb	r3, r3
 80008d4:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_acc, sizeof(conf_acc), 10);
 80008d8:	f107 0224 	add.w	r2, r7, #36	; 0x24
 80008dc:	230a      	movs	r3, #10
 80008de:	9300      	str	r3, [sp, #0]
 80008e0:	2302      	movs	r3, #2
 80008e2:	2150      	movs	r1, #80	; 0x50
 80008e4:	6878      	ldr	r0, [r7, #4]
 80008e6:	f005 fe95 	bl	8006614 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80008ea:	200a      	movs	r0, #10
 80008ec:	f004 fe50 	bl	8005590 <HAL_Delay>

	// Configure GYR
	uint8_t conf_gyro[2] = {BNO055_GYRO_CONFIG_0, Gbw << 3 | Gscale};
 80008f0:	230a      	movs	r3, #10
 80008f2:	f887 3020 	strb.w	r3, [r7, #32]
 80008f6:	4b43      	ldr	r3, [pc, #268]	; (8000a04 <BNO055_Init_I2C+0x198>)
 80008f8:	781b      	ldrb	r3, [r3, #0]
 80008fa:	00db      	lsls	r3, r3, #3
 80008fc:	b25a      	sxtb	r2, r3
 80008fe:	4b42      	ldr	r3, [pc, #264]	; (8000a08 <BNO055_Init_I2C+0x19c>)
 8000900:	781b      	ldrb	r3, [r3, #0]
 8000902:	b25b      	sxtb	r3, r3
 8000904:	4313      	orrs	r3, r2
 8000906:	b25b      	sxtb	r3, r3
 8000908:	b2db      	uxtb	r3, r3
 800090a:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro, sizeof(conf_gyro), 10);
 800090e:	f107 0220 	add.w	r2, r7, #32
 8000912:	230a      	movs	r3, #10
 8000914:	9300      	str	r3, [sp, #0]
 8000916:	2302      	movs	r3, #2
 8000918:	2150      	movs	r1, #80	; 0x50
 800091a:	6878      	ldr	r0, [r7, #4]
 800091c:	f005 fe7a 	bl	8006614 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000920:	200a      	movs	r0, #10
 8000922:	f004 fe35 	bl	8005590 <HAL_Delay>

	uint8_t conf_gyro_pwr[2] = {BNO055_GYRO_CONFIG_1, GPwrMode};
 8000926:	230b      	movs	r3, #11
 8000928:	773b      	strb	r3, [r7, #28]
 800092a:	4b38      	ldr	r3, [pc, #224]	; (8000a0c <BNO055_Init_I2C+0x1a0>)
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	777b      	strb	r3, [r7, #29]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_gyro_pwr, sizeof(conf_gyro_pwr), 10);
 8000930:	f107 021c 	add.w	r2, r7, #28
 8000934:	230a      	movs	r3, #10
 8000936:	9300      	str	r3, [sp, #0]
 8000938:	2302      	movs	r3, #2
 800093a:	2150      	movs	r1, #80	; 0x50
 800093c:	6878      	ldr	r0, [r7, #4]
 800093e:	f005 fe69 	bl	8006614 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000942:	200a      	movs	r0, #10
 8000944:	f004 fe24 	bl	8005590 <HAL_Delay>

	// Configure MAG
	uint8_t conf_mag_pwr[4] = {REG_WRITE, BNO055_MAG_CONFIG, 0x01, MPwrMode << 5 | MOpMode << 3 | Modr};
 8000948:	2300      	movs	r3, #0
 800094a:	763b      	strb	r3, [r7, #24]
 800094c:	2309      	movs	r3, #9
 800094e:	767b      	strb	r3, [r7, #25]
 8000950:	2301      	movs	r3, #1
 8000952:	76bb      	strb	r3, [r7, #26]
 8000954:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <BNO055_Init_I2C+0x1a4>)
 8000956:	781b      	ldrb	r3, [r3, #0]
 8000958:	015b      	lsls	r3, r3, #5
 800095a:	b25a      	sxtb	r2, r3
 800095c:	4b2d      	ldr	r3, [pc, #180]	; (8000a14 <BNO055_Init_I2C+0x1a8>)
 800095e:	781b      	ldrb	r3, [r3, #0]
 8000960:	00db      	lsls	r3, r3, #3
 8000962:	b25b      	sxtb	r3, r3
 8000964:	4313      	orrs	r3, r2
 8000966:	b25a      	sxtb	r2, r3
 8000968:	4b2b      	ldr	r3, [pc, #172]	; (8000a18 <BNO055_Init_I2C+0x1ac>)
 800096a:	781b      	ldrb	r3, [r3, #0]
 800096c:	b25b      	sxtb	r3, r3
 800096e:	4313      	orrs	r3, r2
 8000970:	b25b      	sxtb	r3, r3
 8000972:	b2db      	uxtb	r3, r3
 8000974:	76fb      	strb	r3, [r7, #27]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_mag_pwr, sizeof(conf_mag_pwr), 10);
 8000976:	f107 0218 	add.w	r2, r7, #24
 800097a:	230a      	movs	r3, #10
 800097c:	9300      	str	r3, [sp, #0]
 800097e:	2304      	movs	r3, #4
 8000980:	2150      	movs	r1, #80	; 0x50
 8000982:	6878      	ldr	r0, [r7, #4]
 8000984:	f005 fe46 	bl	8006614 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 8000988:	200a      	movs	r0, #10
 800098a:	f004 fe01 	bl	8005590 <HAL_Delay>
//	HAL_Delay(10);
//	// Select BNO055 gyro temperature source
	//PutHexString(START_BYTE, BNO055_TEMP_SOURCE, 0x01 );

	// Select page 0
	uint8_t conf_page0[2] = {BNO055_PAGE_ID, 0x00};
 800098e:	2307      	movs	r3, #7
 8000990:	82bb      	strh	r3, [r7, #20]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, conf_page0, sizeof(conf_page0), 10);
 8000992:	f107 0214 	add.w	r2, r7, #20
 8000996:	230a      	movs	r3, #10
 8000998:	9300      	str	r3, [sp, #0]
 800099a:	2302      	movs	r3, #2
 800099c:	2150      	movs	r1, #80	; 0x50
 800099e:	6878      	ldr	r0, [r7, #4]
 80009a0:	f005 fe38 	bl	8006614 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80009a4:	200a      	movs	r0, #10
 80009a6:	f004 fdf3 	bl	8005590 <HAL_Delay>
	//const char conf_units[4] = {REG_WRITE, BNO055_UNIT_SEL, 0x01, 0x82};
	//SendAccelData(USART1, (uint8_t*)conf_units);
	//HAL_Delay(50);

	// Select BNO055 system power mode (Page 0; 0x3E)
	uint8_t pwr_pwrmode[2] = {BNO055_PWR_MODE, PWRMode};
 80009aa:	233e      	movs	r3, #62	; 0x3e
 80009ac:	743b      	strb	r3, [r7, #16]
 80009ae:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <BNO055_Init_I2C+0x1b0>)
 80009b0:	781b      	ldrb	r3, [r3, #0]
 80009b2:	747b      	strb	r3, [r7, #17]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, pwr_pwrmode, sizeof(pwr_pwrmode), 10);
 80009b4:	f107 0210 	add.w	r2, r7, #16
 80009b8:	230a      	movs	r3, #10
 80009ba:	9300      	str	r3, [sp, #0]
 80009bc:	2302      	movs	r3, #2
 80009be:	2150      	movs	r1, #80	; 0x50
 80009c0:	6878      	ldr	r0, [r7, #4]
 80009c2:	f005 fe27 	bl	8006614 <HAL_I2C_Master_Transmit>
	HAL_Delay(10);
 80009c6:	200a      	movs	r0, #10
 80009c8:	f004 fde2 	bl	8005590 <HAL_Delay>

	// Select BNO055 system operation mode (Page 0; 0x3D)
	uint8_t opr_oprmode[2] = {BNO055_OPR_MODE, OPRMode};
 80009cc:	233d      	movs	r3, #61	; 0x3d
 80009ce:	733b      	strb	r3, [r7, #12]
 80009d0:	4b13      	ldr	r3, [pc, #76]	; (8000a20 <BNO055_Init_I2C+0x1b4>)
 80009d2:	781b      	ldrb	r3, [r3, #0]
 80009d4:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(hi2c_device, BNO055_I2C_ADDR_LO<<1, opr_oprmode, sizeof(opr_oprmode), 10);
 80009d6:	f107 020c 	add.w	r2, r7, #12
 80009da:	230a      	movs	r3, #10
 80009dc:	9300      	str	r3, [sp, #0]
 80009de:	2302      	movs	r3, #2
 80009e0:	2150      	movs	r1, #80	; 0x50
 80009e2:	6878      	ldr	r0, [r7, #4]
 80009e4:	f005 fe16 	bl	8006614 <HAL_I2C_Master_Transmit>
	HAL_Delay(50);
 80009e8:	2032      	movs	r0, #50	; 0x32
 80009ea:	f004 fdd1 	bl	8005590 <HAL_Delay>
}
 80009ee:	bf00      	nop
 80009f0:	3730      	adds	r7, #48	; 0x30
 80009f2:	46bd      	mov	sp, r7
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	bf00      	nop
 80009f8:	2000009e 	.word	0x2000009e
 80009fc:	20000002 	.word	0x20000002
 8000a00:	20000001 	.word	0x20000001
 8000a04:	20000000 	.word	0x20000000
 8000a08:	2000009d 	.word	0x2000009d
 8000a0c:	2000009c 	.word	0x2000009c
 8000a10:	2000009f 	.word	0x2000009f
 8000a14:	20000003 	.word	0x20000003
 8000a18:	20000004 	.word	0x20000004
 8000a1c:	200000a0 	.word	0x200000a0
 8000a20:	20000005 	.word	0x20000005

08000a24 <GetEulData>:
//uint8_t GetAccelData(I2C_HandleTypeDef* hi2c_device, uint8_t* str) {
//	uint8_t status;
//	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_ACC_DATA_X_LSB, I2C_MEMADD_SIZE_8BIT, str, IMU_NUMBER_OF_BYTES,100);
//  //while (HAL_I2C_GetState(hi2c_device) != HAL_I2C_STATE_READY) {}
//	return status;
uint8_t GetEulData(I2C_HandleTypeDef* hi2c_device, uint8_t* str) {
 8000a24:	b580      	push	{r7, lr}
 8000a26:	b088      	sub	sp, #32
 8000a28:	af04      	add	r7, sp, #16
 8000a2a:	6078      	str	r0, [r7, #4]
 8000a2c:	6039      	str	r1, [r7, #0]
	uint8_t status;
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_EUL_HEADING_LSB, I2C_MEMADD_SIZE_8BIT, str, IMU_NUMBER_OF_BYTES,100);
 8000a2e:	2364      	movs	r3, #100	; 0x64
 8000a30:	9302      	str	r3, [sp, #8]
 8000a32:	2312      	movs	r3, #18
 8000a34:	9301      	str	r3, [sp, #4]
 8000a36:	683b      	ldr	r3, [r7, #0]
 8000a38:	9300      	str	r3, [sp, #0]
 8000a3a:	2301      	movs	r3, #1
 8000a3c:	221a      	movs	r2, #26
 8000a3e:	2150      	movs	r1, #80	; 0x50
 8000a40:	6878      	ldr	r0, [r7, #4]
 8000a42:	f005 fee5 	bl	8006810 <HAL_I2C_Mem_Read>
 8000a46:	4603      	mov	r3, r0
 8000a48:	73fb      	strb	r3, [r7, #15]
	//while (HAL_I2C_GetState(hi2c_device) != HAL_I2C_STATE_READY) {}
	return status;
 8000a4a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	3710      	adds	r7, #16
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}

08000a54 <GetQuaDataX>:
uint8_t GetQuaDataX(I2C_HandleTypeDef* hi2c_device, uint8_t* str) {
 8000a54:	b580      	push	{r7, lr}
 8000a56:	b088      	sub	sp, #32
 8000a58:	af04      	add	r7, sp, #16
 8000a5a:	6078      	str	r0, [r7, #4]
 8000a5c:	6039      	str	r1, [r7, #0]
	uint8_t status;
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_QUA_DATA_X_LSB, I2C_MEMADD_SIZE_8BIT, str, IMU_NUMBER_OF_BYTES,100);
 8000a5e:	2364      	movs	r3, #100	; 0x64
 8000a60:	9302      	str	r3, [sp, #8]
 8000a62:	2312      	movs	r3, #18
 8000a64:	9301      	str	r3, [sp, #4]
 8000a66:	683b      	ldr	r3, [r7, #0]
 8000a68:	9300      	str	r3, [sp, #0]
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	2222      	movs	r2, #34	; 0x22
 8000a6e:	2150      	movs	r1, #80	; 0x50
 8000a70:	6878      	ldr	r0, [r7, #4]
 8000a72:	f005 fecd 	bl	8006810 <HAL_I2C_Mem_Read>
 8000a76:	4603      	mov	r3, r0
 8000a78:	73fb      	strb	r3, [r7, #15]
	//while (HAL_I2C_GetState(hi2c_device) != HAL_I2C_STATE_READY) {}
	return status;
 8000a7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	3710      	adds	r7, #16
 8000a80:	46bd      	mov	sp, r7
 8000a82:	bd80      	pop	{r7, pc}

08000a84 <GetQuaDataY>:
uint8_t GetQuaDataY(I2C_HandleTypeDef* hi2c_device, uint8_t* str) {
 8000a84:	b580      	push	{r7, lr}
 8000a86:	b088      	sub	sp, #32
 8000a88:	af04      	add	r7, sp, #16
 8000a8a:	6078      	str	r0, [r7, #4]
 8000a8c:	6039      	str	r1, [r7, #0]
	uint8_t status;
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_QUA_DATA_Y_LSB, I2C_MEMADD_SIZE_8BIT, str, IMU_NUMBER_OF_BYTES,100);
 8000a8e:	2364      	movs	r3, #100	; 0x64
 8000a90:	9302      	str	r3, [sp, #8]
 8000a92:	2312      	movs	r3, #18
 8000a94:	9301      	str	r3, [sp, #4]
 8000a96:	683b      	ldr	r3, [r7, #0]
 8000a98:	9300      	str	r3, [sp, #0]
 8000a9a:	2301      	movs	r3, #1
 8000a9c:	2224      	movs	r2, #36	; 0x24
 8000a9e:	2150      	movs	r1, #80	; 0x50
 8000aa0:	6878      	ldr	r0, [r7, #4]
 8000aa2:	f005 feb5 	bl	8006810 <HAL_I2C_Mem_Read>
 8000aa6:	4603      	mov	r3, r0
 8000aa8:	73fb      	strb	r3, [r7, #15]
	//while (HAL_I2C_GetState(hi2c_device) != HAL_I2C_STATE_READY) {}
	return status;
 8000aaa:	7bfb      	ldrb	r3, [r7, #15]
}
 8000aac:	4618      	mov	r0, r3
 8000aae:	3710      	adds	r7, #16
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd80      	pop	{r7, pc}

08000ab4 <GetQuaDataZ>:
uint8_t GetQuaDataZ(I2C_HandleTypeDef* hi2c_device, uint8_t* str) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b088      	sub	sp, #32
 8000ab8:	af04      	add	r7, sp, #16
 8000aba:	6078      	str	r0, [r7, #4]
 8000abc:	6039      	str	r1, [r7, #0]
	uint8_t status;
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_QUA_DATA_Z_LSB , I2C_MEMADD_SIZE_8BIT, str, IMU_NUMBER_OF_BYTES,100);
 8000abe:	2364      	movs	r3, #100	; 0x64
 8000ac0:	9302      	str	r3, [sp, #8]
 8000ac2:	2312      	movs	r3, #18
 8000ac4:	9301      	str	r3, [sp, #4]
 8000ac6:	683b      	ldr	r3, [r7, #0]
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2301      	movs	r3, #1
 8000acc:	2226      	movs	r2, #38	; 0x26
 8000ace:	2150      	movs	r1, #80	; 0x50
 8000ad0:	6878      	ldr	r0, [r7, #4]
 8000ad2:	f005 fe9d 	bl	8006810 <HAL_I2C_Mem_Read>
 8000ad6:	4603      	mov	r3, r0
 8000ad8:	73fb      	strb	r3, [r7, #15]
	//while (HAL_I2C_GetState(hi2c_device) != HAL_I2C_STATE_READY) {}
	return status;
 8000ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8000adc:	4618      	mov	r0, r3
 8000ade:	3710      	adds	r7, #16
 8000ae0:	46bd      	mov	sp, r7
 8000ae2:	bd80      	pop	{r7, pc}

08000ae4 <GetQuaDataW>:
uint8_t GetQuaDataW(I2C_HandleTypeDef* hi2c_device, uint8_t* str) {
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	b088      	sub	sp, #32
 8000ae8:	af04      	add	r7, sp, #16
 8000aea:	6078      	str	r0, [r7, #4]
 8000aec:	6039      	str	r1, [r7, #0]
	uint8_t status;
	status = HAL_I2C_Mem_Read(hi2c_device, BNO055_I2C_ADDR_LO<<1, BNO055_QUA_DATA_W_LSB , I2C_MEMADD_SIZE_8BIT, str, IMU_NUMBER_OF_BYTES,100);
 8000aee:	2364      	movs	r3, #100	; 0x64
 8000af0:	9302      	str	r3, [sp, #8]
 8000af2:	2312      	movs	r3, #18
 8000af4:	9301      	str	r3, [sp, #4]
 8000af6:	683b      	ldr	r3, [r7, #0]
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2301      	movs	r3, #1
 8000afc:	2220      	movs	r2, #32
 8000afe:	2150      	movs	r1, #80	; 0x50
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f005 fe85 	bl	8006810 <HAL_I2C_Mem_Read>
 8000b06:	4603      	mov	r3, r0
 8000b08:	73fb      	strb	r3, [r7, #15]
	//while (HAL_I2C_GetState(hi2c_device) != HAL_I2C_STATE_READY) {}
	return status;
 8000b0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	3710      	adds	r7, #16
 8000b10:	46bd      	mov	sp, r7
 8000b12:	bd80      	pop	{r7, pc}

08000b14 <getIMU>:
	*cal_gyro 	= (calibration >> 4) & 0x03;
	*cal_acc 		= (calibration >> 2) & 0x03;
	*cal_mag 		= (calibration) & 0x03;
}

void getIMU(I2C_HandleTypeDef* hi2c_device, float __eul_data[3], float __qua_data[3]) {
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b088      	sub	sp, #32
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	60f8      	str	r0, [r7, #12]
 8000b1c:	60b9      	str	r1, [r7, #8]
 8000b1e:	607a      	str	r2, [r7, #4]
	  GetEulData(&hi2c1, (uint8_t*)imu_readings);
 8000b20:	495b      	ldr	r1, [pc, #364]	; (8000c90 <getIMU+0x17c>)
 8000b22:	485c      	ldr	r0, [pc, #368]	; (8000c94 <getIMU+0x180>)
 8000b24:	f7ff ff7e 	bl	8000a24 <GetEulData>
	  uint16_t __euler_h__ = (((int16_t)((uint8_t *)(imu_readings))[1] << 8) | ((uint8_t *)(imu_readings))[0]);      // Turn the MSB and LSB into a signed 16-bit value
 8000b28:	4b59      	ldr	r3, [pc, #356]	; (8000c90 <getIMU+0x17c>)
 8000b2a:	785b      	ldrb	r3, [r3, #1]
 8000b2c:	021b      	lsls	r3, r3, #8
 8000b2e:	b21a      	sxth	r2, r3
 8000b30:	4b57      	ldr	r3, [pc, #348]	; (8000c90 <getIMU+0x17c>)
 8000b32:	781b      	ldrb	r3, [r3, #0]
 8000b34:	b21b      	sxth	r3, r3
 8000b36:	4313      	orrs	r3, r2
 8000b38:	b21b      	sxth	r3, r3
 8000b3a:	83fb      	strh	r3, [r7, #30]
	  uint16_t __euler_p__ = (((int16_t)((uint8_t *)(imu_readings))[3] << 8) | ((uint8_t *)(imu_readings))[2]);
 8000b3c:	4b54      	ldr	r3, [pc, #336]	; (8000c90 <getIMU+0x17c>)
 8000b3e:	78db      	ldrb	r3, [r3, #3]
 8000b40:	021b      	lsls	r3, r3, #8
 8000b42:	b21a      	sxth	r2, r3
 8000b44:	4b52      	ldr	r3, [pc, #328]	; (8000c90 <getIMU+0x17c>)
 8000b46:	789b      	ldrb	r3, [r3, #2]
 8000b48:	b21b      	sxth	r3, r3
 8000b4a:	4313      	orrs	r3, r2
 8000b4c:	b21b      	sxth	r3, r3
 8000b4e:	83bb      	strh	r3, [r7, #28]
	  uint16_t __euler_r__ = (((int16_t)((uint8_t *)(imu_readings))[5] << 8) | ((uint8_t *)(imu_readings))[4]);
 8000b50:	4b4f      	ldr	r3, [pc, #316]	; (8000c90 <getIMU+0x17c>)
 8000b52:	795b      	ldrb	r3, [r3, #5]
 8000b54:	021b      	lsls	r3, r3, #8
 8000b56:	b21a      	sxth	r2, r3
 8000b58:	4b4d      	ldr	r3, [pc, #308]	; (8000c90 <getIMU+0x17c>)
 8000b5a:	791b      	ldrb	r3, [r3, #4]
 8000b5c:	b21b      	sxth	r3, r3
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	b21b      	sxth	r3, r3
 8000b62:	837b      	strh	r3, [r7, #26]

	  __eul_data[0] = ((float)(__euler_h__)) / 16.0f;
 8000b64:	8bfb      	ldrh	r3, [r7, #30]
 8000b66:	ee07 3a90 	vmov	s15, r3
 8000b6a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b6e:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000b72:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b76:	68bb      	ldr	r3, [r7, #8]
 8000b78:	edc3 7a00 	vstr	s15, [r3]
	  __eul_data[1] = ((float)(__euler_p__)) / 16.0f;
 8000b7c:	8bbb      	ldrh	r3, [r7, #28]
 8000b7e:	ee07 3a90 	vmov	s15, r3
 8000b82:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000b86:	68bb      	ldr	r3, [r7, #8]
 8000b88:	3304      	adds	r3, #4
 8000b8a:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000b8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000b92:	edc3 7a00 	vstr	s15, [r3]
	  __eul_data[2] = ((float)(__euler_r__)) / 16.0f;
 8000b96:	8b7b      	ldrh	r3, [r7, #26]
 8000b98:	ee07 3a90 	vmov	s15, r3
 8000b9c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	3308      	adds	r3, #8
 8000ba4:	eef3 6a00 	vmov.f32	s13, #48	; 0x41800000  16.0
 8000ba8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bac:	edc3 7a00 	vstr	s15, [r3]

	  GetQuaDataX(&hi2c1, (uint8_t*)imu_readings);
 8000bb0:	4937      	ldr	r1, [pc, #220]	; (8000c90 <getIMU+0x17c>)
 8000bb2:	4838      	ldr	r0, [pc, #224]	; (8000c94 <getIMU+0x180>)
 8000bb4:	f7ff ff4e 	bl	8000a54 <GetQuaDataX>
	  uint16_t __qua_x__ = (((int16_t)((uint8_t *)(imu_readings))[1] << 8) | ((uint8_t *)(imu_readings))[0]);
 8000bb8:	4b35      	ldr	r3, [pc, #212]	; (8000c90 <getIMU+0x17c>)
 8000bba:	785b      	ldrb	r3, [r3, #1]
 8000bbc:	021b      	lsls	r3, r3, #8
 8000bbe:	b21a      	sxth	r2, r3
 8000bc0:	4b33      	ldr	r3, [pc, #204]	; (8000c90 <getIMU+0x17c>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	b21b      	sxth	r3, r3
 8000bc6:	4313      	orrs	r3, r2
 8000bc8:	b21b      	sxth	r3, r3
 8000bca:	833b      	strh	r3, [r7, #24]
	  __qua_data[0] =  ((float)(__qua_x__))/16384;
 8000bcc:	8b3b      	ldrh	r3, [r7, #24]
 8000bce:	ee07 3a90 	vmov	s15, r3
 8000bd2:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000bd6:	eddf 6a30 	vldr	s13, [pc, #192]	; 8000c98 <getIMU+0x184>
 8000bda:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	edc3 7a00 	vstr	s15, [r3]

	  GetQuaDataY(&hi2c1, (uint8_t*)imu_readings);
 8000be4:	492a      	ldr	r1, [pc, #168]	; (8000c90 <getIMU+0x17c>)
 8000be6:	482b      	ldr	r0, [pc, #172]	; (8000c94 <getIMU+0x180>)
 8000be8:	f7ff ff4c 	bl	8000a84 <GetQuaDataY>
	  uint16_t __qua_y__ = (((int16_t)((uint8_t *)(imu_readings))[3] << 8) | ((uint8_t *)(imu_readings))[2]);
 8000bec:	4b28      	ldr	r3, [pc, #160]	; (8000c90 <getIMU+0x17c>)
 8000bee:	78db      	ldrb	r3, [r3, #3]
 8000bf0:	021b      	lsls	r3, r3, #8
 8000bf2:	b21a      	sxth	r2, r3
 8000bf4:	4b26      	ldr	r3, [pc, #152]	; (8000c90 <getIMU+0x17c>)
 8000bf6:	789b      	ldrb	r3, [r3, #2]
 8000bf8:	b21b      	sxth	r3, r3
 8000bfa:	4313      	orrs	r3, r2
 8000bfc:	b21b      	sxth	r3, r3
 8000bfe:	82fb      	strh	r3, [r7, #22]
	  __qua_data[1] = ((float)(__qua_y__))/16384;
 8000c00:	8afb      	ldrh	r3, [r7, #22]
 8000c02:	ee07 3a90 	vmov	s15, r3
 8000c06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	3304      	adds	r3, #4
 8000c0e:	eddf 6a22 	vldr	s13, [pc, #136]	; 8000c98 <getIMU+0x184>
 8000c12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c16:	edc3 7a00 	vstr	s15, [r3]

	  GetQuaDataZ(&hi2c1, (uint8_t*)imu_readings);
 8000c1a:	491d      	ldr	r1, [pc, #116]	; (8000c90 <getIMU+0x17c>)
 8000c1c:	481d      	ldr	r0, [pc, #116]	; (8000c94 <getIMU+0x180>)
 8000c1e:	f7ff ff49 	bl	8000ab4 <GetQuaDataZ>
	  uint16_t __qua_z__ = (((int16_t)((uint8_t *)(imu_readings))[5] << 8) | ((uint8_t *)(imu_readings))[4]);
 8000c22:	4b1b      	ldr	r3, [pc, #108]	; (8000c90 <getIMU+0x17c>)
 8000c24:	795b      	ldrb	r3, [r3, #5]
 8000c26:	021b      	lsls	r3, r3, #8
 8000c28:	b21a      	sxth	r2, r3
 8000c2a:	4b19      	ldr	r3, [pc, #100]	; (8000c90 <getIMU+0x17c>)
 8000c2c:	791b      	ldrb	r3, [r3, #4]
 8000c2e:	b21b      	sxth	r3, r3
 8000c30:	4313      	orrs	r3, r2
 8000c32:	b21b      	sxth	r3, r3
 8000c34:	82bb      	strh	r3, [r7, #20]
	  __qua_data[2] = ((float)(__qua_z__))/16384;
 8000c36:	8abb      	ldrh	r3, [r7, #20]
 8000c38:	ee07 3a90 	vmov	s15, r3
 8000c3c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3308      	adds	r3, #8
 8000c44:	eddf 6a14 	vldr	s13, [pc, #80]	; 8000c98 <getIMU+0x184>
 8000c48:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c4c:	edc3 7a00 	vstr	s15, [r3]

	  GetQuaDataW(&hi2c1, (uint8_t*)imu_readings);
 8000c50:	490f      	ldr	r1, [pc, #60]	; (8000c90 <getIMU+0x17c>)
 8000c52:	4810      	ldr	r0, [pc, #64]	; (8000c94 <getIMU+0x180>)
 8000c54:	f7ff ff46 	bl	8000ae4 <GetQuaDataW>
	  uint16_t __qua_w__ = (((int16_t)((uint8_t *)(imu_readings))[7] << 8) | ((uint8_t *)(imu_readings))[6]);
 8000c58:	4b0d      	ldr	r3, [pc, #52]	; (8000c90 <getIMU+0x17c>)
 8000c5a:	79db      	ldrb	r3, [r3, #7]
 8000c5c:	021b      	lsls	r3, r3, #8
 8000c5e:	b21a      	sxth	r2, r3
 8000c60:	4b0b      	ldr	r3, [pc, #44]	; (8000c90 <getIMU+0x17c>)
 8000c62:	799b      	ldrb	r3, [r3, #6]
 8000c64:	b21b      	sxth	r3, r3
 8000c66:	4313      	orrs	r3, r2
 8000c68:	b21b      	sxth	r3, r3
 8000c6a:	827b      	strh	r3, [r7, #18]
	  __qua_data[3] =  ((float)(__qua_w__))/16384;
 8000c6c:	8a7b      	ldrh	r3, [r7, #18]
 8000c6e:	ee07 3a90 	vmov	s15, r3
 8000c72:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	330c      	adds	r3, #12
 8000c7a:	eddf 6a07 	vldr	s13, [pc, #28]	; 8000c98 <getIMU+0x184>
 8000c7e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000c82:	edc3 7a00 	vstr	s15, [r3]
}
 8000c86:	bf00      	nop
 8000c88:	3720      	adds	r7, #32
 8000c8a:	46bd      	mov	sp, r7
 8000c8c:	bd80      	pop	{r7, pc}
 8000c8e:	bf00      	nop
 8000c90:	20000b80 	.word	0x20000b80
 8000c94:	20000ca0 	.word	0x20000ca0
 8000c98:	46800000 	.word	0x46800000

08000c9c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ca0:	f004 fc04 	bl	80054ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ca4:	f000 f81c 	bl	8000ce0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ca8:	f000 f928 	bl	8000efc <MX_GPIO_Init>
  MX_DMA_Init();
 8000cac:	f000 f8ee 	bl	8000e8c <MX_DMA_Init>
  MX_USART3_UART_Init();
 8000cb0:	f000 f8c2 	bl	8000e38 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000cb4:	f000 f880 	bl	8000db8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  BNO055_Init_I2C(&hi2c1);
 8000cb8:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <main+0x38>)
 8000cba:	f7ff fdd7 	bl	800086c <BNO055_Init_I2C>
  setup();
 8000cbe:	f003 fc07 	bl	80044d0 <setup>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  getIMU(&hi2c1, IMU_Euler, IMU_Quarternion);
 8000cc2:	4a05      	ldr	r2, [pc, #20]	; (8000cd8 <main+0x3c>)
 8000cc4:	4905      	ldr	r1, [pc, #20]	; (8000cdc <main+0x40>)
 8000cc6:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <main+0x38>)
 8000cc8:	f7ff ff24 	bl	8000b14 <getIMU>
	  loop();
 8000ccc:	f003 fc10 	bl	80044f0 <loop>
	  getIMU(&hi2c1, IMU_Euler, IMU_Quarternion);
 8000cd0:	e7f7      	b.n	8000cc2 <main+0x26>
 8000cd2:	bf00      	nop
 8000cd4:	20000ca0 	.word	0x20000ca0
 8000cd8:	200000b0 	.word	0x200000b0
 8000cdc:	200000a4 	.word	0x200000a4

08000ce0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b094      	sub	sp, #80	; 0x50
 8000ce4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ce6:	f107 0320 	add.w	r3, r7, #32
 8000cea:	2230      	movs	r2, #48	; 0x30
 8000cec:	2100      	movs	r1, #0
 8000cee:	4618      	mov	r0, r3
 8000cf0:	f007 ff68 	bl	8008bc4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000cf4:	f107 030c 	add.w	r3, r7, #12
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	601a      	str	r2, [r3, #0]
 8000cfc:	605a      	str	r2, [r3, #4]
 8000cfe:	609a      	str	r2, [r3, #8]
 8000d00:	60da      	str	r2, [r3, #12]
 8000d02:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	4b29      	ldr	r3, [pc, #164]	; (8000db0 <SystemClock_Config+0xd0>)
 8000d0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0c:	4a28      	ldr	r2, [pc, #160]	; (8000db0 <SystemClock_Config+0xd0>)
 8000d0e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d12:	6413      	str	r3, [r2, #64]	; 0x40
 8000d14:	4b26      	ldr	r3, [pc, #152]	; (8000db0 <SystemClock_Config+0xd0>)
 8000d16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d18:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d1c:	60bb      	str	r3, [r7, #8]
 8000d1e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000d20:	2300      	movs	r3, #0
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	4b23      	ldr	r3, [pc, #140]	; (8000db4 <SystemClock_Config+0xd4>)
 8000d26:	681b      	ldr	r3, [r3, #0]
 8000d28:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000d2c:	4a21      	ldr	r2, [pc, #132]	; (8000db4 <SystemClock_Config+0xd4>)
 8000d2e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d32:	6013      	str	r3, [r2, #0]
 8000d34:	4b1f      	ldr	r3, [pc, #124]	; (8000db4 <SystemClock_Config+0xd4>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000d3c:	607b      	str	r3, [r7, #4]
 8000d3e:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000d40:	2301      	movs	r3, #1
 8000d42:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000d44:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000d48:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d4a:	2302      	movs	r3, #2
 8000d4c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000d4e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000d52:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000d54:	2304      	movs	r3, #4
 8000d56:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 64;
 8000d58:	2340      	movs	r3, #64	; 0x40
 8000d5a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000d5c:	2302      	movs	r3, #2
 8000d5e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000d60:	2307      	movs	r3, #7
 8000d62:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d64:	f107 0320 	add.w	r3, r7, #32
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f006 fb39 	bl	80073e0 <HAL_RCC_OscConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000d74:	f000 f970 	bl	8001058 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d78:	230f      	movs	r3, #15
 8000d7a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d80:	2300      	movs	r3, #0
 8000d82:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d84:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d88:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d90:	f107 030c 	add.w	r3, r7, #12
 8000d94:	2102      	movs	r1, #2
 8000d96:	4618      	mov	r0, r3
 8000d98:	f006 fd9a 	bl	80078d0 <HAL_RCC_ClockConfig>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000da2:	f000 f959 	bl	8001058 <Error_Handler>
  }
}
 8000da6:	bf00      	nop
 8000da8:	3750      	adds	r7, #80	; 0x50
 8000daa:	46bd      	mov	sp, r7
 8000dac:	bd80      	pop	{r7, pc}
 8000dae:	bf00      	nop
 8000db0:	40023800 	.word	0x40023800
 8000db4:	40007000 	.word	0x40007000

08000db8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000dbe:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <MX_I2C1_Init+0x78>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <MX_I2C1_Init+0x7c>)
 8000dc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000dd6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000dda:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ddc:	4b13      	ldr	r3, [pc, #76]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000dde:	2200      	movs	r2, #0
 8000de0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000de2:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000de4:	2200      	movs	r2, #0
 8000de6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de8:	4b10      	ldr	r3, [pc, #64]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000dea:	2200      	movs	r2, #0
 8000dec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dee:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000df0:	2200      	movs	r2, #0
 8000df2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000df6:	f005 fac9 	bl	800638c <HAL_I2C_Init>
 8000dfa:	4603      	mov	r3, r0
 8000dfc:	2b00      	cmp	r3, #0
 8000dfe:	d001      	beq.n	8000e04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000e00:	f000 f92a 	bl	8001058 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e04:	2100      	movs	r1, #0
 8000e06:	4809      	ldr	r0, [pc, #36]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000e08:	f006 fa6f 	bl	80072ea <HAL_I2CEx_ConfigAnalogFilter>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_I2C1_Init+0x5e>
  {
    Error_Handler();
 8000e12:	f000 f921 	bl	8001058 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000e16:	2100      	movs	r1, #0
 8000e18:	4804      	ldr	r0, [pc, #16]	; (8000e2c <MX_I2C1_Init+0x74>)
 8000e1a:	f006 faa2 	bl	8007362 <HAL_I2CEx_ConfigDigitalFilter>
 8000e1e:	4603      	mov	r3, r0
 8000e20:	2b00      	cmp	r3, #0
 8000e22:	d001      	beq.n	8000e28 <MX_I2C1_Init+0x70>
  {
    Error_Handler();
 8000e24:	f000 f918 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000e28:	bf00      	nop
 8000e2a:	bd80      	pop	{r7, pc}
 8000e2c:	20000ca0 	.word	0x20000ca0
 8000e30:	40005400 	.word	0x40005400
 8000e34:	000186a0 	.word	0x000186a0

08000e38 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	; (8000e88 <MX_USART3_UART_Init+0x50>)
 8000e40:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000e42:	4b10      	ldr	r3, [pc, #64]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e44:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000e48:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000e4a:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000e50:	4b0c      	ldr	r3, [pc, #48]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000e56:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000e5c:	4b09      	ldr	r3, [pc, #36]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e5e:	220c      	movs	r2, #12
 8000e60:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000e62:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000e68:	4b06      	ldr	r3, [pc, #24]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000e6e:	4805      	ldr	r0, [pc, #20]	; (8000e84 <MX_USART3_UART_Init+0x4c>)
 8000e70:	f006 ff2a 	bl	8007cc8 <HAL_UART_Init>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000e7a:	f000 f8ed 	bl	8001058 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000e7e:	bf00      	nop
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	20000bfc 	.word	0x20000bfc
 8000e88:	40004800 	.word	0x40004800

08000e8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	b082      	sub	sp, #8
 8000e90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000e92:	2300      	movs	r3, #0
 8000e94:	607b      	str	r3, [r7, #4]
 8000e96:	4b18      	ldr	r3, [pc, #96]	; (8000ef8 <MX_DMA_Init+0x6c>)
 8000e98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e9a:	4a17      	ldr	r2, [pc, #92]	; (8000ef8 <MX_DMA_Init+0x6c>)
 8000e9c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000ea0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ea2:	4b15      	ldr	r3, [pc, #84]	; (8000ef8 <MX_DMA_Init+0x6c>)
 8000ea4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ea6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000eaa:	607b      	str	r3, [r7, #4]
 8000eac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 0, 0);
 8000eae:	2200      	movs	r2, #0
 8000eb0:	2100      	movs	r1, #0
 8000eb2:	200b      	movs	r0, #11
 8000eb4:	f004 fc6b 	bl	800578e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000eb8:	200b      	movs	r0, #11
 8000eba:	f004 fc84 	bl	80057c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 0, 0);
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	2100      	movs	r1, #0
 8000ec2:	200c      	movs	r0, #12
 8000ec4:	f004 fc63 	bl	800578e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000ec8:	200c      	movs	r0, #12
 8000eca:	f004 fc7c 	bl	80057c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 0, 0);
 8000ece:	2200      	movs	r2, #0
 8000ed0:	2100      	movs	r1, #0
 8000ed2:	200e      	movs	r0, #14
 8000ed4:	f004 fc5b 	bl	800578e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000ed8:	200e      	movs	r0, #14
 8000eda:	f004 fc74 	bl	80057c6 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8000ede:	2200      	movs	r2, #0
 8000ee0:	2100      	movs	r1, #0
 8000ee2:	2011      	movs	r0, #17
 8000ee4:	f004 fc53 	bl	800578e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000ee8:	2011      	movs	r0, #17
 8000eea:	f004 fc6c 	bl	80057c6 <HAL_NVIC_EnableIRQ>

}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40023800 	.word	0x40023800

08000efc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	; 0x30
 8000f00:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f02:	f107 031c 	add.w	r3, r7, #28
 8000f06:	2200      	movs	r2, #0
 8000f08:	601a      	str	r2, [r3, #0]
 8000f0a:	605a      	str	r2, [r3, #4]
 8000f0c:	609a      	str	r2, [r3, #8]
 8000f0e:	60da      	str	r2, [r3, #12]
 8000f10:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	61bb      	str	r3, [r7, #24]
 8000f16:	4b4b      	ldr	r3, [pc, #300]	; (8001044 <MX_GPIO_Init+0x148>)
 8000f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f1a:	4a4a      	ldr	r2, [pc, #296]	; (8001044 <MX_GPIO_Init+0x148>)
 8000f1c:	f043 0304 	orr.w	r3, r3, #4
 8000f20:	6313      	str	r3, [r2, #48]	; 0x30
 8000f22:	4b48      	ldr	r3, [pc, #288]	; (8001044 <MX_GPIO_Init+0x148>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	f003 0304 	and.w	r3, r3, #4
 8000f2a:	61bb      	str	r3, [r7, #24]
 8000f2c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f2e:	2300      	movs	r3, #0
 8000f30:	617b      	str	r3, [r7, #20]
 8000f32:	4b44      	ldr	r3, [pc, #272]	; (8001044 <MX_GPIO_Init+0x148>)
 8000f34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f36:	4a43      	ldr	r2, [pc, #268]	; (8001044 <MX_GPIO_Init+0x148>)
 8000f38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f3c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f3e:	4b41      	ldr	r3, [pc, #260]	; (8001044 <MX_GPIO_Init+0x148>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f46:	617b      	str	r3, [r7, #20]
 8000f48:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	613b      	str	r3, [r7, #16]
 8000f4e:	4b3d      	ldr	r3, [pc, #244]	; (8001044 <MX_GPIO_Init+0x148>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a3c      	ldr	r2, [pc, #240]	; (8001044 <MX_GPIO_Init+0x148>)
 8000f54:	f043 0302 	orr.w	r3, r3, #2
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b3a      	ldr	r3, [pc, #232]	; (8001044 <MX_GPIO_Init+0x148>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0302 	and.w	r3, r3, #2
 8000f62:	613b      	str	r3, [r7, #16]
 8000f64:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	60fb      	str	r3, [r7, #12]
 8000f6a:	4b36      	ldr	r3, [pc, #216]	; (8001044 <MX_GPIO_Init+0x148>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a35      	ldr	r2, [pc, #212]	; (8001044 <MX_GPIO_Init+0x148>)
 8000f70:	f043 0308 	orr.w	r3, r3, #8
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b33      	ldr	r3, [pc, #204]	; (8001044 <MX_GPIO_Init+0x148>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0308 	and.w	r3, r3, #8
 8000f7e:	60fb      	str	r3, [r7, #12]
 8000f80:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	60bb      	str	r3, [r7, #8]
 8000f86:	4b2f      	ldr	r3, [pc, #188]	; (8001044 <MX_GPIO_Init+0x148>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a2e      	ldr	r2, [pc, #184]	; (8001044 <MX_GPIO_Init+0x148>)
 8000f8c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b2c      	ldr	r3, [pc, #176]	; (8001044 <MX_GPIO_Init+0x148>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000f9a:	60bb      	str	r3, [r7, #8]
 8000f9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f9e:	2300      	movs	r3, #0
 8000fa0:	607b      	str	r3, [r7, #4]
 8000fa2:	4b28      	ldr	r3, [pc, #160]	; (8001044 <MX_GPIO_Init+0x148>)
 8000fa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fa6:	4a27      	ldr	r2, [pc, #156]	; (8001044 <MX_GPIO_Init+0x148>)
 8000fa8:	f043 0301 	orr.w	r3, r3, #1
 8000fac:	6313      	str	r3, [r2, #48]	; 0x30
 8000fae:	4b25      	ldr	r3, [pc, #148]	; (8001044 <MX_GPIO_Init+0x148>)
 8000fb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fb2:	f003 0301 	and.w	r3, r3, #1
 8000fb6:	607b      	str	r3, [r7, #4]
 8000fb8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000fba:	2200      	movs	r2, #0
 8000fbc:	f244 0181 	movw	r1, #16513	; 0x4081
 8000fc0:	4821      	ldr	r0, [pc, #132]	; (8001048 <MX_GPIO_Init+0x14c>)
 8000fc2:	f005 f9c9 	bl	8006358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2140      	movs	r1, #64	; 0x40
 8000fca:	4820      	ldr	r0, [pc, #128]	; (800104c <MX_GPIO_Init+0x150>)
 8000fcc:	f005 f9c4 	bl	8006358 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000fd0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fd4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000fd6:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <MX_GPIO_Init+0x154>)
 8000fd8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000fde:	f107 031c 	add.w	r3, r7, #28
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	481b      	ldr	r0, [pc, #108]	; (8001054 <MX_GPIO_Init+0x158>)
 8000fe6:	f005 f80b 	bl	8006000 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000fea:	f244 0381 	movw	r3, #16513	; 0x4081
 8000fee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff4:	2300      	movs	r3, #0
 8000ff6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ffc:	f107 031c 	add.w	r3, r7, #28
 8001000:	4619      	mov	r1, r3
 8001002:	4811      	ldr	r0, [pc, #68]	; (8001048 <MX_GPIO_Init+0x14c>)
 8001004:	f004 fffc 	bl	8006000 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8001008:	2340      	movs	r3, #64	; 0x40
 800100a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800100c:	2301      	movs	r3, #1
 800100e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001010:	2300      	movs	r3, #0
 8001012:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001014:	2300      	movs	r3, #0
 8001016:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8001018:	f107 031c 	add.w	r3, r7, #28
 800101c:	4619      	mov	r1, r3
 800101e:	480b      	ldr	r0, [pc, #44]	; (800104c <MX_GPIO_Init+0x150>)
 8001020:	f004 ffee 	bl	8006000 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8001024:	2380      	movs	r3, #128	; 0x80
 8001026:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001028:	2300      	movs	r3, #0
 800102a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800102c:	2300      	movs	r3, #0
 800102e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8001030:	f107 031c 	add.w	r3, r7, #28
 8001034:	4619      	mov	r1, r3
 8001036:	4805      	ldr	r0, [pc, #20]	; (800104c <MX_GPIO_Init+0x150>)
 8001038:	f004 ffe2 	bl	8006000 <HAL_GPIO_Init>

}
 800103c:	bf00      	nop
 800103e:	3730      	adds	r7, #48	; 0x30
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40023800 	.word	0x40023800
 8001048:	40020400 	.word	0x40020400
 800104c:	40021800 	.word	0x40021800
 8001050:	10110000 	.word	0x10110000
 8001054:	40020800 	.word	0x40020800

08001058 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001058:	b480      	push	{r7}
 800105a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800105c:	b672      	cpsid	i
}
 800105e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001060:	e7fe      	b.n	8001060 <Error_Handler+0x8>

08001062 <_ZN3ros4TimeC1Ev>:
class Time
{
public:
  uint32_t sec, nsec;

  Time() : sec(0), nsec(0) {}
 8001062:	b480      	push	{r7}
 8001064:	b083      	sub	sp, #12
 8001066:	af00      	add	r7, sp, #0
 8001068:	6078      	str	r0, [r7, #4]
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	2200      	movs	r2, #0
 800106e:	601a      	str	r2, [r3, #0]
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	605a      	str	r2, [r3, #4]
 8001076:	687b      	ldr	r3, [r7, #4]
 8001078:	4618      	mov	r0, r3
 800107a:	370c      	adds	r7, #12
 800107c:	46bd      	mov	sp, r7
 800107e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001082:	4770      	bx	lr

08001084 <_ZN3ros3MsgC1Ev>:

namespace ros
{

/* Base Message Type */
class Msg
 8001084:	b480      	push	{r7}
 8001086:	b083      	sub	sp, #12
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
 800108c:	4a04      	ldr	r2, [pc, #16]	; (80010a0 <_ZN3ros3MsgC1Ev+0x1c>)
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	4618      	mov	r0, r3
 8001096:	370c      	adds	r7, #12
 8001098:	46bd      	mov	sp, r7
 800109a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800109e:	4770      	bx	lr
 80010a0:	08009174 	.word	0x08009174

080010a4 <_ZN8std_msgs4TimeC1Ev>:
  {
    public:
      typedef ros::Time _data_type;
      _data_type data;

    Time():
 80010a4:	b580      	push	{r7, lr}
 80010a6:	b082      	sub	sp, #8
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
      data()
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4618      	mov	r0, r3
 80010b0:	f7ff ffe8 	bl	8001084 <_ZN3ros3MsgC1Ev>
 80010b4:	4a06      	ldr	r2, [pc, #24]	; (80010d0 <_ZN8std_msgs4TimeC1Ev+0x2c>)
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	601a      	str	r2, [r3, #0]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	3304      	adds	r3, #4
 80010be:	4618      	mov	r0, r3
 80010c0:	f7ff ffcf 	bl	8001062 <_ZN3ros4TimeC1Ev>
    {
    }
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	0800915c 	.word	0x0800915c

080010d4 <_ZNK8std_msgs4Time9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80010d4:	b480      	push	{r7}
 80010d6:	b085      	sub	sp, #20
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
 80010dc:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80010de:	2300      	movs	r3, #0
 80010e0:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.sec >> (8 * 0)) & 0xFF;
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	6859      	ldr	r1, [r3, #4]
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	683a      	ldr	r2, [r7, #0]
 80010ea:	4413      	add	r3, r2
 80010ec:	b2ca      	uxtb	r2, r1
 80010ee:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.sec >> (8 * 1)) & 0xFF;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	685b      	ldr	r3, [r3, #4]
 80010f4:	0a19      	lsrs	r1, r3, #8
 80010f6:	68fb      	ldr	r3, [r7, #12]
 80010f8:	3301      	adds	r3, #1
 80010fa:	683a      	ldr	r2, [r7, #0]
 80010fc:	4413      	add	r3, r2
 80010fe:	b2ca      	uxtb	r2, r1
 8001100:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.sec >> (8 * 2)) & 0xFF;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	685b      	ldr	r3, [r3, #4]
 8001106:	0c19      	lsrs	r1, r3, #16
 8001108:	68fb      	ldr	r3, [r7, #12]
 800110a:	3302      	adds	r3, #2
 800110c:	683a      	ldr	r2, [r7, #0]
 800110e:	4413      	add	r3, r2
 8001110:	b2ca      	uxtb	r2, r1
 8001112:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.sec >> (8 * 3)) & 0xFF;
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	685b      	ldr	r3, [r3, #4]
 8001118:	0e19      	lsrs	r1, r3, #24
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	3303      	adds	r3, #3
 800111e:	683a      	ldr	r2, [r7, #0]
 8001120:	4413      	add	r3, r2
 8001122:	b2ca      	uxtb	r2, r1
 8001124:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.sec);
 8001126:	68fb      	ldr	r3, [r7, #12]
 8001128:	3304      	adds	r3, #4
 800112a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->data.nsec >> (8 * 0)) & 0xFF;
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	6899      	ldr	r1, [r3, #8]
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	683a      	ldr	r2, [r7, #0]
 8001134:	4413      	add	r3, r2
 8001136:	b2ca      	uxtb	r2, r1
 8001138:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->data.nsec >> (8 * 1)) & 0xFF;
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	689b      	ldr	r3, [r3, #8]
 800113e:	0a19      	lsrs	r1, r3, #8
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	3301      	adds	r3, #1
 8001144:	683a      	ldr	r2, [r7, #0]
 8001146:	4413      	add	r3, r2
 8001148:	b2ca      	uxtb	r2, r1
 800114a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->data.nsec >> (8 * 2)) & 0xFF;
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	689b      	ldr	r3, [r3, #8]
 8001150:	0c19      	lsrs	r1, r3, #16
 8001152:	68fb      	ldr	r3, [r7, #12]
 8001154:	3302      	adds	r3, #2
 8001156:	683a      	ldr	r2, [r7, #0]
 8001158:	4413      	add	r3, r2
 800115a:	b2ca      	uxtb	r2, r1
 800115c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->data.nsec >> (8 * 3)) & 0xFF;
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	689b      	ldr	r3, [r3, #8]
 8001162:	0e19      	lsrs	r1, r3, #24
 8001164:	68fb      	ldr	r3, [r7, #12]
 8001166:	3303      	adds	r3, #3
 8001168:	683a      	ldr	r2, [r7, #0]
 800116a:	4413      	add	r3, r2
 800116c:	b2ca      	uxtb	r2, r1
 800116e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->data.nsec);
 8001170:	68fb      	ldr	r3, [r7, #12]
 8001172:	3304      	adds	r3, #4
 8001174:	60fb      	str	r3, [r7, #12]
      return offset;
 8001176:	68fb      	ldr	r3, [r7, #12]
    }
 8001178:	4618      	mov	r0, r3
 800117a:	3714      	adds	r7, #20
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr

08001184 <_ZN8std_msgs4Time11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001184:	b480      	push	{r7}
 8001186:	b085      	sub	sp, #20
 8001188:	af00      	add	r7, sp, #0
 800118a:	6078      	str	r0, [r7, #4]
 800118c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	60fb      	str	r3, [r7, #12]
      this->data.sec =  ((uint32_t) (*(inbuffer + offset)));
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	683a      	ldr	r2, [r7, #0]
 8001196:	4413      	add	r3, r2
 8001198:	781b      	ldrb	r3, [r3, #0]
 800119a:	461a      	mov	r2, r3
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80011a0:	687b      	ldr	r3, [r7, #4]
 80011a2:	685a      	ldr	r2, [r3, #4]
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	3301      	adds	r3, #1
 80011a8:	6839      	ldr	r1, [r7, #0]
 80011aa:	440b      	add	r3, r1
 80011ac:	781b      	ldrb	r3, [r3, #0]
 80011ae:	021b      	lsls	r3, r3, #8
 80011b0:	431a      	orrs	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	685a      	ldr	r2, [r3, #4]
 80011ba:	68fb      	ldr	r3, [r7, #12]
 80011bc:	3302      	adds	r3, #2
 80011be:	6839      	ldr	r1, [r7, #0]
 80011c0:	440b      	add	r3, r1
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	041b      	lsls	r3, r3, #16
 80011c6:	431a      	orrs	r2, r3
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	605a      	str	r2, [r3, #4]
      this->data.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	685a      	ldr	r2, [r3, #4]
 80011d0:	68fb      	ldr	r3, [r7, #12]
 80011d2:	3303      	adds	r3, #3
 80011d4:	6839      	ldr	r1, [r7, #0]
 80011d6:	440b      	add	r3, r1
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	061b      	lsls	r3, r3, #24
 80011dc:	431a      	orrs	r2, r3
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->data.sec);
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	3304      	adds	r3, #4
 80011e6:	60fb      	str	r3, [r7, #12]
      this->data.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80011e8:	68fb      	ldr	r3, [r7, #12]
 80011ea:	683a      	ldr	r2, [r7, #0]
 80011ec:	4413      	add	r3, r2
 80011ee:	781b      	ldrb	r3, [r3, #0]
 80011f0:	461a      	mov	r2, r3
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	689a      	ldr	r2, [r3, #8]
 80011fa:	68fb      	ldr	r3, [r7, #12]
 80011fc:	3301      	adds	r3, #1
 80011fe:	6839      	ldr	r1, [r7, #0]
 8001200:	440b      	add	r3, r1
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	021b      	lsls	r3, r3, #8
 8001206:	431a      	orrs	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	689a      	ldr	r2, [r3, #8]
 8001210:	68fb      	ldr	r3, [r7, #12]
 8001212:	3302      	adds	r3, #2
 8001214:	6839      	ldr	r1, [r7, #0]
 8001216:	440b      	add	r3, r1
 8001218:	781b      	ldrb	r3, [r3, #0]
 800121a:	041b      	lsls	r3, r3, #16
 800121c:	431a      	orrs	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	609a      	str	r2, [r3, #8]
      this->data.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	689a      	ldr	r2, [r3, #8]
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	3303      	adds	r3, #3
 800122a:	6839      	ldr	r1, [r7, #0]
 800122c:	440b      	add	r3, r1
 800122e:	781b      	ldrb	r3, [r3, #0]
 8001230:	061b      	lsls	r3, r3, #24
 8001232:	431a      	orrs	r2, r3
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->data.nsec);
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	3304      	adds	r3, #4
 800123c:	60fb      	str	r3, [r7, #12]
     return offset;
 800123e:	68fb      	ldr	r3, [r7, #12]
    }
 8001240:	4618      	mov	r0, r3
 8001242:	3714      	adds	r7, #20
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr

0800124c <_ZN8std_msgs4Time7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Time"; };
 800124c:	b480      	push	{r7}
 800124e:	b083      	sub	sp, #12
 8001250:	af00      	add	r7, sp, #0
 8001252:	6078      	str	r0, [r7, #4]
 8001254:	4b03      	ldr	r3, [pc, #12]	; (8001264 <_ZN8std_msgs4Time7getTypeEv+0x18>)
 8001256:	4618      	mov	r0, r3
 8001258:	370c      	adds	r7, #12
 800125a:	46bd      	mov	sp, r7
 800125c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001260:	4770      	bx	lr
 8001262:	bf00      	nop
 8001264:	08008e70 	.word	0x08008e70

08001268 <_ZN8std_msgs4Time6getMD5Ev>:
    virtual const char * getMD5() override { return "cd7166c74c552c311fbcc2fe5a7bc289"; };
 8001268:	b480      	push	{r7}
 800126a:	b083      	sub	sp, #12
 800126c:	af00      	add	r7, sp, #0
 800126e:	6078      	str	r0, [r7, #4]
 8001270:	4b03      	ldr	r3, [pc, #12]	; (8001280 <_ZN8std_msgs4Time6getMD5Ev+0x18>)
 8001272:	4618      	mov	r0, r3
 8001274:	370c      	adds	r7, #12
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
 800127e:	bf00      	nop
 8001280:	08008e80 	.word	0x08008e80

08001284 <_ZN14rosserial_msgs9TopicInfoC1Ev>:
      enum { ID_PARAMETER_REQUEST = 6 };
      enum { ID_LOG = 7 };
      enum { ID_TIME = 10 };
      enum { ID_TX_STOP = 11 };

    TopicInfo():
 8001284:	b580      	push	{r7, lr}
 8001286:	b082      	sub	sp, #8
 8001288:	af00      	add	r7, sp, #0
 800128a:	6078      	str	r0, [r7, #4]
      topic_id(0),
      topic_name(""),
      message_type(""),
      md5sum(""),
      buffer_size(0)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	4618      	mov	r0, r3
 8001290:	f7ff fef8 	bl	8001084 <_ZN3ros3MsgC1Ev>
 8001294:	4a0b      	ldr	r2, [pc, #44]	; (80012c4 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x40>)
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	2200      	movs	r2, #0
 800129e:	809a      	strh	r2, [r3, #4]
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	4a09      	ldr	r2, [pc, #36]	; (80012c8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80012a4:	609a      	str	r2, [r3, #8]
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	4a07      	ldr	r2, [pc, #28]	; (80012c8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80012aa:	60da      	str	r2, [r3, #12]
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a06      	ldr	r2, [pc, #24]	; (80012c8 <_ZN14rosserial_msgs9TopicInfoC1Ev+0x44>)
 80012b0:	611a      	str	r2, [r3, #16]
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	615a      	str	r2, [r3, #20]
    {
    }
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	4618      	mov	r0, r3
 80012bc:	3708      	adds	r7, #8
 80012be:	46bd      	mov	sp, r7
 80012c0:	bd80      	pop	{r7, pc}
 80012c2:	bf00      	nop
 80012c4:	08009144 	.word	0x08009144
 80012c8:	08008ea4 	.word	0x08008ea4

080012cc <_ZNK14rosserial_msgs9TopicInfo9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80012cc:	b580      	push	{r7, lr}
 80012ce:	b088      	sub	sp, #32
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	6078      	str	r0, [r7, #4]
 80012d4:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80012d6:	2300      	movs	r3, #0
 80012d8:	61fb      	str	r3, [r7, #28]
      *(outbuffer + offset + 0) = (this->topic_id >> (8 * 0)) & 0xFF;
 80012da:	687b      	ldr	r3, [r7, #4]
 80012dc:	8899      	ldrh	r1, [r3, #4]
 80012de:	69fb      	ldr	r3, [r7, #28]
 80012e0:	683a      	ldr	r2, [r7, #0]
 80012e2:	4413      	add	r3, r2
 80012e4:	b2ca      	uxtb	r2, r1
 80012e6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->topic_id >> (8 * 1)) & 0xFF;
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	889b      	ldrh	r3, [r3, #4]
 80012ec:	0a1b      	lsrs	r3, r3, #8
 80012ee:	b299      	uxth	r1, r3
 80012f0:	69fb      	ldr	r3, [r7, #28]
 80012f2:	3301      	adds	r3, #1
 80012f4:	683a      	ldr	r2, [r7, #0]
 80012f6:	4413      	add	r3, r2
 80012f8:	b2ca      	uxtb	r2, r1
 80012fa:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->topic_id);
 80012fc:	69fb      	ldr	r3, [r7, #28]
 80012fe:	3302      	adds	r3, #2
 8001300:	61fb      	str	r3, [r7, #28]
      uint32_t length_topic_name = strlen(this->topic_name);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	689b      	ldr	r3, [r3, #8]
 8001306:	4618      	mov	r0, r3
 8001308:	f7fe ff70 	bl	80001ec <strlen>
 800130c:	61b8      	str	r0, [r7, #24]
      varToArr(outbuffer + offset, length_topic_name);
 800130e:	69fb      	ldr	r3, [r7, #28]
 8001310:	683a      	ldr	r2, [r7, #0]
 8001312:	4413      	add	r3, r2
 8001314:	69b9      	ldr	r1, [r7, #24]
 8001316:	4618      	mov	r0, r3
 8001318:	f003 f928 	bl	800456c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800131c:	69fb      	ldr	r3, [r7, #28]
 800131e:	3304      	adds	r3, #4
 8001320:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->topic_name, length_topic_name);
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	683a      	ldr	r2, [r7, #0]
 8001326:	18d0      	adds	r0, r2, r3
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4619      	mov	r1, r3
 8001330:	f007 fc3a 	bl	8008ba8 <memcpy>
      offset += length_topic_name;
 8001334:	69fa      	ldr	r2, [r7, #28]
 8001336:	69bb      	ldr	r3, [r7, #24]
 8001338:	4413      	add	r3, r2
 800133a:	61fb      	str	r3, [r7, #28]
      uint32_t length_message_type = strlen(this->message_type);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	68db      	ldr	r3, [r3, #12]
 8001340:	4618      	mov	r0, r3
 8001342:	f7fe ff53 	bl	80001ec <strlen>
 8001346:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_message_type);
 8001348:	69fb      	ldr	r3, [r7, #28]
 800134a:	683a      	ldr	r2, [r7, #0]
 800134c:	4413      	add	r3, r2
 800134e:	6979      	ldr	r1, [r7, #20]
 8001350:	4618      	mov	r0, r3
 8001352:	f003 f90b 	bl	800456c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001356:	69fb      	ldr	r3, [r7, #28]
 8001358:	3304      	adds	r3, #4
 800135a:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->message_type, length_message_type);
 800135c:	69fb      	ldr	r3, [r7, #28]
 800135e:	683a      	ldr	r2, [r7, #0]
 8001360:	18d0      	adds	r0, r2, r3
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	68db      	ldr	r3, [r3, #12]
 8001366:	697a      	ldr	r2, [r7, #20]
 8001368:	4619      	mov	r1, r3
 800136a:	f007 fc1d 	bl	8008ba8 <memcpy>
      offset += length_message_type;
 800136e:	69fa      	ldr	r2, [r7, #28]
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	4413      	add	r3, r2
 8001374:	61fb      	str	r3, [r7, #28]
      uint32_t length_md5sum = strlen(this->md5sum);
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	4618      	mov	r0, r3
 800137c:	f7fe ff36 	bl	80001ec <strlen>
 8001380:	6138      	str	r0, [r7, #16]
      varToArr(outbuffer + offset, length_md5sum);
 8001382:	69fb      	ldr	r3, [r7, #28]
 8001384:	683a      	ldr	r2, [r7, #0]
 8001386:	4413      	add	r3, r2
 8001388:	6939      	ldr	r1, [r7, #16]
 800138a:	4618      	mov	r0, r3
 800138c:	f003 f8ee 	bl	800456c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 8001390:	69fb      	ldr	r3, [r7, #28]
 8001392:	3304      	adds	r3, #4
 8001394:	61fb      	str	r3, [r7, #28]
      memcpy(outbuffer + offset, this->md5sum, length_md5sum);
 8001396:	69fb      	ldr	r3, [r7, #28]
 8001398:	683a      	ldr	r2, [r7, #0]
 800139a:	18d0      	adds	r0, r2, r3
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	691b      	ldr	r3, [r3, #16]
 80013a0:	693a      	ldr	r2, [r7, #16]
 80013a2:	4619      	mov	r1, r3
 80013a4:	f007 fc00 	bl	8008ba8 <memcpy>
      offset += length_md5sum;
 80013a8:	69fa      	ldr	r2, [r7, #28]
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	4413      	add	r3, r2
 80013ae:	61fb      	str	r3, [r7, #28]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.real = this->buffer_size;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	695b      	ldr	r3, [r3, #20]
 80013b4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_buffer_size.base >> (8 * 0)) & 0xFF;
 80013b6:	68f9      	ldr	r1, [r7, #12]
 80013b8:	69fb      	ldr	r3, [r7, #28]
 80013ba:	683a      	ldr	r2, [r7, #0]
 80013bc:	4413      	add	r3, r2
 80013be:	b2ca      	uxtb	r2, r1
 80013c0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_buffer_size.base >> (8 * 1)) & 0xFF;
 80013c2:	68fb      	ldr	r3, [r7, #12]
 80013c4:	0a19      	lsrs	r1, r3, #8
 80013c6:	69fb      	ldr	r3, [r7, #28]
 80013c8:	3301      	adds	r3, #1
 80013ca:	683a      	ldr	r2, [r7, #0]
 80013cc:	4413      	add	r3, r2
 80013ce:	b2ca      	uxtb	r2, r1
 80013d0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_buffer_size.base >> (8 * 2)) & 0xFF;
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	0c19      	lsrs	r1, r3, #16
 80013d6:	69fb      	ldr	r3, [r7, #28]
 80013d8:	3302      	adds	r3, #2
 80013da:	683a      	ldr	r2, [r7, #0]
 80013dc:	4413      	add	r3, r2
 80013de:	b2ca      	uxtb	r2, r1
 80013e0:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_buffer_size.base >> (8 * 3)) & 0xFF;
 80013e2:	68fb      	ldr	r3, [r7, #12]
 80013e4:	0e19      	lsrs	r1, r3, #24
 80013e6:	69fb      	ldr	r3, [r7, #28]
 80013e8:	3303      	adds	r3, #3
 80013ea:	683a      	ldr	r2, [r7, #0]
 80013ec:	4413      	add	r3, r2
 80013ee:	b2ca      	uxtb	r2, r1
 80013f0:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->buffer_size);
 80013f2:	69fb      	ldr	r3, [r7, #28]
 80013f4:	3304      	adds	r3, #4
 80013f6:	61fb      	str	r3, [r7, #28]
      return offset;
 80013f8:	69fb      	ldr	r3, [r7, #28]
    }
 80013fa:	4618      	mov	r0, r3
 80013fc:	3720      	adds	r7, #32
 80013fe:	46bd      	mov	sp, r7
 8001400:	bd80      	pop	{r7, pc}

08001402 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8001402:	b580      	push	{r7, lr}
 8001404:	b08a      	sub	sp, #40	; 0x28
 8001406:	af00      	add	r7, sp, #0
 8001408:	6078      	str	r0, [r7, #4]
 800140a:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800140c:	2300      	movs	r3, #0
 800140e:	61bb      	str	r3, [r7, #24]
      this->topic_id =  ((uint16_t) (*(inbuffer + offset)));
 8001410:	69bb      	ldr	r3, [r7, #24]
 8001412:	683a      	ldr	r2, [r7, #0]
 8001414:	4413      	add	r3, r2
 8001416:	781b      	ldrb	r3, [r3, #0]
 8001418:	b29a      	uxth	r2, r3
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	809a      	strh	r2, [r3, #4]
      this->topic_id |= ((uint16_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	889b      	ldrh	r3, [r3, #4]
 8001422:	b21a      	sxth	r2, r3
 8001424:	69bb      	ldr	r3, [r7, #24]
 8001426:	3301      	adds	r3, #1
 8001428:	6839      	ldr	r1, [r7, #0]
 800142a:	440b      	add	r3, r1
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	021b      	lsls	r3, r3, #8
 8001430:	b21b      	sxth	r3, r3
 8001432:	4313      	orrs	r3, r2
 8001434:	b21b      	sxth	r3, r3
 8001436:	b29a      	uxth	r2, r3
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	809a      	strh	r2, [r3, #4]
      offset += sizeof(this->topic_id);
 800143c:	69bb      	ldr	r3, [r7, #24]
 800143e:	3302      	adds	r3, #2
 8001440:	61bb      	str	r3, [r7, #24]
      uint32_t length_topic_name;
      arrToVar(length_topic_name, (inbuffer + offset));
 8001442:	69bb      	ldr	r3, [r7, #24]
 8001444:	683a      	ldr	r2, [r7, #0]
 8001446:	441a      	add	r2, r3
 8001448:	f107 0314 	add.w	r3, r7, #20
 800144c:	4611      	mov	r1, r2
 800144e:	4618      	mov	r0, r3
 8001450:	f003 f8aa 	bl	80045a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001454:	69bb      	ldr	r3, [r7, #24]
 8001456:	3304      	adds	r3, #4
 8001458:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800145a:	69bb      	ldr	r3, [r7, #24]
 800145c:	627b      	str	r3, [r7, #36]	; 0x24
 800145e:	69ba      	ldr	r2, [r7, #24]
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	4413      	add	r3, r2
 8001464:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001466:	429a      	cmp	r2, r3
 8001468:	d20c      	bcs.n	8001484 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x82>
          inbuffer[k-1]=inbuffer[k];
 800146a:	683a      	ldr	r2, [r7, #0]
 800146c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146e:	441a      	add	r2, r3
 8001470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001472:	3b01      	subs	r3, #1
 8001474:	6839      	ldr	r1, [r7, #0]
 8001476:	440b      	add	r3, r1
 8001478:	7812      	ldrb	r2, [r2, #0]
 800147a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_topic_name; ++k){
 800147c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800147e:	3301      	adds	r3, #1
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
 8001482:	e7ec      	b.n	800145e <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x5c>
      }
      inbuffer[offset+length_topic_name-1]=0;
 8001484:	69ba      	ldr	r2, [r7, #24]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	4413      	add	r3, r2
 800148a:	3b01      	subs	r3, #1
 800148c:	683a      	ldr	r2, [r7, #0]
 800148e:	4413      	add	r3, r2
 8001490:	2200      	movs	r2, #0
 8001492:	701a      	strb	r2, [r3, #0]
      this->topic_name = (char *)(inbuffer + offset-1);
 8001494:	69bb      	ldr	r3, [r7, #24]
 8001496:	3b01      	subs	r3, #1
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	441a      	add	r2, r3
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	609a      	str	r2, [r3, #8]
      offset += length_topic_name;
 80014a0:	69ba      	ldr	r2, [r7, #24]
 80014a2:	697b      	ldr	r3, [r7, #20]
 80014a4:	4413      	add	r3, r2
 80014a6:	61bb      	str	r3, [r7, #24]
      uint32_t length_message_type;
      arrToVar(length_message_type, (inbuffer + offset));
 80014a8:	69bb      	ldr	r3, [r7, #24]
 80014aa:	683a      	ldr	r2, [r7, #0]
 80014ac:	441a      	add	r2, r3
 80014ae:	f107 0310 	add.w	r3, r7, #16
 80014b2:	4611      	mov	r1, r2
 80014b4:	4618      	mov	r0, r3
 80014b6:	f003 f877 	bl	80045a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80014ba:	69bb      	ldr	r3, [r7, #24]
 80014bc:	3304      	adds	r3, #4
 80014be:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80014c0:	69bb      	ldr	r3, [r7, #24]
 80014c2:	623b      	str	r3, [r7, #32]
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	693b      	ldr	r3, [r7, #16]
 80014c8:	4413      	add	r3, r2
 80014ca:	6a3a      	ldr	r2, [r7, #32]
 80014cc:	429a      	cmp	r2, r3
 80014ce:	d20c      	bcs.n	80014ea <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xe8>
          inbuffer[k-1]=inbuffer[k];
 80014d0:	683a      	ldr	r2, [r7, #0]
 80014d2:	6a3b      	ldr	r3, [r7, #32]
 80014d4:	441a      	add	r2, r3
 80014d6:	6a3b      	ldr	r3, [r7, #32]
 80014d8:	3b01      	subs	r3, #1
 80014da:	6839      	ldr	r1, [r7, #0]
 80014dc:	440b      	add	r3, r1
 80014de:	7812      	ldrb	r2, [r2, #0]
 80014e0:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_message_type; ++k){
 80014e2:	6a3b      	ldr	r3, [r7, #32]
 80014e4:	3301      	adds	r3, #1
 80014e6:	623b      	str	r3, [r7, #32]
 80014e8:	e7ec      	b.n	80014c4 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0xc2>
      }
      inbuffer[offset+length_message_type-1]=0;
 80014ea:	69ba      	ldr	r2, [r7, #24]
 80014ec:	693b      	ldr	r3, [r7, #16]
 80014ee:	4413      	add	r3, r2
 80014f0:	3b01      	subs	r3, #1
 80014f2:	683a      	ldr	r2, [r7, #0]
 80014f4:	4413      	add	r3, r2
 80014f6:	2200      	movs	r2, #0
 80014f8:	701a      	strb	r2, [r3, #0]
      this->message_type = (char *)(inbuffer + offset-1);
 80014fa:	69bb      	ldr	r3, [r7, #24]
 80014fc:	3b01      	subs	r3, #1
 80014fe:	683a      	ldr	r2, [r7, #0]
 8001500:	441a      	add	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	60da      	str	r2, [r3, #12]
      offset += length_message_type;
 8001506:	69ba      	ldr	r2, [r7, #24]
 8001508:	693b      	ldr	r3, [r7, #16]
 800150a:	4413      	add	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
      uint32_t length_md5sum;
      arrToVar(length_md5sum, (inbuffer + offset));
 800150e:	69bb      	ldr	r3, [r7, #24]
 8001510:	683a      	ldr	r2, [r7, #0]
 8001512:	441a      	add	r2, r3
 8001514:	f107 030c 	add.w	r3, r7, #12
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f003 f844 	bl	80045a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001520:	69bb      	ldr	r3, [r7, #24]
 8001522:	3304      	adds	r3, #4
 8001524:	61bb      	str	r3, [r7, #24]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001526:	69bb      	ldr	r3, [r7, #24]
 8001528:	61fb      	str	r3, [r7, #28]
 800152a:	69ba      	ldr	r2, [r7, #24]
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	4413      	add	r3, r2
 8001530:	69fa      	ldr	r2, [r7, #28]
 8001532:	429a      	cmp	r2, r3
 8001534:	d20c      	bcs.n	8001550 <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x14e>
          inbuffer[k-1]=inbuffer[k];
 8001536:	683a      	ldr	r2, [r7, #0]
 8001538:	69fb      	ldr	r3, [r7, #28]
 800153a:	441a      	add	r2, r3
 800153c:	69fb      	ldr	r3, [r7, #28]
 800153e:	3b01      	subs	r3, #1
 8001540:	6839      	ldr	r1, [r7, #0]
 8001542:	440b      	add	r3, r1
 8001544:	7812      	ldrb	r2, [r2, #0]
 8001546:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_md5sum; ++k){
 8001548:	69fb      	ldr	r3, [r7, #28]
 800154a:	3301      	adds	r3, #1
 800154c:	61fb      	str	r3, [r7, #28]
 800154e:	e7ec      	b.n	800152a <_ZN14rosserial_msgs9TopicInfo11deserializeEPh+0x128>
      }
      inbuffer[offset+length_md5sum-1]=0;
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	68fb      	ldr	r3, [r7, #12]
 8001554:	4413      	add	r3, r2
 8001556:	3b01      	subs	r3, #1
 8001558:	683a      	ldr	r2, [r7, #0]
 800155a:	4413      	add	r3, r2
 800155c:	2200      	movs	r2, #0
 800155e:	701a      	strb	r2, [r3, #0]
      this->md5sum = (char *)(inbuffer + offset-1);
 8001560:	69bb      	ldr	r3, [r7, #24]
 8001562:	3b01      	subs	r3, #1
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	441a      	add	r2, r3
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	611a      	str	r2, [r3, #16]
      offset += length_md5sum;
 800156c:	69ba      	ldr	r2, [r7, #24]
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	4413      	add	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
      union {
        int32_t real;
        uint32_t base;
      } u_buffer_size;
      u_buffer_size.base = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001578:	68bb      	ldr	r3, [r7, #8]
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	6839      	ldr	r1, [r7, #0]
 800157e:	440a      	add	r2, r1
 8001580:	7812      	ldrb	r2, [r2, #0]
 8001582:	4313      	orrs	r3, r2
 8001584:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001586:	68ba      	ldr	r2, [r7, #8]
 8001588:	69bb      	ldr	r3, [r7, #24]
 800158a:	3301      	adds	r3, #1
 800158c:	6839      	ldr	r1, [r7, #0]
 800158e:	440b      	add	r3, r1
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	021b      	lsls	r3, r3, #8
 8001594:	4313      	orrs	r3, r2
 8001596:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001598:	68ba      	ldr	r2, [r7, #8]
 800159a:	69bb      	ldr	r3, [r7, #24]
 800159c:	3302      	adds	r3, #2
 800159e:	6839      	ldr	r1, [r7, #0]
 80015a0:	440b      	add	r3, r1
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	041b      	lsls	r3, r3, #16
 80015a6:	4313      	orrs	r3, r2
 80015a8:	60bb      	str	r3, [r7, #8]
      u_buffer_size.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80015aa:	68ba      	ldr	r2, [r7, #8]
 80015ac:	69bb      	ldr	r3, [r7, #24]
 80015ae:	3303      	adds	r3, #3
 80015b0:	6839      	ldr	r1, [r7, #0]
 80015b2:	440b      	add	r3, r1
 80015b4:	781b      	ldrb	r3, [r3, #0]
 80015b6:	061b      	lsls	r3, r3, #24
 80015b8:	4313      	orrs	r3, r2
 80015ba:	60bb      	str	r3, [r7, #8]
      this->buffer_size = u_buffer_size.real;
 80015bc:	68ba      	ldr	r2, [r7, #8]
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->buffer_size);
 80015c2:	69bb      	ldr	r3, [r7, #24]
 80015c4:	3304      	adds	r3, #4
 80015c6:	61bb      	str	r3, [r7, #24]
     return offset;
 80015c8:	69bb      	ldr	r3, [r7, #24]
    }
 80015ca:	4618      	mov	r0, r3
 80015cc:	3728      	adds	r7, #40	; 0x28
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
	...

080015d4 <_ZN14rosserial_msgs9TopicInfo7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/TopicInfo"; };
 80015d4:	b480      	push	{r7}
 80015d6:	b083      	sub	sp, #12
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
 80015dc:	4b03      	ldr	r3, [pc, #12]	; (80015ec <_ZN14rosserial_msgs9TopicInfo7getTypeEv+0x18>)
 80015de:	4618      	mov	r0, r3
 80015e0:	370c      	adds	r7, #12
 80015e2:	46bd      	mov	sp, r7
 80015e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e8:	4770      	bx	lr
 80015ea:	bf00      	nop
 80015ec:	08008ea8 	.word	0x08008ea8

080015f0 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev>:
    virtual const char * getMD5() override { return "0ad51f88fc44892f8c10684077646005"; };
 80015f0:	b480      	push	{r7}
 80015f2:	b083      	sub	sp, #12
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]
 80015f8:	4b03      	ldr	r3, [pc, #12]	; (8001608 <_ZN14rosserial_msgs9TopicInfo6getMD5Ev+0x18>)
 80015fa:	4618      	mov	r0, r3
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	08008ec4 	.word	0x08008ec4

0800160c <_ZN14rosserial_msgs3LogC1Ev>:
      enum { INFO = 1 };
      enum { WARN = 2 };
      enum { ERROR = 3 };
      enum { FATAL = 4 };

    Log():
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
      level(0),
      msg("")
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff fd34 	bl	8001084 <_ZN3ros3MsgC1Ev>
 800161c:	4a06      	ldr	r2, [pc, #24]	; (8001638 <_ZN14rosserial_msgs3LogC1Ev+0x2c>)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	2200      	movs	r2, #0
 8001626:	711a      	strb	r2, [r3, #4]
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	4a04      	ldr	r2, [pc, #16]	; (800163c <_ZN14rosserial_msgs3LogC1Ev+0x30>)
 800162c:	609a      	str	r2, [r3, #8]
    {
    }
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	4618      	mov	r0, r3
 8001632:	3708      	adds	r7, #8
 8001634:	46bd      	mov	sp, r7
 8001636:	bd80      	pop	{r7, pc}
 8001638:	0800912c 	.word	0x0800912c
 800163c:	08008ea4 	.word	0x08008ea4

08001640 <_ZNK14rosserial_msgs3Log9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8001640:	b580      	push	{r7, lr}
 8001642:	b084      	sub	sp, #16
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800164a:	2300      	movs	r3, #0
 800164c:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->level >> (8 * 0)) & 0xFF;
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	683a      	ldr	r2, [r7, #0]
 8001652:	4413      	add	r3, r2
 8001654:	687a      	ldr	r2, [r7, #4]
 8001656:	7912      	ldrb	r2, [r2, #4]
 8001658:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->level);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	3301      	adds	r3, #1
 800165e:	60fb      	str	r3, [r7, #12]
      uint32_t length_msg = strlen(this->msg);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	4618      	mov	r0, r3
 8001666:	f7fe fdc1 	bl	80001ec <strlen>
 800166a:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_msg);
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	683a      	ldr	r2, [r7, #0]
 8001670:	4413      	add	r3, r2
 8001672:	68b9      	ldr	r1, [r7, #8]
 8001674:	4618      	mov	r0, r3
 8001676:	f002 ff79 	bl	800456c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	3304      	adds	r3, #4
 800167e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->msg, length_msg);
 8001680:	68fb      	ldr	r3, [r7, #12]
 8001682:	683a      	ldr	r2, [r7, #0]
 8001684:	18d0      	adds	r0, r2, r3
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	689b      	ldr	r3, [r3, #8]
 800168a:	68ba      	ldr	r2, [r7, #8]
 800168c:	4619      	mov	r1, r3
 800168e:	f007 fa8b 	bl	8008ba8 <memcpy>
      offset += length_msg;
 8001692:	68fa      	ldr	r2, [r7, #12]
 8001694:	68bb      	ldr	r3, [r7, #8]
 8001696:	4413      	add	r3, r2
 8001698:	60fb      	str	r3, [r7, #12]
      return offset;
 800169a:	68fb      	ldr	r3, [r7, #12]
    }
 800169c:	4618      	mov	r0, r3
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}

080016a4 <_ZN14rosserial_msgs3Log11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b086      	sub	sp, #24
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
 80016ac:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	613b      	str	r3, [r7, #16]
      this->level =  ((uint8_t) (*(inbuffer + offset)));
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	683a      	ldr	r2, [r7, #0]
 80016b6:	4413      	add	r3, r2
 80016b8:	781a      	ldrb	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	711a      	strb	r2, [r3, #4]
      offset += sizeof(this->level);
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	3301      	adds	r3, #1
 80016c2:	613b      	str	r3, [r7, #16]
      uint32_t length_msg;
      arrToVar(length_msg, (inbuffer + offset));
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	441a      	add	r2, r3
 80016ca:	f107 030c 	add.w	r3, r7, #12
 80016ce:	4611      	mov	r1, r2
 80016d0:	4618      	mov	r0, r3
 80016d2:	f002 ff69 	bl	80045a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 80016d6:	693b      	ldr	r3, [r7, #16]
 80016d8:	3304      	adds	r3, #4
 80016da:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80016dc:	693b      	ldr	r3, [r7, #16]
 80016de:	617b      	str	r3, [r7, #20]
 80016e0:	693a      	ldr	r2, [r7, #16]
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	4413      	add	r3, r2
 80016e6:	697a      	ldr	r2, [r7, #20]
 80016e8:	429a      	cmp	r2, r3
 80016ea:	d20c      	bcs.n	8001706 <_ZN14rosserial_msgs3Log11deserializeEPh+0x62>
          inbuffer[k-1]=inbuffer[k];
 80016ec:	683a      	ldr	r2, [r7, #0]
 80016ee:	697b      	ldr	r3, [r7, #20]
 80016f0:	441a      	add	r2, r3
 80016f2:	697b      	ldr	r3, [r7, #20]
 80016f4:	3b01      	subs	r3, #1
 80016f6:	6839      	ldr	r1, [r7, #0]
 80016f8:	440b      	add	r3, r1
 80016fa:	7812      	ldrb	r2, [r2, #0]
 80016fc:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_msg; ++k){
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	3301      	adds	r3, #1
 8001702:	617b      	str	r3, [r7, #20]
 8001704:	e7ec      	b.n	80016e0 <_ZN14rosserial_msgs3Log11deserializeEPh+0x3c>
      }
      inbuffer[offset+length_msg-1]=0;
 8001706:	693a      	ldr	r2, [r7, #16]
 8001708:	68fb      	ldr	r3, [r7, #12]
 800170a:	4413      	add	r3, r2
 800170c:	3b01      	subs	r3, #1
 800170e:	683a      	ldr	r2, [r7, #0]
 8001710:	4413      	add	r3, r2
 8001712:	2200      	movs	r2, #0
 8001714:	701a      	strb	r2, [r3, #0]
      this->msg = (char *)(inbuffer + offset-1);
 8001716:	693b      	ldr	r3, [r7, #16]
 8001718:	3b01      	subs	r3, #1
 800171a:	683a      	ldr	r2, [r7, #0]
 800171c:	441a      	add	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	609a      	str	r2, [r3, #8]
      offset += length_msg;
 8001722:	693a      	ldr	r2, [r7, #16]
 8001724:	68fb      	ldr	r3, [r7, #12]
 8001726:	4413      	add	r3, r2
 8001728:	613b      	str	r3, [r7, #16]
     return offset;
 800172a:	693b      	ldr	r3, [r7, #16]
    }
 800172c:	4618      	mov	r0, r3
 800172e:	3718      	adds	r7, #24
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}

08001734 <_ZN14rosserial_msgs3Log7getTypeEv>:

    virtual const char * getType() override { return "rosserial_msgs/Log"; };
 8001734:	b480      	push	{r7}
 8001736:	b083      	sub	sp, #12
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	4b03      	ldr	r3, [pc, #12]	; (800174c <_ZN14rosserial_msgs3Log7getTypeEv+0x18>)
 800173e:	4618      	mov	r0, r3
 8001740:	370c      	adds	r7, #12
 8001742:	46bd      	mov	sp, r7
 8001744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001748:	4770      	bx	lr
 800174a:	bf00      	nop
 800174c:	08008ee8 	.word	0x08008ee8

08001750 <_ZN14rosserial_msgs3Log6getMD5Ev>:
    virtual const char * getMD5() override { return "11abd731c25933261cd6183bd12d6295"; };
 8001750:	b480      	push	{r7}
 8001752:	b083      	sub	sp, #12
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
 8001758:	4b03      	ldr	r3, [pc, #12]	; (8001768 <_ZN14rosserial_msgs3Log6getMD5Ev+0x18>)
 800175a:	4618      	mov	r0, r3
 800175c:	370c      	adds	r7, #12
 800175e:	46bd      	mov	sp, r7
 8001760:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001764:	4770      	bx	lr
 8001766:	bf00      	nop
 8001768:	08008efc 	.word	0x08008efc

0800176c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>:
      uint32_t strings_length;
      typedef char* _strings_type;
      _strings_type st_strings;
      _strings_type * strings;

    RequestParamResponse():
 800176c:	b580      	push	{r7, lr}
 800176e:	b082      	sub	sp, #8
 8001770:	af00      	add	r7, sp, #0
 8001772:	6078      	str	r0, [r7, #4]
      ints_length(0), st_ints(), ints(nullptr),
      floats_length(0), st_floats(), floats(nullptr),
      strings_length(0), st_strings(), strings(nullptr)
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	4618      	mov	r0, r3
 8001778:	f7ff fc84 	bl	8001084 <_ZN3ros3MsgC1Ev>
 800177c:	4a11      	ldr	r2, [pc, #68]	; (80017c4 <_ZN14rosserial_msgs20RequestParamResponseC1Ev+0x58>)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	601a      	str	r2, [r3, #0]
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	2200      	movs	r2, #0
 8001786:	605a      	str	r2, [r3, #4]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	2200      	movs	r2, #0
 8001792:	60da      	str	r2, [r3, #12]
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	2200      	movs	r2, #0
 8001798:	611a      	str	r2, [r3, #16]
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	f04f 0200 	mov.w	r2, #0
 80017a0:	615a      	str	r2, [r3, #20]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	2200      	movs	r2, #0
 80017a6:	619a      	str	r2, [r3, #24]
 80017a8:	687b      	ldr	r3, [r7, #4]
 80017aa:	2200      	movs	r2, #0
 80017ac:	61da      	str	r2, [r3, #28]
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	2200      	movs	r2, #0
 80017b2:	621a      	str	r2, [r3, #32]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	625a      	str	r2, [r3, #36]	; 0x24
    {
    }
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	4618      	mov	r0, r3
 80017be:	3708      	adds	r7, #8
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	08009114 	.word	0x08009114

080017c8 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b08a      	sub	sp, #40	; 0x28
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
 80017d0:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80017d2:	2300      	movs	r3, #0
 80017d4:	627b      	str	r3, [r7, #36]	; 0x24
      *(outbuffer + offset + 0) = (this->ints_length >> (8 * 0)) & 0xFF;
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6859      	ldr	r1, [r3, #4]
 80017da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017dc:	683a      	ldr	r2, [r7, #0]
 80017de:	4413      	add	r3, r2
 80017e0:	b2ca      	uxtb	r2, r1
 80017e2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->ints_length >> (8 * 1)) & 0xFF;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	0a19      	lsrs	r1, r3, #8
 80017ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017ec:	3301      	adds	r3, #1
 80017ee:	683a      	ldr	r2, [r7, #0]
 80017f0:	4413      	add	r3, r2
 80017f2:	b2ca      	uxtb	r2, r1
 80017f4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->ints_length >> (8 * 2)) & 0xFF;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	685b      	ldr	r3, [r3, #4]
 80017fa:	0c19      	lsrs	r1, r3, #16
 80017fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80017fe:	3302      	adds	r3, #2
 8001800:	683a      	ldr	r2, [r7, #0]
 8001802:	4413      	add	r3, r2
 8001804:	b2ca      	uxtb	r2, r1
 8001806:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->ints_length >> (8 * 3)) & 0xFF;
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	685b      	ldr	r3, [r3, #4]
 800180c:	0e19      	lsrs	r1, r3, #24
 800180e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001810:	3303      	adds	r3, #3
 8001812:	683a      	ldr	r2, [r7, #0]
 8001814:	4413      	add	r3, r2
 8001816:	b2ca      	uxtb	r2, r1
 8001818:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints_length);
 800181a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800181c:	3304      	adds	r3, #4
 800181e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 8001820:	2300      	movs	r3, #0
 8001822:	623b      	str	r3, [r7, #32]
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	685b      	ldr	r3, [r3, #4]
 8001828:	6a3a      	ldr	r2, [r7, #32]
 800182a:	429a      	cmp	r2, r3
 800182c:	d22b      	bcs.n	8001886 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0xbe>
      union {
        int32_t real;
        uint32_t base;
      } u_intsi;
      u_intsi.real = this->ints[i];
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	68da      	ldr	r2, [r3, #12]
 8001832:	6a3b      	ldr	r3, [r7, #32]
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	4413      	add	r3, r2
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	613b      	str	r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_intsi.base >> (8 * 0)) & 0xFF;
 800183c:	6939      	ldr	r1, [r7, #16]
 800183e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001840:	683a      	ldr	r2, [r7, #0]
 8001842:	4413      	add	r3, r2
 8001844:	b2ca      	uxtb	r2, r1
 8001846:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_intsi.base >> (8 * 1)) & 0xFF;
 8001848:	693b      	ldr	r3, [r7, #16]
 800184a:	0a19      	lsrs	r1, r3, #8
 800184c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800184e:	3301      	adds	r3, #1
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	4413      	add	r3, r2
 8001854:	b2ca      	uxtb	r2, r1
 8001856:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_intsi.base >> (8 * 2)) & 0xFF;
 8001858:	693b      	ldr	r3, [r7, #16]
 800185a:	0c19      	lsrs	r1, r3, #16
 800185c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800185e:	3302      	adds	r3, #2
 8001860:	683a      	ldr	r2, [r7, #0]
 8001862:	4413      	add	r3, r2
 8001864:	b2ca      	uxtb	r2, r1
 8001866:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_intsi.base >> (8 * 3)) & 0xFF;
 8001868:	693b      	ldr	r3, [r7, #16]
 800186a:	0e19      	lsrs	r1, r3, #24
 800186c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800186e:	3303      	adds	r3, #3
 8001870:	683a      	ldr	r2, [r7, #0]
 8001872:	4413      	add	r3, r2
 8001874:	b2ca      	uxtb	r2, r1
 8001876:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->ints[i]);
 8001878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800187a:	3304      	adds	r3, #4
 800187c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < ints_length; i++){
 800187e:	6a3b      	ldr	r3, [r7, #32]
 8001880:	3301      	adds	r3, #1
 8001882:	623b      	str	r3, [r7, #32]
 8001884:	e7ce      	b.n	8001824 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x5c>
      }
      *(outbuffer + offset + 0) = (this->floats_length >> (8 * 0)) & 0xFF;
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	6919      	ldr	r1, [r3, #16]
 800188a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800188c:	683a      	ldr	r2, [r7, #0]
 800188e:	4413      	add	r3, r2
 8001890:	b2ca      	uxtb	r2, r1
 8001892:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->floats_length >> (8 * 1)) & 0xFF;
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	691b      	ldr	r3, [r3, #16]
 8001898:	0a19      	lsrs	r1, r3, #8
 800189a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800189c:	3301      	adds	r3, #1
 800189e:	683a      	ldr	r2, [r7, #0]
 80018a0:	4413      	add	r3, r2
 80018a2:	b2ca      	uxtb	r2, r1
 80018a4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->floats_length >> (8 * 2)) & 0xFF;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	691b      	ldr	r3, [r3, #16]
 80018aa:	0c19      	lsrs	r1, r3, #16
 80018ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018ae:	3302      	adds	r3, #2
 80018b0:	683a      	ldr	r2, [r7, #0]
 80018b2:	4413      	add	r3, r2
 80018b4:	b2ca      	uxtb	r2, r1
 80018b6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->floats_length >> (8 * 3)) & 0xFF;
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	691b      	ldr	r3, [r3, #16]
 80018bc:	0e19      	lsrs	r1, r3, #24
 80018be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018c0:	3303      	adds	r3, #3
 80018c2:	683a      	ldr	r2, [r7, #0]
 80018c4:	4413      	add	r3, r2
 80018c6:	b2ca      	uxtb	r2, r1
 80018c8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats_length);
 80018ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018cc:	3304      	adds	r3, #4
 80018ce:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 80018d0:	2300      	movs	r3, #0
 80018d2:	61fb      	str	r3, [r7, #28]
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	691b      	ldr	r3, [r3, #16]
 80018d8:	69fa      	ldr	r2, [r7, #28]
 80018da:	429a      	cmp	r2, r3
 80018dc:	d22b      	bcs.n	8001936 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x16e>
      union {
        float real;
        uint32_t base;
      } u_floatsi;
      u_floatsi.real = this->floats[i];
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	699a      	ldr	r2, [r3, #24]
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	009b      	lsls	r3, r3, #2
 80018e6:	4413      	add	r3, r2
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (u_floatsi.base >> (8 * 0)) & 0xFF;
 80018ec:	68f9      	ldr	r1, [r7, #12]
 80018ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f0:	683a      	ldr	r2, [r7, #0]
 80018f2:	4413      	add	r3, r2
 80018f4:	b2ca      	uxtb	r2, r1
 80018f6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (u_floatsi.base >> (8 * 1)) & 0xFF;
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	0a19      	lsrs	r1, r3, #8
 80018fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018fe:	3301      	adds	r3, #1
 8001900:	683a      	ldr	r2, [r7, #0]
 8001902:	4413      	add	r3, r2
 8001904:	b2ca      	uxtb	r2, r1
 8001906:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (u_floatsi.base >> (8 * 2)) & 0xFF;
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	0c19      	lsrs	r1, r3, #16
 800190c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800190e:	3302      	adds	r3, #2
 8001910:	683a      	ldr	r2, [r7, #0]
 8001912:	4413      	add	r3, r2
 8001914:	b2ca      	uxtb	r2, r1
 8001916:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (u_floatsi.base >> (8 * 3)) & 0xFF;
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	0e19      	lsrs	r1, r3, #24
 800191c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800191e:	3303      	adds	r3, #3
 8001920:	683a      	ldr	r2, [r7, #0]
 8001922:	4413      	add	r3, r2
 8001924:	b2ca      	uxtb	r2, r1
 8001926:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->floats[i]);
 8001928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800192a:	3304      	adds	r3, #4
 800192c:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < floats_length; i++){
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3301      	adds	r3, #1
 8001932:	61fb      	str	r3, [r7, #28]
 8001934:	e7ce      	b.n	80018d4 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x10c>
      }
      *(outbuffer + offset + 0) = (this->strings_length >> (8 * 0)) & 0xFF;
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	69d9      	ldr	r1, [r3, #28]
 800193a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800193c:	683a      	ldr	r2, [r7, #0]
 800193e:	4413      	add	r3, r2
 8001940:	b2ca      	uxtb	r2, r1
 8001942:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->strings_length >> (8 * 1)) & 0xFF;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	69db      	ldr	r3, [r3, #28]
 8001948:	0a19      	lsrs	r1, r3, #8
 800194a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800194c:	3301      	adds	r3, #1
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	4413      	add	r3, r2
 8001952:	b2ca      	uxtb	r2, r1
 8001954:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->strings_length >> (8 * 2)) & 0xFF;
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	69db      	ldr	r3, [r3, #28]
 800195a:	0c19      	lsrs	r1, r3, #16
 800195c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800195e:	3302      	adds	r3, #2
 8001960:	683a      	ldr	r2, [r7, #0]
 8001962:	4413      	add	r3, r2
 8001964:	b2ca      	uxtb	r2, r1
 8001966:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->strings_length >> (8 * 3)) & 0xFF;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	69db      	ldr	r3, [r3, #28]
 800196c:	0e19      	lsrs	r1, r3, #24
 800196e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001970:	3303      	adds	r3, #3
 8001972:	683a      	ldr	r2, [r7, #0]
 8001974:	4413      	add	r3, r2
 8001976:	b2ca      	uxtb	r2, r1
 8001978:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->strings_length);
 800197a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800197c:	3304      	adds	r3, #4
 800197e:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 8001980:	2300      	movs	r3, #0
 8001982:	61bb      	str	r3, [r7, #24]
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	69db      	ldr	r3, [r3, #28]
 8001988:	69ba      	ldr	r2, [r7, #24]
 800198a:	429a      	cmp	r2, r3
 800198c:	d228      	bcs.n	80019e0 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x218>
      uint32_t length_stringsi = strlen(this->strings[i]);
 800198e:	687b      	ldr	r3, [r7, #4]
 8001990:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001992:	69bb      	ldr	r3, [r7, #24]
 8001994:	009b      	lsls	r3, r3, #2
 8001996:	4413      	add	r3, r2
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	4618      	mov	r0, r3
 800199c:	f7fe fc26 	bl	80001ec <strlen>
 80019a0:	6178      	str	r0, [r7, #20]
      varToArr(outbuffer + offset, length_stringsi);
 80019a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019a4:	683a      	ldr	r2, [r7, #0]
 80019a6:	4413      	add	r3, r2
 80019a8:	6979      	ldr	r1, [r7, #20]
 80019aa:	4618      	mov	r0, r3
 80019ac:	f002 fdde 	bl	800456c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 80019b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b2:	3304      	adds	r3, #4
 80019b4:	627b      	str	r3, [r7, #36]	; 0x24
      memcpy(outbuffer + offset, this->strings[i], length_stringsi);
 80019b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b8:	683a      	ldr	r2, [r7, #0]
 80019ba:	18d0      	adds	r0, r2, r3
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	009b      	lsls	r3, r3, #2
 80019c4:	4413      	add	r3, r2
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	697a      	ldr	r2, [r7, #20]
 80019ca:	4619      	mov	r1, r3
 80019cc:	f007 f8ec 	bl	8008ba8 <memcpy>
      offset += length_stringsi;
 80019d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	4413      	add	r3, r2
 80019d6:	627b      	str	r3, [r7, #36]	; 0x24
      for( uint32_t i = 0; i < strings_length; i++){
 80019d8:	69bb      	ldr	r3, [r7, #24]
 80019da:	3301      	adds	r3, #1
 80019dc:	61bb      	str	r3, [r7, #24]
 80019de:	e7d1      	b.n	8001984 <_ZNK14rosserial_msgs20RequestParamResponse9serializeEPh+0x1bc>
      }
      return offset;
 80019e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 80019e2:	4618      	mov	r0, r3
 80019e4:	3728      	adds	r7, #40	; 0x28
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}

080019ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 80019ea:	b580      	push	{r7, lr}
 80019ec:	b08e      	sub	sp, #56	; 0x38
 80019ee:	af00      	add	r7, sp, #0
 80019f0:	6078      	str	r0, [r7, #4]
 80019f2:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80019f4:	2300      	movs	r3, #0
 80019f6:	637b      	str	r3, [r7, #52]	; 0x34
      uint32_t ints_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 80019f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80019fa:	683a      	ldr	r2, [r7, #0]
 80019fc:	4413      	add	r3, r2
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a04:	3301      	adds	r3, #1
 8001a06:	683a      	ldr	r2, [r7, #0]
 8001a08:	4413      	add	r3, r2
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	6a3a      	ldr	r2, [r7, #32]
 8001a10:	4313      	orrs	r3, r2
 8001a12:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001a14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a16:	3302      	adds	r3, #2
 8001a18:	683a      	ldr	r2, [r7, #0]
 8001a1a:	4413      	add	r3, r2
 8001a1c:	781b      	ldrb	r3, [r3, #0]
 8001a1e:	041b      	lsls	r3, r3, #16
 8001a20:	6a3a      	ldr	r2, [r7, #32]
 8001a22:	4313      	orrs	r3, r2
 8001a24:	623b      	str	r3, [r7, #32]
      ints_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001a26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a28:	3303      	adds	r3, #3
 8001a2a:	683a      	ldr	r2, [r7, #0]
 8001a2c:	4413      	add	r3, r2
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	061b      	lsls	r3, r3, #24
 8001a32:	6a3a      	ldr	r2, [r7, #32]
 8001a34:	4313      	orrs	r3, r2
 8001a36:	623b      	str	r3, [r7, #32]
      offset += sizeof(this->ints_length);
 8001a38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a3a:	3304      	adds	r3, #4
 8001a3c:	637b      	str	r3, [r7, #52]	; 0x34
      if(ints_lengthT > ints_length)
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	685b      	ldr	r3, [r3, #4]
 8001a42:	6a3a      	ldr	r2, [r7, #32]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d90a      	bls.n	8001a5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x74>
        this->ints = (int32_t*)realloc(this->ints, ints_lengthT * sizeof(int32_t));
 8001a48:	687b      	ldr	r3, [r7, #4]
 8001a4a:	68da      	ldr	r2, [r3, #12]
 8001a4c:	6a3b      	ldr	r3, [r7, #32]
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	4619      	mov	r1, r3
 8001a52:	4610      	mov	r0, r2
 8001a54:	f007 f8be 	bl	8008bd4 <realloc>
 8001a58:	4602      	mov	r2, r0
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	60da      	str	r2, [r3, #12]
      ints_length = ints_lengthT;
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	6a3a      	ldr	r2, [r7, #32]
 8001a62:	605a      	str	r2, [r3, #4]
      for( uint32_t i = 0; i < ints_length; i++){
 8001a64:	2300      	movs	r3, #0
 8001a66:	633b      	str	r3, [r7, #48]	; 0x30
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001a6e:	429a      	cmp	r2, r3
 8001a70:	d236      	bcs.n	8001ae0 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0xf6>
      union {
        int32_t real;
        uint32_t base;
      } u_st_ints;
      u_st_ints.base = 0;
 8001a72:	2300      	movs	r3, #0
 8001a74:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001a76:	697b      	ldr	r3, [r7, #20]
 8001a78:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001a7a:	6839      	ldr	r1, [r7, #0]
 8001a7c:	440a      	add	r2, r1
 8001a7e:	7812      	ldrb	r2, [r2, #0]
 8001a80:	4313      	orrs	r3, r2
 8001a82:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001a84:	697a      	ldr	r2, [r7, #20]
 8001a86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a88:	3301      	adds	r3, #1
 8001a8a:	6839      	ldr	r1, [r7, #0]
 8001a8c:	440b      	add	r3, r1
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	4313      	orrs	r3, r2
 8001a94:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001a96:	697a      	ldr	r2, [r7, #20]
 8001a98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a9a:	3302      	adds	r3, #2
 8001a9c:	6839      	ldr	r1, [r7, #0]
 8001a9e:	440b      	add	r3, r1
 8001aa0:	781b      	ldrb	r3, [r3, #0]
 8001aa2:	041b      	lsls	r3, r3, #16
 8001aa4:	4313      	orrs	r3, r2
 8001aa6:	617b      	str	r3, [r7, #20]
      u_st_ints.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aac:	3303      	adds	r3, #3
 8001aae:	6839      	ldr	r1, [r7, #0]
 8001ab0:	440b      	add	r3, r1
 8001ab2:	781b      	ldrb	r3, [r3, #0]
 8001ab4:	061b      	lsls	r3, r3, #24
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	617b      	str	r3, [r7, #20]
      this->st_ints = u_st_ints.real;
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->st_ints);
 8001ac0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ac2:	3304      	adds	r3, #4
 8001ac4:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->ints[i]), &(this->st_ints), sizeof(int32_t));
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68da      	ldr	r2, [r3, #12]
 8001aca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	4413      	add	r3, r2
 8001ad0:	687a      	ldr	r2, [r7, #4]
 8001ad2:	3208      	adds	r2, #8
 8001ad4:	6812      	ldr	r2, [r2, #0]
 8001ad6:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < ints_length; i++){
 8001ad8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001ada:	3301      	adds	r3, #1
 8001adc:	633b      	str	r3, [r7, #48]	; 0x30
 8001ade:	e7c3      	b.n	8001a68 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x7e>
      }
      uint32_t floats_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001ae0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ae2:	683a      	ldr	r2, [r7, #0]
 8001ae4:	4413      	add	r3, r2
 8001ae6:	781b      	ldrb	r3, [r3, #0]
 8001ae8:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001aea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001aec:	3301      	adds	r3, #1
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	4413      	add	r3, r2
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	021b      	lsls	r3, r3, #8
 8001af6:	69fa      	ldr	r2, [r7, #28]
 8001af8:	4313      	orrs	r3, r2
 8001afa:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001afc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001afe:	3302      	adds	r3, #2
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	4413      	add	r3, r2
 8001b04:	781b      	ldrb	r3, [r3, #0]
 8001b06:	041b      	lsls	r3, r3, #16
 8001b08:	69fa      	ldr	r2, [r7, #28]
 8001b0a:	4313      	orrs	r3, r2
 8001b0c:	61fb      	str	r3, [r7, #28]
      floats_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001b0e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b10:	3303      	adds	r3, #3
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	4413      	add	r3, r2
 8001b16:	781b      	ldrb	r3, [r3, #0]
 8001b18:	061b      	lsls	r3, r3, #24
 8001b1a:	69fa      	ldr	r2, [r7, #28]
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	61fb      	str	r3, [r7, #28]
      offset += sizeof(this->floats_length);
 8001b20:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b22:	3304      	adds	r3, #4
 8001b24:	637b      	str	r3, [r7, #52]	; 0x34
      if(floats_lengthT > floats_length)
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	691b      	ldr	r3, [r3, #16]
 8001b2a:	69fa      	ldr	r2, [r7, #28]
 8001b2c:	429a      	cmp	r2, r3
 8001b2e:	d90a      	bls.n	8001b46 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x15c>
        this->floats = (float*)realloc(this->floats, floats_lengthT * sizeof(float));
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	699a      	ldr	r2, [r3, #24]
 8001b34:	69fb      	ldr	r3, [r7, #28]
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	4619      	mov	r1, r3
 8001b3a:	4610      	mov	r0, r2
 8001b3c:	f007 f84a 	bl	8008bd4 <realloc>
 8001b40:	4602      	mov	r2, r0
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	619a      	str	r2, [r3, #24]
      floats_length = floats_lengthT;
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	69fa      	ldr	r2, [r7, #28]
 8001b4a:	611a      	str	r2, [r3, #16]
      for( uint32_t i = 0; i < floats_length; i++){
 8001b4c:	2300      	movs	r3, #0
 8001b4e:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	691b      	ldr	r3, [r3, #16]
 8001b54:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001b56:	429a      	cmp	r2, r3
 8001b58:	d236      	bcs.n	8001bc8 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x1de>
      union {
        float real;
        uint32_t base;
      } u_st_floats;
      u_st_floats.base = 0;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8001b5e:	693b      	ldr	r3, [r7, #16]
 8001b60:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001b62:	6839      	ldr	r1, [r7, #0]
 8001b64:	440a      	add	r2, r1
 8001b66:	7812      	ldrb	r2, [r2, #0]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8001b6c:	693a      	ldr	r2, [r7, #16]
 8001b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b70:	3301      	adds	r3, #1
 8001b72:	6839      	ldr	r1, [r7, #0]
 8001b74:	440b      	add	r3, r1
 8001b76:	781b      	ldrb	r3, [r3, #0]
 8001b78:	021b      	lsls	r3, r3, #8
 8001b7a:	4313      	orrs	r3, r2
 8001b7c:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b82:	3302      	adds	r3, #2
 8001b84:	6839      	ldr	r1, [r7, #0]
 8001b86:	440b      	add	r3, r1
 8001b88:	781b      	ldrb	r3, [r3, #0]
 8001b8a:	041b      	lsls	r3, r3, #16
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
      u_st_floats.base |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8001b90:	693a      	ldr	r2, [r7, #16]
 8001b92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001b94:	3303      	adds	r3, #3
 8001b96:	6839      	ldr	r1, [r7, #0]
 8001b98:	440b      	add	r3, r1
 8001b9a:	781b      	ldrb	r3, [r3, #0]
 8001b9c:	061b      	lsls	r3, r3, #24
 8001b9e:	4313      	orrs	r3, r2
 8001ba0:	613b      	str	r3, [r7, #16]
      this->st_floats = u_st_floats.real;
 8001ba2:	693a      	ldr	r2, [r7, #16]
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	615a      	str	r2, [r3, #20]
      offset += sizeof(this->st_floats);
 8001ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001baa:	3304      	adds	r3, #4
 8001bac:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->floats[i]), &(this->st_floats), sizeof(float));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	699a      	ldr	r2, [r3, #24]
 8001bb2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	4413      	add	r3, r2
 8001bb8:	687a      	ldr	r2, [r7, #4]
 8001bba:	3214      	adds	r2, #20
 8001bbc:	6812      	ldr	r2, [r2, #0]
 8001bbe:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < floats_length; i++){
 8001bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001bc6:	e7c3      	b.n	8001b50 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x166>
      }
      uint32_t strings_lengthT = ((uint32_t) (*(inbuffer + offset))); 
 8001bc8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bca:	683a      	ldr	r2, [r7, #0]
 8001bcc:	4413      	add	r3, r2
 8001bce:	781b      	ldrb	r3, [r3, #0]
 8001bd0:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1); 
 8001bd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bd4:	3301      	adds	r3, #1
 8001bd6:	683a      	ldr	r2, [r7, #0]
 8001bd8:	4413      	add	r3, r2
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	021b      	lsls	r3, r3, #8
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	4313      	orrs	r3, r2
 8001be2:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2); 
 8001be4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001be6:	3302      	adds	r3, #2
 8001be8:	683a      	ldr	r2, [r7, #0]
 8001bea:	4413      	add	r3, r2
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	041b      	lsls	r3, r3, #16
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
      strings_lengthT |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3); 
 8001bf6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001bf8:	3303      	adds	r3, #3
 8001bfa:	683a      	ldr	r2, [r7, #0]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	061b      	lsls	r3, r3, #24
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
      offset += sizeof(this->strings_length);
 8001c08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c0a:	3304      	adds	r3, #4
 8001c0c:	637b      	str	r3, [r7, #52]	; 0x34
      if(strings_lengthT > strings_length)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	69db      	ldr	r3, [r3, #28]
 8001c12:	69ba      	ldr	r2, [r7, #24]
 8001c14:	429a      	cmp	r2, r3
 8001c16:	d90a      	bls.n	8001c2e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x244>
        this->strings = (char**)realloc(this->strings, strings_lengthT * sizeof(char*));
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001c1c:	69bb      	ldr	r3, [r7, #24]
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	4619      	mov	r1, r3
 8001c22:	4610      	mov	r0, r2
 8001c24:	f006 ffd6 	bl	8008bd4 <realloc>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	625a      	str	r2, [r3, #36]	; 0x24
      strings_length = strings_lengthT;
 8001c2e:	687b      	ldr	r3, [r7, #4]
 8001c30:	69ba      	ldr	r2, [r7, #24]
 8001c32:	61da      	str	r2, [r3, #28]
      for( uint32_t i = 0; i < strings_length; i++){
 8001c34:	2300      	movs	r3, #0
 8001c36:	62bb      	str	r3, [r7, #40]	; 0x28
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	69db      	ldr	r3, [r3, #28]
 8001c3c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001c3e:	429a      	cmp	r2, r3
 8001c40:	d23f      	bcs.n	8001cc2 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x2d8>
      uint32_t length_st_strings;
      arrToVar(length_st_strings, (inbuffer + offset));
 8001c42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c44:	683a      	ldr	r2, [r7, #0]
 8001c46:	441a      	add	r2, r3
 8001c48:	f107 030c 	add.w	r3, r7, #12
 8001c4c:	4611      	mov	r1, r2
 8001c4e:	4618      	mov	r0, r3
 8001c50:	f002 fcaa 	bl	80045a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8001c54:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c56:	3304      	adds	r3, #4
 8001c58:	637b      	str	r3, [r7, #52]	; 0x34
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001c5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c5c:	627b      	str	r3, [r7, #36]	; 0x24
 8001c5e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	4413      	add	r3, r2
 8001c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c66:	429a      	cmp	r2, r3
 8001c68:	d20c      	bcs.n	8001c84 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x29a>
          inbuffer[k-1]=inbuffer[k];
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c6e:	441a      	add	r2, r3
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	3b01      	subs	r3, #1
 8001c74:	6839      	ldr	r1, [r7, #0]
 8001c76:	440b      	add	r3, r1
 8001c78:	7812      	ldrb	r2, [r2, #0]
 8001c7a:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_st_strings; ++k){
 8001c7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c7e:	3301      	adds	r3, #1
 8001c80:	627b      	str	r3, [r7, #36]	; 0x24
 8001c82:	e7ec      	b.n	8001c5e <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x274>
      }
      inbuffer[offset+length_st_strings-1]=0;
 8001c84:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	4413      	add	r3, r2
 8001c8a:	3b01      	subs	r3, #1
 8001c8c:	683a      	ldr	r2, [r7, #0]
 8001c8e:	4413      	add	r3, r2
 8001c90:	2200      	movs	r2, #0
 8001c92:	701a      	strb	r2, [r3, #0]
      this->st_strings = (char *)(inbuffer + offset-1);
 8001c94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001c96:	3b01      	subs	r3, #1
 8001c98:	683a      	ldr	r2, [r7, #0]
 8001c9a:	441a      	add	r2, r3
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	621a      	str	r2, [r3, #32]
      offset += length_st_strings;
 8001ca0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	637b      	str	r3, [r7, #52]	; 0x34
        memcpy( &(this->strings[i]), &(this->st_strings), sizeof(char*));
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	4413      	add	r3, r2
 8001cb2:	687a      	ldr	r2, [r7, #4]
 8001cb4:	3220      	adds	r2, #32
 8001cb6:	6812      	ldr	r2, [r2, #0]
 8001cb8:	601a      	str	r2, [r3, #0]
      for( uint32_t i = 0; i < strings_length; i++){
 8001cba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	62bb      	str	r3, [r7, #40]	; 0x28
 8001cc0:	e7ba      	b.n	8001c38 <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh+0x24e>
      }
     return offset;
 8001cc2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    }
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	3738      	adds	r7, #56	; 0x38
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	bd80      	pop	{r7, pc}

08001ccc <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv>:

    virtual const char * getType() override { return REQUESTPARAM; };
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	4b03      	ldr	r3, [pc, #12]	; (8001ce4 <_ZN14rosserial_msgs20RequestParamResponse7getTypeEv+0x18>)
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce0:	4770      	bx	lr
 8001ce2:	bf00      	nop
 8001ce4:	08009068 	.word	0x08009068

08001ce8 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev>:
    virtual const char * getMD5() override { return "9f0e98bda65981986ddf53afa7a40e49"; };
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
 8001cf0:	4b03      	ldr	r3, [pc, #12]	; (8001d00 <_ZN14rosserial_msgs20RequestParamResponse6getMD5Ev+0x18>)
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	370c      	adds	r7, #12
 8001cf6:	46bd      	mov	sp, r7
 8001cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfc:	4770      	bx	lr
 8001cfe:	bf00      	nop
 8001d00:	08008f20 	.word	0x08008f20

08001d04 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>:

/* Generic Publisher */
class Publisher
{
public:
  Publisher(const char * topic_name, Msg * msg, int endpoint = rosserial_msgs::TopicInfo::ID_PUBLISHER) :
 8001d04:	b480      	push	{r7}
 8001d06:	b085      	sub	sp, #20
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	60f8      	str	r0, [r7, #12]
 8001d0c:	60b9      	str	r1, [r7, #8]
 8001d0e:	607a      	str	r2, [r7, #4]
 8001d10:	603b      	str	r3, [r7, #0]
    topic_(topic_name),
    msg_(msg),
    endpoint_(endpoint) {};
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	68ba      	ldr	r2, [r7, #8]
 8001d16:	601a      	str	r2, [r3, #0]
 8001d18:	68fb      	ldr	r3, [r7, #12]
 8001d1a:	687a      	ldr	r2, [r7, #4]
 8001d1c:	605a      	str	r2, [r3, #4]
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	683a      	ldr	r2, [r7, #0]
 8001d22:	611a      	str	r2, [r3, #16]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	4618      	mov	r0, r3
 8001d28:	3714      	adds	r7, #20
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d30:	4770      	bx	lr

08001d32 <_ZN3ros9Publisher7publishEPKNS_3MsgE>:

  int publish(const Msg * msg)
 8001d32:	b580      	push	{r7, lr}
 8001d34:	b082      	sub	sp, #8
 8001d36:	af00      	add	r7, sp, #0
 8001d38:	6078      	str	r0, [r7, #4]
 8001d3a:	6039      	str	r1, [r7, #0]
  {
    return nh_->publish(id_, msg);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	68d8      	ldr	r0, [r3, #12]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	68db      	ldr	r3, [r3, #12]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	687a      	ldr	r2, [r7, #4]
 8001d4a:	6891      	ldr	r1, [r2, #8]
 8001d4c:	683a      	ldr	r2, [r7, #0]
 8001d4e:	4798      	blx	r3
 8001d50:	4603      	mov	r3, r0
  };
 8001d52:	4618      	mov	r0, r3
 8001d54:	3708      	adds	r7, #8
 8001d56:	46bd      	mov	sp, r7
 8001d58:	bd80      	pop	{r7, pc}

08001d5a <_ZN3ros9Publisher15getEndpointTypeEv>:
  int getEndpointType()
 8001d5a:	b480      	push	{r7}
 8001d5c:	b083      	sub	sp, #12
 8001d5e:	af00      	add	r7, sp, #0
 8001d60:	6078      	str	r0, [r7, #4]
  {
    return endpoint_;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	691b      	ldr	r3, [r3, #16]
  }
 8001d66:	4618      	mov	r0, r3
 8001d68:	370c      	adds	r7, #12
 8001d6a:	46bd      	mov	sp, r7
 8001d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d70:	4770      	bx	lr

08001d72 <_ZN13STM32Hardware10getRdmaIndEv>:
    UART_HandleTypeDef *huart;

    const static uint16_t rbuflen = 512;
    uint8_t rbuf[rbuflen];
    uint32_t rind;
    inline uint32_t getRdmaInd(void){ return (rbuflen - __HAL_DMA_GET_COUNTER(huart->hdmarx)) & (rbuflen - 1); }
 8001d72:	b480      	push	{r7}
 8001d74:	b083      	sub	sp, #12
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	6078      	str	r0, [r7, #4]
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001d80:	681b      	ldr	r3, [r3, #0]
 8001d82:	685b      	ldr	r3, [r3, #4]
 8001d84:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001d88:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d8c:	4618      	mov	r0, r3
 8001d8e:	370c      	adds	r7, #12
 8001d90:	46bd      	mov	sp, r7
 8001d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d96:	4770      	bx	lr

08001d98 <_ZN13STM32HardwareC1Ev>:
    const static uint16_t tbuflen = 512;
    uint8_t tbuf[tbuflen];
    uint32_t twind, tfind;

  public:
    STM32Hardware():
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
      huart(&huart3), rind(0), twind(0), tfind(0){
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	4a0a      	ldr	r2, [pc, #40]	; (8001dcc <_ZN13STM32HardwareC1Ev+0x34>)
 8001da4:	601a      	str	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	2200      	movs	r2, #0
 8001daa:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2200      	movs	r2, #0
 8001db2:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
    }
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	370c      	adds	r7, #12
 8001dc4:	46bd      	mov	sp, r7
 8001dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dca:	4770      	bx	lr
 8001dcc:	20000bfc 	.word	0x20000bfc

08001dd0 <_ZN13STM32Hardware4initEv>:

    STM32Hardware(UART_HandleTypeDef *huart_):
      huart(huart_), rind(0), twind(0), tfind(0){
    }
  
    void init(){
 8001dd0:	b580      	push	{r7, lr}
 8001dd2:	b082      	sub	sp, #8
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
      reset_rbuf();
 8001dd8:	6878      	ldr	r0, [r7, #4]
 8001dda:	f000 f804 	bl	8001de6 <_ZN13STM32Hardware10reset_rbufEv>
    }
 8001dde:	bf00      	nop
 8001de0:	3708      	adds	r7, #8
 8001de2:	46bd      	mov	sp, r7
 8001de4:	bd80      	pop	{r7, pc}

08001de6 <_ZN13STM32Hardware10reset_rbufEv>:

    void reset_rbuf(void){
 8001de6:	b580      	push	{r7, lr}
 8001de8:	b082      	sub	sp, #8
 8001dea:	af00      	add	r7, sp, #0
 8001dec:	6078      	str	r0, [r7, #4]
      HAL_UART_Receive_DMA(huart, rbuf, rbuflen);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3304      	adds	r3, #4
 8001df6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	f006 f81e 	bl	8007e3c <HAL_UART_Receive_DMA>
    }
 8001e00:	bf00      	nop
 8001e02:	3708      	adds	r7, #8
 8001e04:	46bd      	mov	sp, r7
 8001e06:	bd80      	pop	{r7, pc}

08001e08 <_ZN13STM32Hardware4readEv>:

    int read(){
 8001e08:	b590      	push	{r4, r7, lr}
 8001e0a:	b085      	sub	sp, #20
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
      int c = -1;
 8001e10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e14:	60fb      	str	r3, [r7, #12]
      if(rind != getRdmaInd()){
 8001e16:	687b      	ldr	r3, [r7, #4]
 8001e18:	f8d3 4204 	ldr.w	r4, [r3, #516]	; 0x204
 8001e1c:	6878      	ldr	r0, [r7, #4]
 8001e1e:	f7ff ffa8 	bl	8001d72 <_ZN13STM32Hardware10getRdmaIndEv>
 8001e22:	4603      	mov	r3, r0
 8001e24:	429c      	cmp	r4, r3
 8001e26:	bf14      	ite	ne
 8001e28:	2301      	movne	r3, #1
 8001e2a:	2300      	moveq	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d012      	beq.n	8001e58 <_ZN13STM32Hardware4readEv+0x50>
        c = rbuf[rind++];
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e38:	1c59      	adds	r1, r3, #1
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	f8c2 1204 	str.w	r1, [r2, #516]	; 0x204
 8001e40:	687a      	ldr	r2, [r7, #4]
 8001e42:	4413      	add	r3, r2
 8001e44:	791b      	ldrb	r3, [r3, #4]
 8001e46:	60fb      	str	r3, [r7, #12]
        rind &= rbuflen - 1;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001e4e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
      }
      return c;
 8001e58:	68fb      	ldr	r3, [r7, #12]
    }
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	3714      	adds	r7, #20
 8001e5e:	46bd      	mov	sp, r7
 8001e60:	bd90      	pop	{r4, r7, pc}
	...

08001e64 <_ZN13STM32Hardware5flushEv>:

    void flush(void){
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b084      	sub	sp, #16
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	6078      	str	r0, [r7, #4]
      static bool mutex = false;

      if((huart->gState == HAL_UART_STATE_READY) && !mutex){
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001e74:	b2db      	uxtb	r3, r3
 8001e76:	2b20      	cmp	r3, #32
 8001e78:	d108      	bne.n	8001e8c <_ZN13STM32Hardware5flushEv+0x28>
 8001e7a:	4b28      	ldr	r3, [pc, #160]	; (8001f1c <_ZN13STM32Hardware5flushEv+0xb8>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	f083 0301 	eor.w	r3, r3, #1
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	d001      	beq.n	8001e8c <_ZN13STM32Hardware5flushEv+0x28>
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e000      	b.n	8001e8e <_ZN13STM32Hardware5flushEv+0x2a>
 8001e8c:	2300      	movs	r3, #0
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d03f      	beq.n	8001f12 <_ZN13STM32Hardware5flushEv+0xae>
        mutex = true;
 8001e92:	4b22      	ldr	r3, [pc, #136]	; (8001f1c <_ZN13STM32Hardware5flushEv+0xb8>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]

        if(twind != tfind){
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ea4:	429a      	cmp	r2, r3
 8001ea6:	d031      	beq.n	8001f0c <_ZN13STM32Hardware5flushEv+0xa8>
          uint16_t len = tfind < twind ? twind - tfind : tbuflen - tfind;
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d20a      	bcs.n	8001ece <_ZN13STM32Hardware5flushEv+0x6a>
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001ebe:	b29a      	uxth	r2, r3
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ec6:	b29b      	uxth	r3, r3
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	b29b      	uxth	r3, r3
 8001ecc:	e006      	b.n	8001edc <_ZN13STM32Hardware5flushEv+0x78>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ed4:	b29b      	uxth	r3, r3
 8001ed6:	f5c3 7300 	rsb	r3, r3, #512	; 0x200
 8001eda:	b29b      	uxth	r3, r3
 8001edc:	81fb      	strh	r3, [r7, #14]
          HAL_UART_Transmit_DMA(huart, &(tbuf[tfind]), len);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6818      	ldr	r0, [r3, #0]
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
 8001ee8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	4413      	add	r3, r2
 8001ef0:	89fa      	ldrh	r2, [r7, #14]
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f005 ff36 	bl	8007d64 <HAL_UART_Transmit_DMA>
          tfind = (tfind + len) & (tbuflen - 1);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	f8d3 240c 	ldr.w	r2, [r3, #1036]	; 0x40c
 8001efe:	89fb      	ldrh	r3, [r7, #14]
 8001f00:	4413      	add	r3, r2
 8001f02:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	f8c3 240c 	str.w	r2, [r3, #1036]	; 0x40c
        }
        mutex = false;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	; (8001f1c <_ZN13STM32Hardware5flushEv+0xb8>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	701a      	strb	r2, [r3, #0]
      }
    }
 8001f12:	bf00      	nop
 8001f14:	3710      	adds	r7, #16
 8001f16:	46bd      	mov	sp, r7
 8001f18:	bd80      	pop	{r7, pc}
 8001f1a:	bf00      	nop
 8001f1c:	200000a1 	.word	0x200000a1

08001f20 <_ZN13STM32Hardware5writeEPhi>:

    void write(uint8_t* data, int length){
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	60f8      	str	r0, [r7, #12]
 8001f28:	60b9      	str	r1, [r7, #8]
 8001f2a:	607a      	str	r2, [r7, #4]
      int n = length;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	617b      	str	r3, [r7, #20]
      n = n <= tbuflen ? n : tbuflen;
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f36:	bfa8      	it	ge
 8001f38:	f44f 7300 	movge.w	r3, #512	; 0x200
 8001f3c:	617b      	str	r3, [r7, #20]

      int n_tail = n <= tbuflen - twind ? n : tbuflen - twind;
 8001f3e:	68fb      	ldr	r3, [r7, #12]
 8001f40:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f44:	f5c3 7200 	rsb	r2, r3, #512	; 0x200
 8001f48:	697b      	ldr	r3, [r7, #20]
 8001f4a:	4293      	cmp	r3, r2
 8001f4c:	bf28      	it	cs
 8001f4e:	4613      	movcs	r3, r2
 8001f50:	613b      	str	r3, [r7, #16]
      memcpy(&(tbuf[twind]), data, n_tail);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	f8d3 3408 	ldr.w	r3, [r3, #1032]	; 0x408
 8001f58:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8001f5c:	68fa      	ldr	r2, [r7, #12]
 8001f5e:	4413      	add	r3, r2
 8001f60:	693a      	ldr	r2, [r7, #16]
 8001f62:	68b9      	ldr	r1, [r7, #8]
 8001f64:	4618      	mov	r0, r3
 8001f66:	f006 fe1f 	bl	8008ba8 <memcpy>
      twind = (twind + n) & (tbuflen - 1);
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	; 0x408
 8001f70:	697b      	ldr	r3, [r7, #20]
 8001f72:	4413      	add	r3, r2
 8001f74:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f8c3 2408 	str.w	r2, [r3, #1032]	; 0x408

      if(n != n_tail){
 8001f7e:	697a      	ldr	r2, [r7, #20]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	429a      	cmp	r2, r3
 8001f84:	d00b      	beq.n	8001f9e <_ZN13STM32Hardware5writeEPhi+0x7e>
        memcpy(tbuf, &(data[n_tail]), n - n_tail);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	f503 7002 	add.w	r0, r3, #520	; 0x208
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	68ba      	ldr	r2, [r7, #8]
 8001f90:	18d1      	adds	r1, r2, r3
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	461a      	mov	r2, r3
 8001f9a:	f006 fe05 	bl	8008ba8 <memcpy>
      }

      flush();
 8001f9e:	68f8      	ldr	r0, [r7, #12]
 8001fa0:	f7ff ff60 	bl	8001e64 <_ZN13STM32Hardware5flushEv>
    }
 8001fa4:	bf00      	nop
 8001fa6:	3718      	adds	r7, #24
 8001fa8:	46bd      	mov	sp, r7
 8001faa:	bd80      	pop	{r7, pc}

08001fac <_ZN13STM32Hardware4timeEv>:

    unsigned long time(){ return HAL_GetTick();; }
 8001fac:	b580      	push	{r7, lr}
 8001fae:	b082      	sub	sp, #8
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	6078      	str	r0, [r7, #4]
 8001fb4:	f003 fae0 	bl	8005578 <HAL_GetTick>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3708      	adds	r7, #8
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd80      	pop	{r7, pc}
	...

08001fc4 <_ZN8std_msgs6HeaderC1Ev>:
      typedef ros::Time _stamp_type;
      _stamp_type stamp;
      typedef const char* _frame_id_type;
      _frame_id_type frame_id;

    Header():
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b082      	sub	sp, #8
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
      seq(0),
      stamp(),
      frame_id("")
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	4618      	mov	r0, r3
 8001fd0:	f7ff f858 	bl	8001084 <_ZN3ros3MsgC1Ev>
 8001fd4:	4a09      	ldr	r2, [pc, #36]	; (8001ffc <_ZN8std_msgs6HeaderC1Ev+0x38>)
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	601a      	str	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	2200      	movs	r2, #0
 8001fde:	605a      	str	r2, [r3, #4]
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	3308      	adds	r3, #8
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	f7ff f83c 	bl	8001062 <_ZN3ros4TimeC1Ev>
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	4a04      	ldr	r2, [pc, #16]	; (8002000 <_ZN8std_msgs6HeaderC1Ev+0x3c>)
 8001fee:	611a      	str	r2, [r3, #16]
    {
    }
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	4618      	mov	r0, r3
 8001ff4:	3708      	adds	r7, #8
 8001ff6:	46bd      	mov	sp, r7
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	080090e8 	.word	0x080090e8
 8002000:	08008ea4 	.word	0x08008ea4

08002004 <_ZNK8std_msgs6Header9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002004:	b580      	push	{r7, lr}
 8002006:	b084      	sub	sp, #16
 8002008:	af00      	add	r7, sp, #0
 800200a:	6078      	str	r0, [r7, #4]
 800200c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->seq >> (8 * 0)) & 0xFF;
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6859      	ldr	r1, [r3, #4]
 8002016:	68fb      	ldr	r3, [r7, #12]
 8002018:	683a      	ldr	r2, [r7, #0]
 800201a:	4413      	add	r3, r2
 800201c:	b2ca      	uxtb	r2, r1
 800201e:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->seq >> (8 * 1)) & 0xFF;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	0a19      	lsrs	r1, r3, #8
 8002026:	68fb      	ldr	r3, [r7, #12]
 8002028:	3301      	adds	r3, #1
 800202a:	683a      	ldr	r2, [r7, #0]
 800202c:	4413      	add	r3, r2
 800202e:	b2ca      	uxtb	r2, r1
 8002030:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->seq >> (8 * 2)) & 0xFF;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	0c19      	lsrs	r1, r3, #16
 8002038:	68fb      	ldr	r3, [r7, #12]
 800203a:	3302      	adds	r3, #2
 800203c:	683a      	ldr	r2, [r7, #0]
 800203e:	4413      	add	r3, r2
 8002040:	b2ca      	uxtb	r2, r1
 8002042:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->seq >> (8 * 3)) & 0xFF;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	0e19      	lsrs	r1, r3, #24
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	3303      	adds	r3, #3
 800204e:	683a      	ldr	r2, [r7, #0]
 8002050:	4413      	add	r3, r2
 8002052:	b2ca      	uxtb	r2, r1
 8002054:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->seq);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	3304      	adds	r3, #4
 800205a:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.sec >> (8 * 0)) & 0xFF;
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	6899      	ldr	r1, [r3, #8]
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	683a      	ldr	r2, [r7, #0]
 8002064:	4413      	add	r3, r2
 8002066:	b2ca      	uxtb	r2, r1
 8002068:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.sec >> (8 * 1)) & 0xFF;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	0a19      	lsrs	r1, r3, #8
 8002070:	68fb      	ldr	r3, [r7, #12]
 8002072:	3301      	adds	r3, #1
 8002074:	683a      	ldr	r2, [r7, #0]
 8002076:	4413      	add	r3, r2
 8002078:	b2ca      	uxtb	r2, r1
 800207a:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.sec >> (8 * 2)) & 0xFF;
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	0c19      	lsrs	r1, r3, #16
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	3302      	adds	r3, #2
 8002086:	683a      	ldr	r2, [r7, #0]
 8002088:	4413      	add	r3, r2
 800208a:	b2ca      	uxtb	r2, r1
 800208c:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.sec >> (8 * 3)) & 0xFF;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	0e19      	lsrs	r1, r3, #24
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	3303      	adds	r3, #3
 8002098:	683a      	ldr	r2, [r7, #0]
 800209a:	4413      	add	r3, r2
 800209c:	b2ca      	uxtb	r2, r1
 800209e:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.sec);
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	3304      	adds	r3, #4
 80020a4:	60fb      	str	r3, [r7, #12]
      *(outbuffer + offset + 0) = (this->stamp.nsec >> (8 * 0)) & 0xFF;
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	68d9      	ldr	r1, [r3, #12]
 80020aa:	68fb      	ldr	r3, [r7, #12]
 80020ac:	683a      	ldr	r2, [r7, #0]
 80020ae:	4413      	add	r3, r2
 80020b0:	b2ca      	uxtb	r2, r1
 80020b2:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 1) = (this->stamp.nsec >> (8 * 1)) & 0xFF;
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	68db      	ldr	r3, [r3, #12]
 80020b8:	0a19      	lsrs	r1, r3, #8
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	3301      	adds	r3, #1
 80020be:	683a      	ldr	r2, [r7, #0]
 80020c0:	4413      	add	r3, r2
 80020c2:	b2ca      	uxtb	r2, r1
 80020c4:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 2) = (this->stamp.nsec >> (8 * 2)) & 0xFF;
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	0c19      	lsrs	r1, r3, #16
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	3302      	adds	r3, #2
 80020d0:	683a      	ldr	r2, [r7, #0]
 80020d2:	4413      	add	r3, r2
 80020d4:	b2ca      	uxtb	r2, r1
 80020d6:	701a      	strb	r2, [r3, #0]
      *(outbuffer + offset + 3) = (this->stamp.nsec >> (8 * 3)) & 0xFF;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	68db      	ldr	r3, [r3, #12]
 80020dc:	0e19      	lsrs	r1, r3, #24
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	3303      	adds	r3, #3
 80020e2:	683a      	ldr	r2, [r7, #0]
 80020e4:	4413      	add	r3, r2
 80020e6:	b2ca      	uxtb	r2, r1
 80020e8:	701a      	strb	r2, [r3, #0]
      offset += sizeof(this->stamp.nsec);
 80020ea:	68fb      	ldr	r3, [r7, #12]
 80020ec:	3304      	adds	r3, #4
 80020ee:	60fb      	str	r3, [r7, #12]
      uint32_t length_frame_id = strlen(this->frame_id);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	691b      	ldr	r3, [r3, #16]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe f879 	bl	80001ec <strlen>
 80020fa:	60b8      	str	r0, [r7, #8]
      varToArr(outbuffer + offset, length_frame_id);
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	683a      	ldr	r2, [r7, #0]
 8002100:	4413      	add	r3, r2
 8002102:	68b9      	ldr	r1, [r7, #8]
 8002104:	4618      	mov	r0, r3
 8002106:	f002 fa31 	bl	800456c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>
      offset += 4;
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3304      	adds	r3, #4
 800210e:	60fb      	str	r3, [r7, #12]
      memcpy(outbuffer + offset, this->frame_id, length_frame_id);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	683a      	ldr	r2, [r7, #0]
 8002114:	18d0      	adds	r0, r2, r3
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	691b      	ldr	r3, [r3, #16]
 800211a:	68ba      	ldr	r2, [r7, #8]
 800211c:	4619      	mov	r1, r3
 800211e:	f006 fd43 	bl	8008ba8 <memcpy>
      offset += length_frame_id;
 8002122:	68fa      	ldr	r2, [r7, #12]
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	4413      	add	r3, r2
 8002128:	60fb      	str	r3, [r7, #12]
      return offset;
 800212a:	68fb      	ldr	r3, [r7, #12]
    }
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <_ZN8std_msgs6Header11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8002134:	b580      	push	{r7, lr}
 8002136:	b086      	sub	sp, #24
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 800213e:	2300      	movs	r3, #0
 8002140:	613b      	str	r3, [r7, #16]
      this->seq =  ((uint32_t) (*(inbuffer + offset)));
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	4413      	add	r3, r2
 8002148:	781b      	ldrb	r3, [r3, #0]
 800214a:	461a      	mov	r2, r3
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	685a      	ldr	r2, [r3, #4]
 8002154:	693b      	ldr	r3, [r7, #16]
 8002156:	3301      	adds	r3, #1
 8002158:	6839      	ldr	r1, [r7, #0]
 800215a:	440b      	add	r3, r1
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	021b      	lsls	r3, r3, #8
 8002160:	431a      	orrs	r2, r3
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	685a      	ldr	r2, [r3, #4]
 800216a:	693b      	ldr	r3, [r7, #16]
 800216c:	3302      	adds	r3, #2
 800216e:	6839      	ldr	r1, [r7, #0]
 8002170:	440b      	add	r3, r1
 8002172:	781b      	ldrb	r3, [r3, #0]
 8002174:	041b      	lsls	r3, r3, #16
 8002176:	431a      	orrs	r2, r3
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	605a      	str	r2, [r3, #4]
      this->seq |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	685a      	ldr	r2, [r3, #4]
 8002180:	693b      	ldr	r3, [r7, #16]
 8002182:	3303      	adds	r3, #3
 8002184:	6839      	ldr	r1, [r7, #0]
 8002186:	440b      	add	r3, r1
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	061b      	lsls	r3, r3, #24
 800218c:	431a      	orrs	r2, r3
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	605a      	str	r2, [r3, #4]
      offset += sizeof(this->seq);
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	3304      	adds	r3, #4
 8002196:	613b      	str	r3, [r7, #16]
      this->stamp.sec =  ((uint32_t) (*(inbuffer + offset)));
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	683a      	ldr	r2, [r7, #0]
 800219c:	4413      	add	r3, r2
 800219e:	781b      	ldrb	r3, [r3, #0]
 80021a0:	461a      	mov	r2, r3
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	689a      	ldr	r2, [r3, #8]
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	3301      	adds	r3, #1
 80021ae:	6839      	ldr	r1, [r7, #0]
 80021b0:	440b      	add	r3, r1
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	431a      	orrs	r2, r3
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	689a      	ldr	r2, [r3, #8]
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	3302      	adds	r3, #2
 80021c4:	6839      	ldr	r1, [r7, #0]
 80021c6:	440b      	add	r3, r1
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	041b      	lsls	r3, r3, #16
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	609a      	str	r2, [r3, #8]
      this->stamp.sec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	689a      	ldr	r2, [r3, #8]
 80021d6:	693b      	ldr	r3, [r7, #16]
 80021d8:	3303      	adds	r3, #3
 80021da:	6839      	ldr	r1, [r7, #0]
 80021dc:	440b      	add	r3, r1
 80021de:	781b      	ldrb	r3, [r3, #0]
 80021e0:	061b      	lsls	r3, r3, #24
 80021e2:	431a      	orrs	r2, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	609a      	str	r2, [r3, #8]
      offset += sizeof(this->stamp.sec);
 80021e8:	693b      	ldr	r3, [r7, #16]
 80021ea:	3304      	adds	r3, #4
 80021ec:	613b      	str	r3, [r7, #16]
      this->stamp.nsec =  ((uint32_t) (*(inbuffer + offset)));
 80021ee:	693b      	ldr	r3, [r7, #16]
 80021f0:	683a      	ldr	r2, [r7, #0]
 80021f2:	4413      	add	r3, r2
 80021f4:	781b      	ldrb	r3, [r3, #0]
 80021f6:	461a      	mov	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 1))) << (8 * 1);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	693b      	ldr	r3, [r7, #16]
 8002202:	3301      	adds	r3, #1
 8002204:	6839      	ldr	r1, [r7, #0]
 8002206:	440b      	add	r3, r1
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	021b      	lsls	r3, r3, #8
 800220c:	431a      	orrs	r2, r3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68da      	ldr	r2, [r3, #12]
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	3302      	adds	r3, #2
 800221a:	6839      	ldr	r1, [r7, #0]
 800221c:	440b      	add	r3, r1
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	041b      	lsls	r3, r3, #16
 8002222:	431a      	orrs	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	60da      	str	r2, [r3, #12]
      this->stamp.nsec |= ((uint32_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	68da      	ldr	r2, [r3, #12]
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	3303      	adds	r3, #3
 8002230:	6839      	ldr	r1, [r7, #0]
 8002232:	440b      	add	r3, r1
 8002234:	781b      	ldrb	r3, [r3, #0]
 8002236:	061b      	lsls	r3, r3, #24
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	60da      	str	r2, [r3, #12]
      offset += sizeof(this->stamp.nsec);
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	3304      	adds	r3, #4
 8002242:	613b      	str	r3, [r7, #16]
      uint32_t length_frame_id;
      arrToVar(length_frame_id, (inbuffer + offset));
 8002244:	693b      	ldr	r3, [r7, #16]
 8002246:	683a      	ldr	r2, [r7, #0]
 8002248:	441a      	add	r2, r3
 800224a:	f107 030c 	add.w	r3, r7, #12
 800224e:	4611      	mov	r1, r2
 8002250:	4618      	mov	r0, r3
 8002252:	f002 f9a9 	bl	80045a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>
      offset += 4;
 8002256:	693b      	ldr	r3, [r7, #16]
 8002258:	3304      	adds	r3, #4
 800225a:	613b      	str	r3, [r7, #16]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800225c:	693b      	ldr	r3, [r7, #16]
 800225e:	617b      	str	r3, [r7, #20]
 8002260:	693a      	ldr	r2, [r7, #16]
 8002262:	68fb      	ldr	r3, [r7, #12]
 8002264:	4413      	add	r3, r2
 8002266:	697a      	ldr	r2, [r7, #20]
 8002268:	429a      	cmp	r2, r3
 800226a:	d20c      	bcs.n	8002286 <_ZN8std_msgs6Header11deserializeEPh+0x152>
          inbuffer[k-1]=inbuffer[k];
 800226c:	683a      	ldr	r2, [r7, #0]
 800226e:	697b      	ldr	r3, [r7, #20]
 8002270:	441a      	add	r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	3b01      	subs	r3, #1
 8002276:	6839      	ldr	r1, [r7, #0]
 8002278:	440b      	add	r3, r1
 800227a:	7812      	ldrb	r2, [r2, #0]
 800227c:	701a      	strb	r2, [r3, #0]
      for(unsigned int k= offset; k< offset+length_frame_id; ++k){
 800227e:	697b      	ldr	r3, [r7, #20]
 8002280:	3301      	adds	r3, #1
 8002282:	617b      	str	r3, [r7, #20]
 8002284:	e7ec      	b.n	8002260 <_ZN8std_msgs6Header11deserializeEPh+0x12c>
      }
      inbuffer[offset+length_frame_id-1]=0;
 8002286:	693a      	ldr	r2, [r7, #16]
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	4413      	add	r3, r2
 800228c:	3b01      	subs	r3, #1
 800228e:	683a      	ldr	r2, [r7, #0]
 8002290:	4413      	add	r3, r2
 8002292:	2200      	movs	r2, #0
 8002294:	701a      	strb	r2, [r3, #0]
      this->frame_id = (char *)(inbuffer + offset-1);
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	3b01      	subs	r3, #1
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	441a      	add	r2, r3
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	611a      	str	r2, [r3, #16]
      offset += length_frame_id;
 80022a2:	693a      	ldr	r2, [r7, #16]
 80022a4:	68fb      	ldr	r3, [r7, #12]
 80022a6:	4413      	add	r3, r2
 80022a8:	613b      	str	r3, [r7, #16]
     return offset;
 80022aa:	693b      	ldr	r3, [r7, #16]
    }
 80022ac:	4618      	mov	r0, r3
 80022ae:	3718      	adds	r7, #24
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}

080022b4 <_ZN8std_msgs6Header7getTypeEv>:

    virtual const char * getType() override { return "std_msgs/Header"; };
 80022b4:	b480      	push	{r7}
 80022b6:	b083      	sub	sp, #12
 80022b8:	af00      	add	r7, sp, #0
 80022ba:	6078      	str	r0, [r7, #4]
 80022bc:	4b03      	ldr	r3, [pc, #12]	; (80022cc <_ZN8std_msgs6Header7getTypeEv+0x18>)
 80022be:	4618      	mov	r0, r3
 80022c0:	370c      	adds	r7, #12
 80022c2:	46bd      	mov	sp, r7
 80022c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c8:	4770      	bx	lr
 80022ca:	bf00      	nop
 80022cc:	08008f44 	.word	0x08008f44

080022d0 <_ZN8std_msgs6Header6getMD5Ev>:
    virtual const char * getMD5() override { return "2176decaecbce78abc3b96ef049fabed"; };
 80022d0:	b480      	push	{r7}
 80022d2:	b083      	sub	sp, #12
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	6078      	str	r0, [r7, #4]
 80022d8:	4b03      	ldr	r3, [pc, #12]	; (80022e8 <_ZN8std_msgs6Header6getMD5Ev+0x18>)
 80022da:	4618      	mov	r0, r3
 80022dc:	370c      	adds	r7, #12
 80022de:	46bd      	mov	sp, r7
 80022e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e4:	4770      	bx	lr
 80022e6:	bf00      	nop
 80022e8:	08008f54 	.word	0x08008f54

080022ec <_ZN13geometry_msgs10QuaternionC1Ev>:
      typedef double _z_type;
      _z_type z;
      typedef double _w_type;
      _w_type w;

    Quaternion():
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b082      	sub	sp, #8
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0),
      w(0)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	4618      	mov	r0, r3
 80022f8:	f7fe fec4 	bl	8001084 <_ZN3ros3MsgC1Ev>
 80022fc:	4a11      	ldr	r2, [pc, #68]	; (8002344 <_ZN13geometry_msgs10QuaternionC1Ev+0x58>)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	6879      	ldr	r1, [r7, #4]
 8002304:	f04f 0200 	mov.w	r2, #0
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002310:	6879      	ldr	r1, [r7, #4]
 8002312:	f04f 0200 	mov.w	r2, #0
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	e9c1 2304 	strd	r2, r3, [r1, #16]
 800231e:	6879      	ldr	r1, [r7, #4]
 8002320:	f04f 0200 	mov.w	r2, #0
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	e9c1 2306 	strd	r2, r3, [r1, #24]
 800232c:	6879      	ldr	r1, [r7, #4]
 800232e:	f04f 0200 	mov.w	r2, #0
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	e9c1 2308 	strd	r2, r3, [r1, #32]
    {
    }
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	4618      	mov	r0, r3
 800233e:	3708      	adds	r7, #8
 8002340:	46bd      	mov	sp, r7
 8002342:	bd80      	pop	{r7, pc}
 8002344:	080090d0 	.word	0x080090d0

08002348 <_ZNK13geometry_msgs10Quaternion9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002348:	b480      	push	{r7}
 800234a:	b08d      	sub	sp, #52	; 0x34
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
 8002350:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 800235c:	e9c7 2308 	strd	r2, r3, [r7, #32]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002360:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002364:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002366:	6838      	ldr	r0, [r7, #0]
 8002368:	4401      	add	r1, r0
 800236a:	b2d3      	uxtb	r3, r2
 800236c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 800236e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002372:	f04f 0200 	mov.w	r2, #0
 8002376:	f04f 0300 	mov.w	r3, #0
 800237a:	0a02      	lsrs	r2, r0, #8
 800237c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002380:	0a0b      	lsrs	r3, r1, #8
 8002382:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002384:	3101      	adds	r1, #1
 8002386:	6838      	ldr	r0, [r7, #0]
 8002388:	4401      	add	r1, r0
 800238a:	b2d3      	uxtb	r3, r2
 800238c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 800238e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002392:	f04f 0200 	mov.w	r2, #0
 8002396:	f04f 0300 	mov.w	r3, #0
 800239a:	0c02      	lsrs	r2, r0, #16
 800239c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80023a0:	0c0b      	lsrs	r3, r1, #16
 80023a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023a4:	3102      	adds	r1, #2
 80023a6:	6838      	ldr	r0, [r7, #0]
 80023a8:	4401      	add	r1, r0
 80023aa:	b2d3      	uxtb	r3, r2
 80023ac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 80023ae:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023b2:	f04f 0200 	mov.w	r2, #0
 80023b6:	f04f 0300 	mov.w	r3, #0
 80023ba:	0e02      	lsrs	r2, r0, #24
 80023bc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80023c0:	0e0b      	lsrs	r3, r1, #24
 80023c2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023c4:	3103      	adds	r1, #3
 80023c6:	6838      	ldr	r0, [r7, #0]
 80023c8:	4401      	add	r1, r0
 80023ca:	b2d3      	uxtb	r3, r2
 80023cc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 80023ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023d2:	f04f 0200 	mov.w	r2, #0
 80023d6:	f04f 0300 	mov.w	r3, #0
 80023da:	000a      	movs	r2, r1
 80023dc:	2300      	movs	r3, #0
 80023de:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023e0:	3104      	adds	r1, #4
 80023e2:	6838      	ldr	r0, [r7, #0]
 80023e4:	4401      	add	r1, r0
 80023e6:	b2d3      	uxtb	r3, r2
 80023e8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 80023ea:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	f04f 0300 	mov.w	r3, #0
 80023f6:	0a0a      	lsrs	r2, r1, #8
 80023f8:	2300      	movs	r3, #0
 80023fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80023fc:	3105      	adds	r1, #5
 80023fe:	6838      	ldr	r0, [r7, #0]
 8002400:	4401      	add	r1, r0
 8002402:	b2d3      	uxtb	r3, r2
 8002404:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 8002406:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800240a:	f04f 0200 	mov.w	r2, #0
 800240e:	f04f 0300 	mov.w	r3, #0
 8002412:	0c0a      	lsrs	r2, r1, #16
 8002414:	2300      	movs	r3, #0
 8002416:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002418:	3106      	adds	r1, #6
 800241a:	6838      	ldr	r0, [r7, #0]
 800241c:	4401      	add	r1, r0
 800241e:	b2d3      	uxtb	r3, r2
 8002420:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 8002422:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002426:	f04f 0200 	mov.w	r2, #0
 800242a:	f04f 0300 	mov.w	r3, #0
 800242e:	0e0a      	lsrs	r2, r1, #24
 8002430:	2300      	movs	r3, #0
 8002432:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002434:	3107      	adds	r1, #7
 8002436:	6838      	ldr	r0, [r7, #0]
 8002438:	4401      	add	r1, r0
 800243a:	b2d3      	uxtb	r3, r2
 800243c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 800243e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002440:	3308      	adds	r3, #8
 8002442:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 800244a:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 800244e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002452:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002454:	6838      	ldr	r0, [r7, #0]
 8002456:	4401      	add	r1, r0
 8002458:	b2d3      	uxtb	r3, r2
 800245a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 800245c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	f04f 0300 	mov.w	r3, #0
 8002468:	0a02      	lsrs	r2, r0, #8
 800246a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800246e:	0a0b      	lsrs	r3, r1, #8
 8002470:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002472:	3101      	adds	r1, #1
 8002474:	6838      	ldr	r0, [r7, #0]
 8002476:	4401      	add	r1, r0
 8002478:	b2d3      	uxtb	r3, r2
 800247a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 800247c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002480:	f04f 0200 	mov.w	r2, #0
 8002484:	f04f 0300 	mov.w	r3, #0
 8002488:	0c02      	lsrs	r2, r0, #16
 800248a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800248e:	0c0b      	lsrs	r3, r1, #16
 8002490:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002492:	3102      	adds	r1, #2
 8002494:	6838      	ldr	r0, [r7, #0]
 8002496:	4401      	add	r1, r0
 8002498:	b2d3      	uxtb	r3, r2
 800249a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 800249c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024a0:	f04f 0200 	mov.w	r2, #0
 80024a4:	f04f 0300 	mov.w	r3, #0
 80024a8:	0e02      	lsrs	r2, r0, #24
 80024aa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80024ae:	0e0b      	lsrs	r3, r1, #24
 80024b0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024b2:	3103      	adds	r1, #3
 80024b4:	6838      	ldr	r0, [r7, #0]
 80024b6:	4401      	add	r1, r0
 80024b8:	b2d3      	uxtb	r3, r2
 80024ba:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80024bc:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024c0:	f04f 0200 	mov.w	r2, #0
 80024c4:	f04f 0300 	mov.w	r3, #0
 80024c8:	000a      	movs	r2, r1
 80024ca:	2300      	movs	r3, #0
 80024cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024ce:	3104      	adds	r1, #4
 80024d0:	6838      	ldr	r0, [r7, #0]
 80024d2:	4401      	add	r1, r0
 80024d4:	b2d3      	uxtb	r3, r2
 80024d6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80024d8:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024dc:	f04f 0200 	mov.w	r2, #0
 80024e0:	f04f 0300 	mov.w	r3, #0
 80024e4:	0a0a      	lsrs	r2, r1, #8
 80024e6:	2300      	movs	r3, #0
 80024e8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80024ea:	3105      	adds	r1, #5
 80024ec:	6838      	ldr	r0, [r7, #0]
 80024ee:	4401      	add	r1, r0
 80024f0:	b2d3      	uxtb	r3, r2
 80024f2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 80024f4:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	f04f 0300 	mov.w	r3, #0
 8002500:	0c0a      	lsrs	r2, r1, #16
 8002502:	2300      	movs	r3, #0
 8002504:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002506:	3106      	adds	r1, #6
 8002508:	6838      	ldr	r0, [r7, #0]
 800250a:	4401      	add	r1, r0
 800250c:	b2d3      	uxtb	r3, r2
 800250e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8002510:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002514:	f04f 0200 	mov.w	r2, #0
 8002518:	f04f 0300 	mov.w	r3, #0
 800251c:	0e0a      	lsrs	r2, r1, #24
 800251e:	2300      	movs	r3, #0
 8002520:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002522:	3107      	adds	r1, #7
 8002524:	6838      	ldr	r0, [r7, #0]
 8002526:	4401      	add	r1, r0
 8002528:	b2d3      	uxtb	r3, r2
 800252a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 800252c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800252e:	3308      	adds	r3, #8
 8002530:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8002538:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 800253c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002540:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002542:	6838      	ldr	r0, [r7, #0]
 8002544:	4401      	add	r1, r0
 8002546:	b2d3      	uxtb	r3, r2
 8002548:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 800254a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800254e:	f04f 0200 	mov.w	r2, #0
 8002552:	f04f 0300 	mov.w	r3, #0
 8002556:	0a02      	lsrs	r2, r0, #8
 8002558:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800255c:	0a0b      	lsrs	r3, r1, #8
 800255e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002560:	3101      	adds	r1, #1
 8002562:	6838      	ldr	r0, [r7, #0]
 8002564:	4401      	add	r1, r0
 8002566:	b2d3      	uxtb	r3, r2
 8002568:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 800256a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800256e:	f04f 0200 	mov.w	r2, #0
 8002572:	f04f 0300 	mov.w	r3, #0
 8002576:	0c02      	lsrs	r2, r0, #16
 8002578:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800257c:	0c0b      	lsrs	r3, r1, #16
 800257e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002580:	3102      	adds	r1, #2
 8002582:	6838      	ldr	r0, [r7, #0]
 8002584:	4401      	add	r1, r0
 8002586:	b2d3      	uxtb	r3, r2
 8002588:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 800258a:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800258e:	f04f 0200 	mov.w	r2, #0
 8002592:	f04f 0300 	mov.w	r3, #0
 8002596:	0e02      	lsrs	r2, r0, #24
 8002598:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800259c:	0e0b      	lsrs	r3, r1, #24
 800259e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025a0:	3103      	adds	r1, #3
 80025a2:	6838      	ldr	r0, [r7, #0]
 80025a4:	4401      	add	r1, r0
 80025a6:	b2d3      	uxtb	r3, r2
 80025a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80025aa:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025ae:	f04f 0200 	mov.w	r2, #0
 80025b2:	f04f 0300 	mov.w	r3, #0
 80025b6:	000a      	movs	r2, r1
 80025b8:	2300      	movs	r3, #0
 80025ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025bc:	3104      	adds	r1, #4
 80025be:	6838      	ldr	r0, [r7, #0]
 80025c0:	4401      	add	r1, r0
 80025c2:	b2d3      	uxtb	r3, r2
 80025c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80025c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025ca:	f04f 0200 	mov.w	r2, #0
 80025ce:	f04f 0300 	mov.w	r3, #0
 80025d2:	0a0a      	lsrs	r2, r1, #8
 80025d4:	2300      	movs	r3, #0
 80025d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025d8:	3105      	adds	r1, #5
 80025da:	6838      	ldr	r0, [r7, #0]
 80025dc:	4401      	add	r1, r0
 80025de:	b2d3      	uxtb	r3, r2
 80025e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80025e2:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80025e6:	f04f 0200 	mov.w	r2, #0
 80025ea:	f04f 0300 	mov.w	r3, #0
 80025ee:	0c0a      	lsrs	r2, r1, #16
 80025f0:	2300      	movs	r3, #0
 80025f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025f4:	3106      	adds	r1, #6
 80025f6:	6838      	ldr	r0, [r7, #0]
 80025f8:	4401      	add	r1, r0
 80025fa:	b2d3      	uxtb	r3, r2
 80025fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 80025fe:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	0e0a      	lsrs	r2, r1, #24
 800260c:	2300      	movs	r3, #0
 800260e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002610:	3107      	adds	r1, #7
 8002612:	6838      	ldr	r0, [r7, #0]
 8002614:	4401      	add	r1, r0
 8002616:	b2d3      	uxtb	r3, r2
 8002618:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 800261a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800261c:	3308      	adds	r3, #8
 800261e:	62fb      	str	r3, [r7, #44]	; 0x2c
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.real = this->w;
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002626:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_w.base >> (8 * 0)) & 0xFF;
 800262a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800262e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002630:	6838      	ldr	r0, [r7, #0]
 8002632:	4401      	add	r1, r0
 8002634:	b2d3      	uxtb	r3, r2
 8002636:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_w.base >> (8 * 1)) & 0xFF;
 8002638:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800263c:	f04f 0200 	mov.w	r2, #0
 8002640:	f04f 0300 	mov.w	r3, #0
 8002644:	0a02      	lsrs	r2, r0, #8
 8002646:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800264a:	0a0b      	lsrs	r3, r1, #8
 800264c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800264e:	3101      	adds	r1, #1
 8002650:	6838      	ldr	r0, [r7, #0]
 8002652:	4401      	add	r1, r0
 8002654:	b2d3      	uxtb	r3, r2
 8002656:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_w.base >> (8 * 2)) & 0xFF;
 8002658:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800265c:	f04f 0200 	mov.w	r2, #0
 8002660:	f04f 0300 	mov.w	r3, #0
 8002664:	0c02      	lsrs	r2, r0, #16
 8002666:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800266a:	0c0b      	lsrs	r3, r1, #16
 800266c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800266e:	3102      	adds	r1, #2
 8002670:	6838      	ldr	r0, [r7, #0]
 8002672:	4401      	add	r1, r0
 8002674:	b2d3      	uxtb	r3, r2
 8002676:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_w.base >> (8 * 3)) & 0xFF;
 8002678:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800267c:	f04f 0200 	mov.w	r2, #0
 8002680:	f04f 0300 	mov.w	r3, #0
 8002684:	0e02      	lsrs	r2, r0, #24
 8002686:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800268a:	0e0b      	lsrs	r3, r1, #24
 800268c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800268e:	3103      	adds	r1, #3
 8002690:	6838      	ldr	r0, [r7, #0]
 8002692:	4401      	add	r1, r0
 8002694:	b2d3      	uxtb	r3, r2
 8002696:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_w.base >> (8 * 4)) & 0xFF;
 8002698:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800269c:	f04f 0200 	mov.w	r2, #0
 80026a0:	f04f 0300 	mov.w	r3, #0
 80026a4:	000a      	movs	r2, r1
 80026a6:	2300      	movs	r3, #0
 80026a8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026aa:	3104      	adds	r1, #4
 80026ac:	6838      	ldr	r0, [r7, #0]
 80026ae:	4401      	add	r1, r0
 80026b0:	b2d3      	uxtb	r3, r2
 80026b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_w.base >> (8 * 5)) & 0xFF;
 80026b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026b8:	f04f 0200 	mov.w	r2, #0
 80026bc:	f04f 0300 	mov.w	r3, #0
 80026c0:	0a0a      	lsrs	r2, r1, #8
 80026c2:	2300      	movs	r3, #0
 80026c4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026c6:	3105      	adds	r1, #5
 80026c8:	6838      	ldr	r0, [r7, #0]
 80026ca:	4401      	add	r1, r0
 80026cc:	b2d3      	uxtb	r3, r2
 80026ce:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_w.base >> (8 * 6)) & 0xFF;
 80026d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026d4:	f04f 0200 	mov.w	r2, #0
 80026d8:	f04f 0300 	mov.w	r3, #0
 80026dc:	0c0a      	lsrs	r2, r1, #16
 80026de:	2300      	movs	r3, #0
 80026e0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026e2:	3106      	adds	r1, #6
 80026e4:	6838      	ldr	r0, [r7, #0]
 80026e6:	4401      	add	r1, r0
 80026e8:	b2d3      	uxtb	r3, r2
 80026ea:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_w.base >> (8 * 7)) & 0xFF;
 80026ec:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80026f0:	f04f 0200 	mov.w	r2, #0
 80026f4:	f04f 0300 	mov.w	r3, #0
 80026f8:	0e0a      	lsrs	r2, r1, #24
 80026fa:	2300      	movs	r3, #0
 80026fc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80026fe:	3107      	adds	r1, #7
 8002700:	6838      	ldr	r0, [r7, #0]
 8002702:	4401      	add	r1, r0
 8002704:	b2d3      	uxtb	r3, r2
 8002706:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->w);
 8002708:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800270a:	3308      	adds	r3, #8
 800270c:	62fb      	str	r3, [r7, #44]	; 0x2c
      return offset;
 800270e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8002710:	4618      	mov	r0, r3
 8002712:	3734      	adds	r7, #52	; 0x34
 8002714:	46bd      	mov	sp, r7
 8002716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800271a:	4770      	bx	lr

0800271c <_ZN13geometry_msgs10Quaternion11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 800271c:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002720:	b0cf      	sub	sp, #316	; 0x13c
 8002722:	af00      	add	r7, sp, #0
 8002724:	f8c7 010c 	str.w	r0, [r7, #268]	; 0x10c
 8002728:	f8c7 1108 	str.w	r1, [r7, #264]	; 0x108
    {
      int offset = 0;
 800272c:	2300      	movs	r3, #0
 800272e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 8002732:	f04f 0200 	mov.w	r2, #0
 8002736:	f04f 0300 	mov.w	r3, #0
 800273a:	e9c7 234a 	strd	r2, r3, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800273e:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8002742:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8002746:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800274a:	4413      	add	r3, r2
 800274c:	781b      	ldrb	r3, [r3, #0]
 800274e:	b2da      	uxtb	r2, r3
 8002750:	f04f 0300 	mov.w	r3, #0
 8002754:	ea40 0402 	orr.w	r4, r0, r2
 8002758:	ea41 0503 	orr.w	r5, r1, r3
 800275c:	e9c7 454a 	strd	r4, r5, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002760:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8002764:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800276e:	4413      	add	r3, r2
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	f04f 0300 	mov.w	r3, #0
 8002778:	f04f 0000 	mov.w	r0, #0
 800277c:	f04f 0100 	mov.w	r1, #0
 8002780:	0219      	lsls	r1, r3, #8
 8002782:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8002786:	0210      	lsls	r0, r2, #8
 8002788:	ea44 0a00 	orr.w	sl, r4, r0
 800278c:	ea45 0b01 	orr.w	fp, r5, r1
 8002790:	e9c7 ab4a 	strd	sl, fp, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002794:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8002798:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800279c:	1c9a      	adds	r2, r3, #2
 800279e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80027a2:	4413      	add	r3, r2
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	b2da      	uxtb	r2, r3
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	f04f 0000 	mov.w	r0, #0
 80027b0:	f04f 0100 	mov.w	r1, #0
 80027b4:	0419      	lsls	r1, r3, #16
 80027b6:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80027ba:	0410      	lsls	r0, r2, #16
 80027bc:	ea44 0300 	orr.w	r3, r4, r0
 80027c0:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 80027c4:	ea45 0301 	orr.w	r3, r5, r1
 80027c8:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 80027cc:	e9d7 3440 	ldrd	r3, r4, [r7, #256]	; 0x100
 80027d0:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80027d4:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 80027d8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80027dc:	1cda      	adds	r2, r3, #3
 80027de:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80027e2:	4413      	add	r3, r2
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	b2da      	uxtb	r2, r3
 80027e8:	f04f 0300 	mov.w	r3, #0
 80027ec:	ea4f 2912 	mov.w	r9, r2, lsr #8
 80027f0:	ea4f 6802 	mov.w	r8, r2, lsl #24
 80027f4:	ea40 0308 	orr.w	r3, r0, r8
 80027f8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80027fc:	ea41 0309 	orr.w	r3, r1, r9
 8002800:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 8002804:	e9d7 343e 	ldrd	r3, r4, [r7, #248]	; 0xf8
 8002808:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 800280c:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8002810:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002814:	1d1a      	adds	r2, r3, #4
 8002816:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800281a:	4413      	add	r3, r2
 800281c:	781b      	ldrb	r3, [r3, #0]
 800281e:	b2da      	uxtb	r2, r3
 8002820:	f04f 0300 	mov.w	r3, #0
 8002824:	f04f 0000 	mov.w	r0, #0
 8002828:	f04f 0100 	mov.w	r1, #0
 800282c:	0011      	movs	r1, r2
 800282e:	2000      	movs	r0, #0
 8002830:	ea44 0300 	orr.w	r3, r4, r0
 8002834:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8002838:	ea45 0301 	orr.w	r3, r5, r1
 800283c:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 8002840:	e9d7 343c 	ldrd	r3, r4, [r7, #240]	; 0xf0
 8002844:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002848:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 800284c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002850:	1d5a      	adds	r2, r3, #5
 8002852:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002856:	4413      	add	r3, r2
 8002858:	781b      	ldrb	r3, [r3, #0]
 800285a:	b2da      	uxtb	r2, r3
 800285c:	f04f 0300 	mov.w	r3, #0
 8002860:	f04f 0000 	mov.w	r0, #0
 8002864:	f04f 0100 	mov.w	r1, #0
 8002868:	0211      	lsls	r1, r2, #8
 800286a:	2000      	movs	r0, #0
 800286c:	ea44 0300 	orr.w	r3, r4, r0
 8002870:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8002874:	ea45 0301 	orr.w	r3, r5, r1
 8002878:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800287c:	e9d7 343a 	ldrd	r3, r4, [r7, #232]	; 0xe8
 8002880:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002884:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 8002888:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800288c:	1d9a      	adds	r2, r3, #6
 800288e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002892:	4413      	add	r3, r2
 8002894:	781b      	ldrb	r3, [r3, #0]
 8002896:	b2da      	uxtb	r2, r3
 8002898:	f04f 0300 	mov.w	r3, #0
 800289c:	f04f 0000 	mov.w	r0, #0
 80028a0:	f04f 0100 	mov.w	r1, #0
 80028a4:	0411      	lsls	r1, r2, #16
 80028a6:	2000      	movs	r0, #0
 80028a8:	ea44 0300 	orr.w	r3, r4, r0
 80028ac:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80028b0:	ea45 0301 	orr.w	r3, r5, r1
 80028b4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80028b8:	e9d7 3438 	ldrd	r3, r4, [r7, #224]	; 0xe0
 80028bc:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80028c0:	e9d7 454a 	ldrd	r4, r5, [r7, #296]	; 0x128
 80028c4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80028c8:	1dda      	adds	r2, r3, #7
 80028ca:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80028ce:	4413      	add	r3, r2
 80028d0:	781b      	ldrb	r3, [r3, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	f04f 0300 	mov.w	r3, #0
 80028d8:	f04f 0000 	mov.w	r0, #0
 80028dc:	f04f 0100 	mov.w	r1, #0
 80028e0:	0611      	lsls	r1, r2, #24
 80028e2:	2000      	movs	r0, #0
 80028e4:	ea44 0300 	orr.w	r3, r4, r0
 80028e8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80028ec:	ea45 0301 	orr.w	r3, r5, r1
 80028f0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 80028f4:	e9d7 3436 	ldrd	r3, r4, [r7, #216]	; 0xd8
 80028f8:	e9c7 344a 	strd	r3, r4, [r7, #296]	; 0x128
      this->x = u_x.real;
 80028fc:	e9d7 014a 	ldrd	r0, r1, [r7, #296]	; 0x128
 8002900:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002904:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8002908:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 800290c:	3308      	adds	r3, #8
 800290e:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 8002912:	f04f 0200 	mov.w	r2, #0
 8002916:	f04f 0300 	mov.w	r3, #0
 800291a:	e9c7 2348 	strd	r2, r3, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800291e:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8002922:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8002926:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 800292a:	4413      	add	r3, r2
 800292c:	781b      	ldrb	r3, [r3, #0]
 800292e:	b2da      	uxtb	r2, r3
 8002930:	f04f 0300 	mov.w	r3, #0
 8002934:	ea40 0402 	orr.w	r4, r0, r2
 8002938:	f8c7 40d0 	str.w	r4, [r7, #208]	; 0xd0
 800293c:	430b      	orrs	r3, r1
 800293e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8002942:	e9d7 3434 	ldrd	r3, r4, [r7, #208]	; 0xd0
 8002946:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800294a:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800294e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002952:	1c5a      	adds	r2, r3, #1
 8002954:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002958:	4413      	add	r3, r2
 800295a:	781b      	ldrb	r3, [r3, #0]
 800295c:	b2da      	uxtb	r2, r3
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	f04f 0000 	mov.w	r0, #0
 8002966:	f04f 0100 	mov.w	r1, #0
 800296a:	0219      	lsls	r1, r3, #8
 800296c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8002970:	0210      	lsls	r0, r2, #8
 8002972:	ea44 0300 	orr.w	r3, r4, r0
 8002976:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800297a:	ea45 0301 	orr.w	r3, r5, r1
 800297e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002982:	e9d7 3432 	ldrd	r3, r4, [r7, #200]	; 0xc8
 8002986:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800298a:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 800298e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002992:	1c9a      	adds	r2, r3, #2
 8002994:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002998:	4413      	add	r3, r2
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	b2da      	uxtb	r2, r3
 800299e:	f04f 0300 	mov.w	r3, #0
 80029a2:	f04f 0000 	mov.w	r0, #0
 80029a6:	f04f 0100 	mov.w	r1, #0
 80029aa:	0419      	lsls	r1, r3, #16
 80029ac:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80029b0:	0410      	lsls	r0, r2, #16
 80029b2:	ea44 0300 	orr.w	r3, r4, r0
 80029b6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80029ba:	ea45 0301 	orr.w	r3, r5, r1
 80029be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80029c2:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 80029c6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80029ca:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 80029ce:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 80029d2:	1cda      	adds	r2, r3, #3
 80029d4:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 80029d8:	4413      	add	r3, r2
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	b2da      	uxtb	r2, r3
 80029de:	f04f 0300 	mov.w	r3, #0
 80029e2:	0a14      	lsrs	r4, r2, #8
 80029e4:	f8c7 40bc 	str.w	r4, [r7, #188]	; 0xbc
 80029e8:	0613      	lsls	r3, r2, #24
 80029ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80029ee:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	; 0xb8
 80029f2:	4623      	mov	r3, r4
 80029f4:	4303      	orrs	r3, r0
 80029f6:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80029fa:	462b      	mov	r3, r5
 80029fc:	430b      	orrs	r3, r1
 80029fe:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8002a02:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8002a06:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002a0a:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8002a0e:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a12:	1d1a      	adds	r2, r3, #4
 8002a14:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a18:	4413      	add	r3, r2
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	b2da      	uxtb	r2, r3
 8002a1e:	f04f 0300 	mov.w	r3, #0
 8002a22:	f04f 0000 	mov.w	r0, #0
 8002a26:	f04f 0100 	mov.w	r1, #0
 8002a2a:	0011      	movs	r1, r2
 8002a2c:	2000      	movs	r0, #0
 8002a2e:	ea44 0300 	orr.w	r3, r4, r0
 8002a32:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8002a36:	ea45 0301 	orr.w	r3, r5, r1
 8002a3a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8002a3e:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8002a42:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002a46:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8002a4a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a4e:	1d5a      	adds	r2, r3, #5
 8002a50:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a54:	4413      	add	r3, r2
 8002a56:	781b      	ldrb	r3, [r3, #0]
 8002a58:	b2da      	uxtb	r2, r3
 8002a5a:	f04f 0300 	mov.w	r3, #0
 8002a5e:	f04f 0000 	mov.w	r0, #0
 8002a62:	f04f 0100 	mov.w	r1, #0
 8002a66:	0211      	lsls	r1, r2, #8
 8002a68:	2000      	movs	r0, #0
 8002a6a:	ea44 0300 	orr.w	r3, r4, r0
 8002a6e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002a72:	ea45 0301 	orr.w	r3, r5, r1
 8002a76:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8002a7a:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8002a7e:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002a82:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8002a86:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002a8a:	1d9a      	adds	r2, r3, #6
 8002a8c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002a90:	4413      	add	r3, r2
 8002a92:	781b      	ldrb	r3, [r3, #0]
 8002a94:	b2da      	uxtb	r2, r3
 8002a96:	f04f 0300 	mov.w	r3, #0
 8002a9a:	f04f 0000 	mov.w	r0, #0
 8002a9e:	f04f 0100 	mov.w	r1, #0
 8002aa2:	0411      	lsls	r1, r2, #16
 8002aa4:	2000      	movs	r0, #0
 8002aa6:	ea44 0300 	orr.w	r3, r4, r0
 8002aaa:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002aae:	ea45 0301 	orr.w	r3, r5, r1
 8002ab2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8002ab6:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8002aba:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002abe:	e9d7 4548 	ldrd	r4, r5, [r7, #288]	; 0x120
 8002ac2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002ac6:	1dda      	adds	r2, r3, #7
 8002ac8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002acc:	4413      	add	r3, r2
 8002ace:	781b      	ldrb	r3, [r3, #0]
 8002ad0:	b2da      	uxtb	r2, r3
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	f04f 0000 	mov.w	r0, #0
 8002ada:	f04f 0100 	mov.w	r1, #0
 8002ade:	0611      	lsls	r1, r2, #24
 8002ae0:	2000      	movs	r0, #0
 8002ae2:	ea44 0300 	orr.w	r3, r4, r0
 8002ae6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8002aea:	ea45 0301 	orr.w	r3, r5, r1
 8002aee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8002af2:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8002af6:	e9c7 3448 	strd	r3, r4, [r7, #288]	; 0x120
      this->y = u_y.real;
 8002afa:	e9d7 0148 	ldrd	r0, r1, [r7, #288]	; 0x120
 8002afe:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002b02:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8002b06:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b0a:	3308      	adds	r3, #8
 8002b0c:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 8002b10:	f04f 0200 	mov.w	r2, #0
 8002b14:	f04f 0300 	mov.w	r3, #0
 8002b18:	e9c7 2346 	strd	r2, r3, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002b1c:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8002b20:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8002b24:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b28:	4413      	add	r3, r2
 8002b2a:	781b      	ldrb	r3, [r3, #0]
 8002b2c:	b2da      	uxtb	r2, r3
 8002b2e:	f04f 0300 	mov.w	r3, #0
 8002b32:	ea40 0402 	orr.w	r4, r0, r2
 8002b36:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8002b3a:	430b      	orrs	r3, r1
 8002b3c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8002b40:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8002b44:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002b48:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8002b4c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b50:	1c5a      	adds	r2, r3, #1
 8002b52:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b56:	4413      	add	r3, r2
 8002b58:	781b      	ldrb	r3, [r3, #0]
 8002b5a:	b2da      	uxtb	r2, r3
 8002b5c:	f04f 0300 	mov.w	r3, #0
 8002b60:	f04f 0000 	mov.w	r0, #0
 8002b64:	f04f 0100 	mov.w	r1, #0
 8002b68:	0219      	lsls	r1, r3, #8
 8002b6a:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8002b6e:	0210      	lsls	r0, r2, #8
 8002b70:	ea44 0300 	orr.w	r3, r4, r0
 8002b74:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002b78:	ea45 0301 	orr.w	r3, r5, r1
 8002b7c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002b80:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8002b84:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002b88:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8002b8c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002b90:	1c9a      	adds	r2, r3, #2
 8002b92:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002b96:	4413      	add	r3, r2
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b2da      	uxtb	r2, r3
 8002b9c:	f04f 0300 	mov.w	r3, #0
 8002ba0:	f04f 0000 	mov.w	r0, #0
 8002ba4:	f04f 0100 	mov.w	r1, #0
 8002ba8:	0419      	lsls	r1, r3, #16
 8002baa:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002bae:	0410      	lsls	r0, r2, #16
 8002bb0:	ea44 0300 	orr.w	r3, r4, r0
 8002bb4:	67bb      	str	r3, [r7, #120]	; 0x78
 8002bb6:	ea45 0301 	orr.w	r3, r5, r1
 8002bba:	67fb      	str	r3, [r7, #124]	; 0x7c
 8002bbc:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8002bc0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002bc4:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8002bc8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002bcc:	1cda      	adds	r2, r3, #3
 8002bce:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002bd2:	4413      	add	r3, r2
 8002bd4:	781b      	ldrb	r3, [r3, #0]
 8002bd6:	b2da      	uxtb	r2, r3
 8002bd8:	f04f 0300 	mov.w	r3, #0
 8002bdc:	0a14      	lsrs	r4, r2, #8
 8002bde:	677c      	str	r4, [r7, #116]	; 0x74
 8002be0:	0613      	lsls	r3, r2, #24
 8002be2:	673b      	str	r3, [r7, #112]	; 0x70
 8002be4:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8002be8:	4623      	mov	r3, r4
 8002bea:	4303      	orrs	r3, r0
 8002bec:	66bb      	str	r3, [r7, #104]	; 0x68
 8002bee:	462b      	mov	r3, r5
 8002bf0:	430b      	orrs	r3, r1
 8002bf2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8002bf4:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8002bf8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002bfc:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8002c00:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c04:	1d1a      	adds	r2, r3, #4
 8002c06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c0a:	4413      	add	r3, r2
 8002c0c:	781b      	ldrb	r3, [r3, #0]
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	f04f 0300 	mov.w	r3, #0
 8002c14:	f04f 0000 	mov.w	r0, #0
 8002c18:	f04f 0100 	mov.w	r1, #0
 8002c1c:	0011      	movs	r1, r2
 8002c1e:	2000      	movs	r0, #0
 8002c20:	ea44 0300 	orr.w	r3, r4, r0
 8002c24:	663b      	str	r3, [r7, #96]	; 0x60
 8002c26:	ea45 0301 	orr.w	r3, r5, r1
 8002c2a:	667b      	str	r3, [r7, #100]	; 0x64
 8002c2c:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8002c30:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002c34:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8002c38:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c3c:	1d5a      	adds	r2, r3, #5
 8002c3e:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c42:	4413      	add	r3, r2
 8002c44:	781b      	ldrb	r3, [r3, #0]
 8002c46:	b2da      	uxtb	r2, r3
 8002c48:	f04f 0300 	mov.w	r3, #0
 8002c4c:	f04f 0000 	mov.w	r0, #0
 8002c50:	f04f 0100 	mov.w	r1, #0
 8002c54:	0211      	lsls	r1, r2, #8
 8002c56:	2000      	movs	r0, #0
 8002c58:	ea44 0300 	orr.w	r3, r4, r0
 8002c5c:	65bb      	str	r3, [r7, #88]	; 0x58
 8002c5e:	ea45 0301 	orr.w	r3, r5, r1
 8002c62:	65fb      	str	r3, [r7, #92]	; 0x5c
 8002c64:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8002c68:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002c6c:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8002c70:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002c74:	1d9a      	adds	r2, r3, #6
 8002c76:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002c7a:	4413      	add	r3, r2
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	b2da      	uxtb	r2, r3
 8002c80:	f04f 0300 	mov.w	r3, #0
 8002c84:	f04f 0000 	mov.w	r0, #0
 8002c88:	f04f 0100 	mov.w	r1, #0
 8002c8c:	0411      	lsls	r1, r2, #16
 8002c8e:	2000      	movs	r0, #0
 8002c90:	ea44 0300 	orr.w	r3, r4, r0
 8002c94:	653b      	str	r3, [r7, #80]	; 0x50
 8002c96:	ea45 0301 	orr.w	r3, r5, r1
 8002c9a:	657b      	str	r3, [r7, #84]	; 0x54
 8002c9c:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 8002ca0:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002ca4:	e9d7 4546 	ldrd	r4, r5, [r7, #280]	; 0x118
 8002ca8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002cac:	1dda      	adds	r2, r3, #7
 8002cae:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	b2da      	uxtb	r2, r3
 8002cb8:	f04f 0300 	mov.w	r3, #0
 8002cbc:	f04f 0000 	mov.w	r0, #0
 8002cc0:	f04f 0100 	mov.w	r1, #0
 8002cc4:	0611      	lsls	r1, r2, #24
 8002cc6:	2000      	movs	r0, #0
 8002cc8:	ea44 0300 	orr.w	r3, r4, r0
 8002ccc:	64bb      	str	r3, [r7, #72]	; 0x48
 8002cce:	ea45 0301 	orr.w	r3, r5, r1
 8002cd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002cd4:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8002cd8:	e9c7 3446 	strd	r3, r4, [r7, #280]	; 0x118
      this->z = u_z.real;
 8002cdc:	e9d7 0146 	ldrd	r0, r1, [r7, #280]	; 0x118
 8002ce0:	f8d7 310c 	ldr.w	r3, [r7, #268]	; 0x10c
 8002ce4:	e9c3 0106 	strd	r0, r1, [r3, #24]
      offset += sizeof(this->z);
 8002ce8:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002cec:	3308      	adds	r3, #8
 8002cee:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
      union {
        double real;
        uint64_t base;
      } u_w;
      u_w.base = 0;
 8002cf2:	f04f 0200 	mov.w	r2, #0
 8002cf6:	f04f 0300 	mov.w	r3, #0
 8002cfa:	e9c7 2344 	strd	r2, r3, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8002cfe:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002d02:	f8d7 2134 	ldr.w	r2, [r7, #308]	; 0x134
 8002d06:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002d0a:	4413      	add	r3, r2
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	b2da      	uxtb	r2, r3
 8002d10:	f04f 0300 	mov.w	r3, #0
 8002d14:	ea40 0402 	orr.w	r4, r0, r2
 8002d18:	643c      	str	r4, [r7, #64]	; 0x40
 8002d1a:	430b      	orrs	r3, r1
 8002d1c:	647b      	str	r3, [r7, #68]	; 0x44
 8002d1e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8002d22:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8002d26:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8002d2a:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002d2e:	1c5a      	adds	r2, r3, #1
 8002d30:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002d34:	4413      	add	r3, r2
 8002d36:	781b      	ldrb	r3, [r3, #0]
 8002d38:	b2da      	uxtb	r2, r3
 8002d3a:	f04f 0300 	mov.w	r3, #0
 8002d3e:	f04f 0000 	mov.w	r0, #0
 8002d42:	f04f 0100 	mov.w	r1, #0
 8002d46:	0219      	lsls	r1, r3, #8
 8002d48:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8002d4c:	0210      	lsls	r0, r2, #8
 8002d4e:	ea44 0300 	orr.w	r3, r4, r0
 8002d52:	63bb      	str	r3, [r7, #56]	; 0x38
 8002d54:	ea45 0301 	orr.w	r3, r5, r1
 8002d58:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002d5a:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 8002d5e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8002d62:	e9d7 4544 	ldrd	r4, r5, [r7, #272]	; 0x110
 8002d66:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002d6a:	1c9a      	adds	r2, r3, #2
 8002d6c:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002d70:	4413      	add	r3, r2
 8002d72:	781b      	ldrb	r3, [r3, #0]
 8002d74:	b2da      	uxtb	r2, r3
 8002d76:	f04f 0300 	mov.w	r3, #0
 8002d7a:	f04f 0000 	mov.w	r0, #0
 8002d7e:	f04f 0100 	mov.w	r1, #0
 8002d82:	0419      	lsls	r1, r3, #16
 8002d84:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8002d88:	0410      	lsls	r0, r2, #16
 8002d8a:	ea44 0300 	orr.w	r3, r4, r0
 8002d8e:	633b      	str	r3, [r7, #48]	; 0x30
 8002d90:	ea45 0301 	orr.w	r3, r5, r1
 8002d94:	637b      	str	r3, [r7, #52]	; 0x34
 8002d96:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 8002d9a:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8002d9e:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002da2:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002da6:	1cda      	adds	r2, r3, #3
 8002da8:	f8d7 3108 	ldr.w	r3, [r7, #264]	; 0x108
 8002dac:	4413      	add	r3, r2
 8002dae:	781b      	ldrb	r3, [r3, #0]
 8002db0:	b2da      	uxtb	r2, r3
 8002db2:	f04f 0300 	mov.w	r3, #0
 8002db6:	0a14      	lsrs	r4, r2, #8
 8002db8:	62fc      	str	r4, [r7, #44]	; 0x2c
 8002dba:	0613      	lsls	r3, r2, #24
 8002dbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002dbe:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8002dc2:	4623      	mov	r3, r4
 8002dc4:	4303      	orrs	r3, r0
 8002dc6:	623b      	str	r3, [r7, #32]
 8002dc8:	462b      	mov	r3, r5
 8002dca:	430b      	orrs	r3, r1
 8002dcc:	627b      	str	r3, [r7, #36]	; 0x24
 8002dce:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8002dd2:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8002dd6:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002dda:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002dde:	3304      	adds	r3, #4
 8002de0:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002de4:	4413      	add	r3, r2
 8002de6:	781b      	ldrb	r3, [r3, #0]
 8002de8:	b2dc      	uxtb	r4, r3
 8002dea:	f04f 0500 	mov.w	r5, #0
 8002dee:	f04f 0200 	mov.w	r2, #0
 8002df2:	f04f 0300 	mov.w	r3, #0
 8002df6:	0023      	movs	r3, r4
 8002df8:	2200      	movs	r2, #0
 8002dfa:	ea40 0402 	orr.w	r4, r0, r2
 8002dfe:	61bc      	str	r4, [r7, #24]
 8002e00:	430b      	orrs	r3, r1
 8002e02:	61fb      	str	r3, [r7, #28]
 8002e04:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8002e08:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8002e0c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002e10:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002e14:	3305      	adds	r3, #5
 8002e16:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002e1a:	4413      	add	r3, r2
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	b2dc      	uxtb	r4, r3
 8002e20:	f04f 0500 	mov.w	r5, #0
 8002e24:	f04f 0200 	mov.w	r2, #0
 8002e28:	f04f 0300 	mov.w	r3, #0
 8002e2c:	0223      	lsls	r3, r4, #8
 8002e2e:	2200      	movs	r2, #0
 8002e30:	ea40 0402 	orr.w	r4, r0, r2
 8002e34:	613c      	str	r4, [r7, #16]
 8002e36:	430b      	orrs	r3, r1
 8002e38:	617b      	str	r3, [r7, #20]
 8002e3a:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8002e3e:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8002e42:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002e46:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002e4a:	3306      	adds	r3, #6
 8002e4c:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002e50:	4413      	add	r3, r2
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	b2dc      	uxtb	r4, r3
 8002e56:	f04f 0500 	mov.w	r5, #0
 8002e5a:	f04f 0200 	mov.w	r2, #0
 8002e5e:	f04f 0300 	mov.w	r3, #0
 8002e62:	0423      	lsls	r3, r4, #16
 8002e64:	2200      	movs	r2, #0
 8002e66:	ea40 0402 	orr.w	r4, r0, r2
 8002e6a:	60bc      	str	r4, [r7, #8]
 8002e6c:	430b      	orrs	r3, r1
 8002e6e:	60fb      	str	r3, [r7, #12]
 8002e70:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8002e74:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      u_w.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8002e78:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	; 0x110
 8002e7c:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002e80:	3307      	adds	r3, #7
 8002e82:	f8d7 2108 	ldr.w	r2, [r7, #264]	; 0x108
 8002e86:	4413      	add	r3, r2
 8002e88:	781b      	ldrb	r3, [r3, #0]
 8002e8a:	b2dc      	uxtb	r4, r3
 8002e8c:	f04f 0500 	mov.w	r5, #0
 8002e90:	f04f 0200 	mov.w	r2, #0
 8002e94:	f04f 0300 	mov.w	r3, #0
 8002e98:	0623      	lsls	r3, r4, #24
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	ea40 0402 	orr.w	r4, r0, r2
 8002ea0:	603c      	str	r4, [r7, #0]
 8002ea2:	430b      	orrs	r3, r1
 8002ea4:	607b      	str	r3, [r7, #4]
 8002ea6:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002eaa:	e9c7 3444 	strd	r3, r4, [r7, #272]	; 0x110
      this->w = u_w.real;
 8002eae:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	; 0x110
 8002eb2:	f8d7 110c 	ldr.w	r1, [r7, #268]	; 0x10c
 8002eb6:	e9c1 2308 	strd	r2, r3, [r1, #32]
      offset += sizeof(this->w);
 8002eba:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
 8002ebe:	3308      	adds	r3, #8
 8002ec0:	f8c7 3134 	str.w	r3, [r7, #308]	; 0x134
     return offset;
 8002ec4:	f8d7 3134 	ldr.w	r3, [r7, #308]	; 0x134
    }
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f507 779e 	add.w	r7, r7, #316	; 0x13c
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8002ed4:	4770      	bx	lr
	...

08002ed8 <_ZN13geometry_msgs10Quaternion7getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Quaternion"; };
 8002ed8:	b480      	push	{r7}
 8002eda:	b083      	sub	sp, #12
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
 8002ee0:	4b03      	ldr	r3, [pc, #12]	; (8002ef0 <_ZN13geometry_msgs10Quaternion7getTypeEv+0x18>)
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	370c      	adds	r7, #12
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	08008f78 	.word	0x08008f78

08002ef4 <_ZN13geometry_msgs10Quaternion6getMD5Ev>:
    virtual const char * getMD5() override { return "a779879fadf0160734f906b8c19c7004"; };
 8002ef4:	b480      	push	{r7}
 8002ef6:	b083      	sub	sp, #12
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
 8002efc:	4b03      	ldr	r3, [pc, #12]	; (8002f0c <_ZN13geometry_msgs10Quaternion6getMD5Ev+0x18>)
 8002efe:	4618      	mov	r0, r3
 8002f00:	370c      	adds	r7, #12
 8002f02:	46bd      	mov	sp, r7
 8002f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f08:	4770      	bx	lr
 8002f0a:	bf00      	nop
 8002f0c:	08008f94 	.word	0x08008f94

08002f10 <_ZN13geometry_msgs7Vector3C1Ev>:
      typedef double _y_type;
      _y_type y;
      typedef double _z_type;
      _z_type z;

    Vector3():
 8002f10:	b580      	push	{r7, lr}
 8002f12:	b082      	sub	sp, #8
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
      x(0),
      y(0),
      z(0)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe f8b2 	bl	8001084 <_ZN3ros3MsgC1Ev>
 8002f20:	4a0e      	ldr	r2, [pc, #56]	; (8002f5c <_ZN13geometry_msgs7Vector3C1Ev+0x4c>)
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	601a      	str	r2, [r3, #0]
 8002f26:	6879      	ldr	r1, [r7, #4]
 8002f28:	f04f 0200 	mov.w	r2, #0
 8002f2c:	f04f 0300 	mov.w	r3, #0
 8002f30:	e9c1 2302 	strd	r2, r3, [r1, #8]
 8002f34:	6879      	ldr	r1, [r7, #4]
 8002f36:	f04f 0200 	mov.w	r2, #0
 8002f3a:	f04f 0300 	mov.w	r3, #0
 8002f3e:	e9c1 2304 	strd	r2, r3, [r1, #16]
 8002f42:	6879      	ldr	r1, [r7, #4]
 8002f44:	f04f 0200 	mov.w	r2, #0
 8002f48:	f04f 0300 	mov.w	r3, #0
 8002f4c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    {
    }
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	4618      	mov	r0, r3
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}
 8002f5a:	bf00      	nop
 8002f5c:	080090b8 	.word	0x080090b8

08002f60 <_ZNK13geometry_msgs7Vector39serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 8002f60:	b480      	push	{r7}
 8002f62:	b08b      	sub	sp, #44	; 0x2c
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	6078      	str	r0, [r7, #4]
 8002f68:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 8002f6a:	2300      	movs	r3, #0
 8002f6c:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.real = this->x;
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8002f74:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_x.base >> (8 * 0)) & 0xFF;
 8002f78:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002f7c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f7e:	6838      	ldr	r0, [r7, #0]
 8002f80:	4401      	add	r1, r0
 8002f82:	b2d3      	uxtb	r3, r2
 8002f84:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_x.base >> (8 * 1)) & 0xFF;
 8002f86:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002f8a:	f04f 0200 	mov.w	r2, #0
 8002f8e:	f04f 0300 	mov.w	r3, #0
 8002f92:	0a02      	lsrs	r2, r0, #8
 8002f94:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8002f98:	0a0b      	lsrs	r3, r1, #8
 8002f9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f9c:	3101      	adds	r1, #1
 8002f9e:	6838      	ldr	r0, [r7, #0]
 8002fa0:	4401      	add	r1, r0
 8002fa2:	b2d3      	uxtb	r3, r2
 8002fa4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_x.base >> (8 * 2)) & 0xFF;
 8002fa6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002faa:	f04f 0200 	mov.w	r2, #0
 8002fae:	f04f 0300 	mov.w	r3, #0
 8002fb2:	0c02      	lsrs	r2, r0, #16
 8002fb4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8002fb8:	0c0b      	lsrs	r3, r1, #16
 8002fba:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fbc:	3102      	adds	r1, #2
 8002fbe:	6838      	ldr	r0, [r7, #0]
 8002fc0:	4401      	add	r1, r0
 8002fc2:	b2d3      	uxtb	r3, r2
 8002fc4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_x.base >> (8 * 3)) & 0xFF;
 8002fc6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fca:	f04f 0200 	mov.w	r2, #0
 8002fce:	f04f 0300 	mov.w	r3, #0
 8002fd2:	0e02      	lsrs	r2, r0, #24
 8002fd4:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8002fd8:	0e0b      	lsrs	r3, r1, #24
 8002fda:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002fdc:	3103      	adds	r1, #3
 8002fde:	6838      	ldr	r0, [r7, #0]
 8002fe0:	4401      	add	r1, r0
 8002fe2:	b2d3      	uxtb	r3, r2
 8002fe4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_x.base >> (8 * 4)) & 0xFF;
 8002fe6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002fea:	f04f 0200 	mov.w	r2, #0
 8002fee:	f04f 0300 	mov.w	r3, #0
 8002ff2:	000a      	movs	r2, r1
 8002ff4:	2300      	movs	r3, #0
 8002ff6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ff8:	3104      	adds	r1, #4
 8002ffa:	6838      	ldr	r0, [r7, #0]
 8002ffc:	4401      	add	r1, r0
 8002ffe:	b2d3      	uxtb	r3, r2
 8003000:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_x.base >> (8 * 5)) & 0xFF;
 8003002:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003006:	f04f 0200 	mov.w	r2, #0
 800300a:	f04f 0300 	mov.w	r3, #0
 800300e:	0a0a      	lsrs	r2, r1, #8
 8003010:	2300      	movs	r3, #0
 8003012:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003014:	3105      	adds	r1, #5
 8003016:	6838      	ldr	r0, [r7, #0]
 8003018:	4401      	add	r1, r0
 800301a:	b2d3      	uxtb	r3, r2
 800301c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_x.base >> (8 * 6)) & 0xFF;
 800301e:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003022:	f04f 0200 	mov.w	r2, #0
 8003026:	f04f 0300 	mov.w	r3, #0
 800302a:	0c0a      	lsrs	r2, r1, #16
 800302c:	2300      	movs	r3, #0
 800302e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003030:	3106      	adds	r1, #6
 8003032:	6838      	ldr	r0, [r7, #0]
 8003034:	4401      	add	r1, r0
 8003036:	b2d3      	uxtb	r3, r2
 8003038:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_x.base >> (8 * 7)) & 0xFF;
 800303a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800303e:	f04f 0200 	mov.w	r2, #0
 8003042:	f04f 0300 	mov.w	r3, #0
 8003046:	0e0a      	lsrs	r2, r1, #24
 8003048:	2300      	movs	r3, #0
 800304a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800304c:	3107      	adds	r1, #7
 800304e:	6838      	ldr	r0, [r7, #0]
 8003050:	4401      	add	r1, r0
 8003052:	b2d3      	uxtb	r3, r2
 8003054:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->x);
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	3308      	adds	r3, #8
 800305a:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.real = this->y;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8003062:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_y.base >> (8 * 0)) & 0xFF;
 8003066:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800306a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800306c:	6838      	ldr	r0, [r7, #0]
 800306e:	4401      	add	r1, r0
 8003070:	b2d3      	uxtb	r3, r2
 8003072:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_y.base >> (8 * 1)) & 0xFF;
 8003074:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003078:	f04f 0200 	mov.w	r2, #0
 800307c:	f04f 0300 	mov.w	r3, #0
 8003080:	0a02      	lsrs	r2, r0, #8
 8003082:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003086:	0a0b      	lsrs	r3, r1, #8
 8003088:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800308a:	3101      	adds	r1, #1
 800308c:	6838      	ldr	r0, [r7, #0]
 800308e:	4401      	add	r1, r0
 8003090:	b2d3      	uxtb	r3, r2
 8003092:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_y.base >> (8 * 2)) & 0xFF;
 8003094:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	0c02      	lsrs	r2, r0, #16
 80030a2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80030a6:	0c0b      	lsrs	r3, r1, #16
 80030a8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030aa:	3102      	adds	r1, #2
 80030ac:	6838      	ldr	r0, [r7, #0]
 80030ae:	4401      	add	r1, r0
 80030b0:	b2d3      	uxtb	r3, r2
 80030b2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_y.base >> (8 * 3)) & 0xFF;
 80030b4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030b8:	f04f 0200 	mov.w	r2, #0
 80030bc:	f04f 0300 	mov.w	r3, #0
 80030c0:	0e02      	lsrs	r2, r0, #24
 80030c2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80030c6:	0e0b      	lsrs	r3, r1, #24
 80030c8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030ca:	3103      	adds	r1, #3
 80030cc:	6838      	ldr	r0, [r7, #0]
 80030ce:	4401      	add	r1, r0
 80030d0:	b2d3      	uxtb	r3, r2
 80030d2:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_y.base >> (8 * 4)) & 0xFF;
 80030d4:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030d8:	f04f 0200 	mov.w	r2, #0
 80030dc:	f04f 0300 	mov.w	r3, #0
 80030e0:	000a      	movs	r2, r1
 80030e2:	2300      	movs	r3, #0
 80030e4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80030e6:	3104      	adds	r1, #4
 80030e8:	6838      	ldr	r0, [r7, #0]
 80030ea:	4401      	add	r1, r0
 80030ec:	b2d3      	uxtb	r3, r2
 80030ee:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_y.base >> (8 * 5)) & 0xFF;
 80030f0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80030f4:	f04f 0200 	mov.w	r2, #0
 80030f8:	f04f 0300 	mov.w	r3, #0
 80030fc:	0a0a      	lsrs	r2, r1, #8
 80030fe:	2300      	movs	r3, #0
 8003100:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003102:	3105      	adds	r1, #5
 8003104:	6838      	ldr	r0, [r7, #0]
 8003106:	4401      	add	r1, r0
 8003108:	b2d3      	uxtb	r3, r2
 800310a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_y.base >> (8 * 6)) & 0xFF;
 800310c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003110:	f04f 0200 	mov.w	r2, #0
 8003114:	f04f 0300 	mov.w	r3, #0
 8003118:	0c0a      	lsrs	r2, r1, #16
 800311a:	2300      	movs	r3, #0
 800311c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800311e:	3106      	adds	r1, #6
 8003120:	6838      	ldr	r0, [r7, #0]
 8003122:	4401      	add	r1, r0
 8003124:	b2d3      	uxtb	r3, r2
 8003126:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_y.base >> (8 * 7)) & 0xFF;
 8003128:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800312c:	f04f 0200 	mov.w	r2, #0
 8003130:	f04f 0300 	mov.w	r3, #0
 8003134:	0e0a      	lsrs	r2, r1, #24
 8003136:	2300      	movs	r3, #0
 8003138:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800313a:	3107      	adds	r1, #7
 800313c:	6838      	ldr	r0, [r7, #0]
 800313e:	4401      	add	r1, r0
 8003140:	b2d3      	uxtb	r3, r2
 8003142:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->y);
 8003144:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003146:	3308      	adds	r3, #8
 8003148:	627b      	str	r3, [r7, #36]	; 0x24
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.real = this->z;
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003150:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_z.base >> (8 * 0)) & 0xFF;
 8003154:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003158:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800315a:	6838      	ldr	r0, [r7, #0]
 800315c:	4401      	add	r1, r0
 800315e:	b2d3      	uxtb	r3, r2
 8003160:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_z.base >> (8 * 1)) & 0xFF;
 8003162:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003166:	f04f 0200 	mov.w	r2, #0
 800316a:	f04f 0300 	mov.w	r3, #0
 800316e:	0a02      	lsrs	r2, r0, #8
 8003170:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003174:	0a0b      	lsrs	r3, r1, #8
 8003176:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003178:	3101      	adds	r1, #1
 800317a:	6838      	ldr	r0, [r7, #0]
 800317c:	4401      	add	r1, r0
 800317e:	b2d3      	uxtb	r3, r2
 8003180:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_z.base >> (8 * 2)) & 0xFF;
 8003182:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003186:	f04f 0200 	mov.w	r2, #0
 800318a:	f04f 0300 	mov.w	r3, #0
 800318e:	0c02      	lsrs	r2, r0, #16
 8003190:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003194:	0c0b      	lsrs	r3, r1, #16
 8003196:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003198:	3102      	adds	r1, #2
 800319a:	6838      	ldr	r0, [r7, #0]
 800319c:	4401      	add	r1, r0
 800319e:	b2d3      	uxtb	r3, r2
 80031a0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_z.base >> (8 * 3)) & 0xFF;
 80031a2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031a6:	f04f 0200 	mov.w	r2, #0
 80031aa:	f04f 0300 	mov.w	r3, #0
 80031ae:	0e02      	lsrs	r2, r0, #24
 80031b0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80031b4:	0e0b      	lsrs	r3, r1, #24
 80031b6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031b8:	3103      	adds	r1, #3
 80031ba:	6838      	ldr	r0, [r7, #0]
 80031bc:	4401      	add	r1, r0
 80031be:	b2d3      	uxtb	r3, r2
 80031c0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_z.base >> (8 * 4)) & 0xFF;
 80031c2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031c6:	f04f 0200 	mov.w	r2, #0
 80031ca:	f04f 0300 	mov.w	r3, #0
 80031ce:	000a      	movs	r2, r1
 80031d0:	2300      	movs	r3, #0
 80031d2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031d4:	3104      	adds	r1, #4
 80031d6:	6838      	ldr	r0, [r7, #0]
 80031d8:	4401      	add	r1, r0
 80031da:	b2d3      	uxtb	r3, r2
 80031dc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_z.base >> (8 * 5)) & 0xFF;
 80031de:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031e2:	f04f 0200 	mov.w	r2, #0
 80031e6:	f04f 0300 	mov.w	r3, #0
 80031ea:	0a0a      	lsrs	r2, r1, #8
 80031ec:	2300      	movs	r3, #0
 80031ee:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80031f0:	3105      	adds	r1, #5
 80031f2:	6838      	ldr	r0, [r7, #0]
 80031f4:	4401      	add	r1, r0
 80031f6:	b2d3      	uxtb	r3, r2
 80031f8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_z.base >> (8 * 6)) & 0xFF;
 80031fa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80031fe:	f04f 0200 	mov.w	r2, #0
 8003202:	f04f 0300 	mov.w	r3, #0
 8003206:	0c0a      	lsrs	r2, r1, #16
 8003208:	2300      	movs	r3, #0
 800320a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800320c:	3106      	adds	r1, #6
 800320e:	6838      	ldr	r0, [r7, #0]
 8003210:	4401      	add	r1, r0
 8003212:	b2d3      	uxtb	r3, r2
 8003214:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_z.base >> (8 * 7)) & 0xFF;
 8003216:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800321a:	f04f 0200 	mov.w	r2, #0
 800321e:	f04f 0300 	mov.w	r3, #0
 8003222:	0e0a      	lsrs	r2, r1, #24
 8003224:	2300      	movs	r3, #0
 8003226:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003228:	3107      	adds	r1, #7
 800322a:	6838      	ldr	r0, [r7, #0]
 800322c:	4401      	add	r1, r0
 800322e:	b2d3      	uxtb	r3, r2
 8003230:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->z);
 8003232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003234:	3308      	adds	r3, #8
 8003236:	627b      	str	r3, [r7, #36]	; 0x24
      return offset;
 8003238:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }
 800323a:	4618      	mov	r0, r3
 800323c:	372c      	adds	r7, #44	; 0x2c
 800323e:	46bd      	mov	sp, r7
 8003240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003244:	4770      	bx	lr

08003246 <_ZN13geometry_msgs7Vector311deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003246:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800324a:	b0bb      	sub	sp, #236	; 0xec
 800324c:	af00      	add	r7, sp, #0
 800324e:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4
 8003252:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
    {
      int offset = 0;
 8003256:	2300      	movs	r3, #0
 8003258:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_x;
      u_x.base = 0;
 800325c:	f04f 0200 	mov.w	r2, #0
 8003260:	f04f 0300 	mov.w	r3, #0
 8003264:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003268:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800326c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003270:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003274:	4413      	add	r3, r2
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	b2da      	uxtb	r2, r3
 800327a:	f04f 0300 	mov.w	r3, #0
 800327e:	ea40 0402 	orr.w	r4, r0, r2
 8003282:	ea41 0503 	orr.w	r5, r1, r3
 8003286:	e9c7 4536 	strd	r4, r5, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 800328a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800328e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003292:	1c5a      	adds	r2, r3, #1
 8003294:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003298:	4413      	add	r3, r2
 800329a:	781b      	ldrb	r3, [r3, #0]
 800329c:	b2da      	uxtb	r2, r3
 800329e:	f04f 0300 	mov.w	r3, #0
 80032a2:	f04f 0000 	mov.w	r0, #0
 80032a6:	f04f 0100 	mov.w	r1, #0
 80032aa:	0219      	lsls	r1, r3, #8
 80032ac:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 80032b0:	0210      	lsls	r0, r2, #8
 80032b2:	ea44 0a00 	orr.w	sl, r4, r0
 80032b6:	ea45 0b01 	orr.w	fp, r5, r1
 80032ba:	e9c7 ab36 	strd	sl, fp, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80032be:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80032c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80032c6:	1c9a      	adds	r2, r3, #2
 80032c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032cc:	4413      	add	r3, r2
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	b2da      	uxtb	r2, r3
 80032d2:	f04f 0300 	mov.w	r3, #0
 80032d6:	f04f 0000 	mov.w	r0, #0
 80032da:	f04f 0100 	mov.w	r1, #0
 80032de:	0419      	lsls	r1, r3, #16
 80032e0:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80032e4:	0410      	lsls	r0, r2, #16
 80032e6:	ea44 0300 	orr.w	r3, r4, r0
 80032ea:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80032ee:	ea45 0301 	orr.w	r3, r5, r1
 80032f2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 80032f6:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 80032fa:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80032fe:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003306:	1cda      	adds	r2, r3, #3
 8003308:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800330c:	4413      	add	r3, r2
 800330e:	781b      	ldrb	r3, [r3, #0]
 8003310:	b2da      	uxtb	r2, r3
 8003312:	f04f 0300 	mov.w	r3, #0
 8003316:	ea4f 2912 	mov.w	r9, r2, lsr #8
 800331a:	ea4f 6802 	mov.w	r8, r2, lsl #24
 800331e:	ea40 0308 	orr.w	r3, r0, r8
 8003322:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003326:	ea41 0309 	orr.w	r3, r1, r9
 800332a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800332e:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8003332:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003336:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800333a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800333e:	1d1a      	adds	r2, r3, #4
 8003340:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003344:	4413      	add	r3, r2
 8003346:	781b      	ldrb	r3, [r3, #0]
 8003348:	b2da      	uxtb	r2, r3
 800334a:	f04f 0300 	mov.w	r3, #0
 800334e:	f04f 0000 	mov.w	r0, #0
 8003352:	f04f 0100 	mov.w	r1, #0
 8003356:	0011      	movs	r1, r2
 8003358:	2000      	movs	r0, #0
 800335a:	ea44 0300 	orr.w	r3, r4, r0
 800335e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003362:	ea45 0301 	orr.w	r3, r5, r1
 8003366:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800336a:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 800336e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003372:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003376:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800337a:	1d5a      	adds	r2, r3, #5
 800337c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003380:	4413      	add	r3, r2
 8003382:	781b      	ldrb	r3, [r3, #0]
 8003384:	b2da      	uxtb	r2, r3
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	f04f 0000 	mov.w	r0, #0
 800338e:	f04f 0100 	mov.w	r1, #0
 8003392:	0211      	lsls	r1, r2, #8
 8003394:	2000      	movs	r0, #0
 8003396:	ea44 0300 	orr.w	r3, r4, r0
 800339a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800339e:	ea45 0301 	orr.w	r3, r5, r1
 80033a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 80033a6:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 80033aa:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 80033ae:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80033b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033b6:	1d9a      	adds	r2, r3, #6
 80033b8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033bc:	4413      	add	r3, r2
 80033be:	781b      	ldrb	r3, [r3, #0]
 80033c0:	b2da      	uxtb	r2, r3
 80033c2:	f04f 0300 	mov.w	r3, #0
 80033c6:	f04f 0000 	mov.w	r0, #0
 80033ca:	f04f 0100 	mov.w	r1, #0
 80033ce:	0411      	lsls	r1, r2, #16
 80033d0:	2000      	movs	r0, #0
 80033d2:	ea44 0300 	orr.w	r3, r4, r0
 80033d6:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80033da:	ea45 0301 	orr.w	r3, r5, r1
 80033de:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80033e2:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 80033e6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_x.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80033ea:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80033ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80033f2:	1dda      	adds	r2, r3, #7
 80033f4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80033f8:	4413      	add	r3, r2
 80033fa:	781b      	ldrb	r3, [r3, #0]
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	f04f 0300 	mov.w	r3, #0
 8003402:	f04f 0000 	mov.w	r0, #0
 8003406:	f04f 0100 	mov.w	r1, #0
 800340a:	0611      	lsls	r1, r2, #24
 800340c:	2000      	movs	r0, #0
 800340e:	ea44 0300 	orr.w	r3, r4, r0
 8003412:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003416:	ea45 0301 	orr.w	r3, r5, r1
 800341a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800341e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8003422:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->x = u_x.real;
 8003426:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 800342a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800342e:	e9c3 0102 	strd	r0, r1, [r3, #8]
      offset += sizeof(this->x);
 8003432:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003436:	3308      	adds	r3, #8
 8003438:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_y;
      u_y.base = 0;
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	f04f 0300 	mov.w	r3, #0
 8003444:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003448:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800344c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003450:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003454:	4413      	add	r3, r2
 8003456:	781b      	ldrb	r3, [r3, #0]
 8003458:	b2da      	uxtb	r2, r3
 800345a:	f04f 0300 	mov.w	r3, #0
 800345e:	ea40 0402 	orr.w	r4, r0, r2
 8003462:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003466:	430b      	orrs	r3, r1
 8003468:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 800346c:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003470:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003474:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003478:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800347c:	1c5a      	adds	r2, r3, #1
 800347e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003482:	4413      	add	r3, r2
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b2da      	uxtb	r2, r3
 8003488:	f04f 0300 	mov.w	r3, #0
 800348c:	f04f 0000 	mov.w	r0, #0
 8003490:	f04f 0100 	mov.w	r1, #0
 8003494:	0219      	lsls	r1, r3, #8
 8003496:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800349a:	0210      	lsls	r0, r2, #8
 800349c:	ea44 0300 	orr.w	r3, r4, r0
 80034a0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80034a4:	ea45 0301 	orr.w	r3, r5, r1
 80034a8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80034ac:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 80034b0:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80034b4:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80034b8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034bc:	1c9a      	adds	r2, r3, #2
 80034be:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034c2:	4413      	add	r3, r2
 80034c4:	781b      	ldrb	r3, [r3, #0]
 80034c6:	b2da      	uxtb	r2, r3
 80034c8:	f04f 0300 	mov.w	r3, #0
 80034cc:	f04f 0000 	mov.w	r0, #0
 80034d0:	f04f 0100 	mov.w	r1, #0
 80034d4:	0419      	lsls	r1, r3, #16
 80034d6:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80034da:	0410      	lsls	r0, r2, #16
 80034dc:	ea44 0300 	orr.w	r3, r4, r0
 80034e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80034e2:	ea45 0301 	orr.w	r3, r5, r1
 80034e6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80034e8:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 80034ec:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80034f0:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80034f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80034f8:	1cda      	adds	r2, r3, #3
 80034fa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80034fe:	4413      	add	r3, r2
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b2da      	uxtb	r2, r3
 8003504:	f04f 0300 	mov.w	r3, #0
 8003508:	0a14      	lsrs	r4, r2, #8
 800350a:	677c      	str	r4, [r7, #116]	; 0x74
 800350c:	0613      	lsls	r3, r2, #24
 800350e:	673b      	str	r3, [r7, #112]	; 0x70
 8003510:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8003514:	4623      	mov	r3, r4
 8003516:	4303      	orrs	r3, r0
 8003518:	66bb      	str	r3, [r7, #104]	; 0x68
 800351a:	462b      	mov	r3, r5
 800351c:	430b      	orrs	r3, r1
 800351e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003520:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003524:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003528:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800352c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003530:	1d1a      	adds	r2, r3, #4
 8003532:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003536:	4413      	add	r3, r2
 8003538:	781b      	ldrb	r3, [r3, #0]
 800353a:	b2da      	uxtb	r2, r3
 800353c:	f04f 0300 	mov.w	r3, #0
 8003540:	f04f 0000 	mov.w	r0, #0
 8003544:	f04f 0100 	mov.w	r1, #0
 8003548:	0011      	movs	r1, r2
 800354a:	2000      	movs	r0, #0
 800354c:	ea44 0300 	orr.w	r3, r4, r0
 8003550:	663b      	str	r3, [r7, #96]	; 0x60
 8003552:	ea45 0301 	orr.w	r3, r5, r1
 8003556:	667b      	str	r3, [r7, #100]	; 0x64
 8003558:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 800355c:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003560:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8003564:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003568:	1d5a      	adds	r2, r3, #5
 800356a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800356e:	4413      	add	r3, r2
 8003570:	781b      	ldrb	r3, [r3, #0]
 8003572:	b2da      	uxtb	r2, r3
 8003574:	f04f 0300 	mov.w	r3, #0
 8003578:	f04f 0000 	mov.w	r0, #0
 800357c:	f04f 0100 	mov.w	r1, #0
 8003580:	0211      	lsls	r1, r2, #8
 8003582:	2000      	movs	r0, #0
 8003584:	ea44 0300 	orr.w	r3, r4, r0
 8003588:	65bb      	str	r3, [r7, #88]	; 0x58
 800358a:	ea45 0301 	orr.w	r3, r5, r1
 800358e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003590:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 8003594:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003598:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800359c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035a0:	1d9a      	adds	r2, r3, #6
 80035a2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035a6:	4413      	add	r3, r2
 80035a8:	781b      	ldrb	r3, [r3, #0]
 80035aa:	b2da      	uxtb	r2, r3
 80035ac:	f04f 0300 	mov.w	r3, #0
 80035b0:	f04f 0000 	mov.w	r0, #0
 80035b4:	f04f 0100 	mov.w	r1, #0
 80035b8:	0411      	lsls	r1, r2, #16
 80035ba:	2000      	movs	r0, #0
 80035bc:	ea44 0300 	orr.w	r3, r4, r0
 80035c0:	653b      	str	r3, [r7, #80]	; 0x50
 80035c2:	ea45 0301 	orr.w	r3, r5, r1
 80035c6:	657b      	str	r3, [r7, #84]	; 0x54
 80035c8:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80035cc:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_y.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80035d0:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80035d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80035d8:	1dda      	adds	r2, r3, #7
 80035da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80035de:	4413      	add	r3, r2
 80035e0:	781b      	ldrb	r3, [r3, #0]
 80035e2:	b2da      	uxtb	r2, r3
 80035e4:	f04f 0300 	mov.w	r3, #0
 80035e8:	f04f 0000 	mov.w	r0, #0
 80035ec:	f04f 0100 	mov.w	r1, #0
 80035f0:	0611      	lsls	r1, r2, #24
 80035f2:	2000      	movs	r0, #0
 80035f4:	ea44 0300 	orr.w	r3, r4, r0
 80035f8:	64bb      	str	r3, [r7, #72]	; 0x48
 80035fa:	ea45 0301 	orr.w	r3, r5, r1
 80035fe:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003600:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8003604:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->y = u_y.real;
 8003608:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800360c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003610:	e9c3 0104 	strd	r0, r1, [r3, #16]
      offset += sizeof(this->y);
 8003614:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003618:	3308      	adds	r3, #8
 800361a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
      union {
        double real;
        uint64_t base;
      } u_z;
      u_z.base = 0;
 800361e:	f04f 0200 	mov.w	r2, #0
 8003622:	f04f 0300 	mov.w	r3, #0
 8003626:	e9c7 2332 	strd	r2, r3, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800362a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800362e:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8003632:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003636:	4413      	add	r3, r2
 8003638:	781b      	ldrb	r3, [r3, #0]
 800363a:	b2da      	uxtb	r2, r3
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	ea40 0402 	orr.w	r4, r0, r2
 8003644:	643c      	str	r4, [r7, #64]	; 0x40
 8003646:	430b      	orrs	r3, r1
 8003648:	647b      	str	r3, [r7, #68]	; 0x44
 800364a:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 800364e:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003652:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8003656:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800365a:	1c5a      	adds	r2, r3, #1
 800365c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8003660:	4413      	add	r3, r2
 8003662:	781b      	ldrb	r3, [r3, #0]
 8003664:	b2da      	uxtb	r2, r3
 8003666:	f04f 0300 	mov.w	r3, #0
 800366a:	f04f 0000 	mov.w	r0, #0
 800366e:	f04f 0100 	mov.w	r1, #0
 8003672:	0219      	lsls	r1, r3, #8
 8003674:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003678:	0210      	lsls	r0, r2, #8
 800367a:	ea44 0300 	orr.w	r3, r4, r0
 800367e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003680:	ea45 0301 	orr.w	r3, r5, r1
 8003684:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003686:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 800368a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 800368e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	; 0xc8
 8003692:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003696:	1c9a      	adds	r2, r3, #2
 8003698:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800369c:	4413      	add	r3, r2
 800369e:	781b      	ldrb	r3, [r3, #0]
 80036a0:	b2da      	uxtb	r2, r3
 80036a2:	f04f 0300 	mov.w	r3, #0
 80036a6:	f04f 0000 	mov.w	r0, #0
 80036aa:	f04f 0100 	mov.w	r1, #0
 80036ae:	0419      	lsls	r1, r3, #16
 80036b0:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80036b4:	0410      	lsls	r0, r2, #16
 80036b6:	ea44 0300 	orr.w	r3, r4, r0
 80036ba:	633b      	str	r3, [r7, #48]	; 0x30
 80036bc:	ea45 0301 	orr.w	r3, r5, r1
 80036c0:	637b      	str	r3, [r7, #52]	; 0x34
 80036c2:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80036c6:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80036ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80036ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80036d2:	1cda      	adds	r2, r3, #3
 80036d4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80036d8:	4413      	add	r3, r2
 80036da:	781b      	ldrb	r3, [r3, #0]
 80036dc:	b2da      	uxtb	r2, r3
 80036de:	f04f 0300 	mov.w	r3, #0
 80036e2:	0a14      	lsrs	r4, r2, #8
 80036e4:	62fc      	str	r4, [r7, #44]	; 0x2c
 80036e6:	0613      	lsls	r3, r2, #24
 80036e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ea:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 80036ee:	4623      	mov	r3, r4
 80036f0:	4303      	orrs	r3, r0
 80036f2:	623b      	str	r3, [r7, #32]
 80036f4:	462b      	mov	r3, r5
 80036f6:	430b      	orrs	r3, r1
 80036f8:	627b      	str	r3, [r7, #36]	; 0x24
 80036fa:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80036fe:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003702:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800370a:	3304      	adds	r3, #4
 800370c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003710:	4413      	add	r3, r2
 8003712:	781b      	ldrb	r3, [r3, #0]
 8003714:	b2dc      	uxtb	r4, r3
 8003716:	f04f 0500 	mov.w	r5, #0
 800371a:	f04f 0200 	mov.w	r2, #0
 800371e:	f04f 0300 	mov.w	r3, #0
 8003722:	0023      	movs	r3, r4
 8003724:	2200      	movs	r2, #0
 8003726:	ea40 0402 	orr.w	r4, r0, r2
 800372a:	61bc      	str	r4, [r7, #24]
 800372c:	430b      	orrs	r3, r1
 800372e:	61fb      	str	r3, [r7, #28]
 8003730:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 8003734:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003738:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800373c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003740:	3305      	adds	r3, #5
 8003742:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8003746:	4413      	add	r3, r2
 8003748:	781b      	ldrb	r3, [r3, #0]
 800374a:	b2dc      	uxtb	r4, r3
 800374c:	f04f 0500 	mov.w	r5, #0
 8003750:	f04f 0200 	mov.w	r2, #0
 8003754:	f04f 0300 	mov.w	r3, #0
 8003758:	0223      	lsls	r3, r4, #8
 800375a:	2200      	movs	r2, #0
 800375c:	ea40 0402 	orr.w	r4, r0, r2
 8003760:	613c      	str	r4, [r7, #16]
 8003762:	430b      	orrs	r3, r1
 8003764:	617b      	str	r3, [r7, #20]
 8003766:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 800376a:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 800376e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003772:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8003776:	3306      	adds	r3, #6
 8003778:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800377c:	4413      	add	r3, r2
 800377e:	781b      	ldrb	r3, [r3, #0]
 8003780:	b2dc      	uxtb	r4, r3
 8003782:	f04f 0500 	mov.w	r5, #0
 8003786:	f04f 0200 	mov.w	r2, #0
 800378a:	f04f 0300 	mov.w	r3, #0
 800378e:	0423      	lsls	r3, r4, #16
 8003790:	2200      	movs	r2, #0
 8003792:	ea40 0402 	orr.w	r4, r0, r2
 8003796:	60bc      	str	r4, [r7, #8]
 8003798:	430b      	orrs	r3, r1
 800379a:	60fb      	str	r3, [r7, #12]
 800379c:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80037a0:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      u_z.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80037a4:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80037a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ac:	3307      	adds	r3, #7
 80037ae:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80037b2:	4413      	add	r3, r2
 80037b4:	781b      	ldrb	r3, [r3, #0]
 80037b6:	b2dc      	uxtb	r4, r3
 80037b8:	f04f 0500 	mov.w	r5, #0
 80037bc:	f04f 0200 	mov.w	r2, #0
 80037c0:	f04f 0300 	mov.w	r3, #0
 80037c4:	0623      	lsls	r3, r4, #24
 80037c6:	2200      	movs	r2, #0
 80037c8:	ea40 0402 	orr.w	r4, r0, r2
 80037cc:	603c      	str	r4, [r7, #0]
 80037ce:	430b      	orrs	r3, r1
 80037d0:	607b      	str	r3, [r7, #4]
 80037d2:	e9d7 3400 	ldrd	r3, r4, [r7]
 80037d6:	e9c7 3432 	strd	r3, r4, [r7, #200]	; 0xc8
      this->z = u_z.real;
 80037da:	e9d7 2332 	ldrd	r2, r3, [r7, #200]	; 0xc8
 80037de:	f8d7 10c4 	ldr.w	r1, [r7, #196]	; 0xc4
 80037e2:	e9c1 2306 	strd	r2, r3, [r1, #24]
      offset += sizeof(this->z);
 80037e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80037ea:	3308      	adds	r3, #8
 80037ec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
     return offset;
 80037f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
    }
 80037f4:	4618      	mov	r0, r3
 80037f6:	37ec      	adds	r7, #236	; 0xec
 80037f8:	46bd      	mov	sp, r7
 80037fa:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 80037fe:	4770      	bx	lr

08003800 <_ZN13geometry_msgs7Vector37getTypeEv>:

    virtual const char * getType() override { return "geometry_msgs/Vector3"; };
 8003800:	b480      	push	{r7}
 8003802:	b083      	sub	sp, #12
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
 8003808:	4b03      	ldr	r3, [pc, #12]	; (8003818 <_ZN13geometry_msgs7Vector37getTypeEv+0x18>)
 800380a:	4618      	mov	r0, r3
 800380c:	370c      	adds	r7, #12
 800380e:	46bd      	mov	sp, r7
 8003810:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003814:	4770      	bx	lr
 8003816:	bf00      	nop
 8003818:	08008fb8 	.word	0x08008fb8

0800381c <_ZN13geometry_msgs7Vector36getMD5Ev>:
    virtual const char * getMD5() override { return "4a842b65f413084dc2b10fb484ea7f17"; };
 800381c:	b480      	push	{r7}
 800381e:	b083      	sub	sp, #12
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	4b03      	ldr	r3, [pc, #12]	; (8003834 <_ZN13geometry_msgs7Vector36getMD5Ev+0x18>)
 8003826:	4618      	mov	r0, r3
 8003828:	370c      	adds	r7, #12
 800382a:	46bd      	mov	sp, r7
 800382c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003830:	4770      	bx	lr
 8003832:	bf00      	nop
 8003834:	08008fd0 	.word	0x08008fd0

08003838 <_ZN11sensor_msgs3ImuC1Ev>:
      double angular_velocity_covariance[9];
      typedef geometry_msgs::Vector3 _linear_acceleration_type;
      _linear_acceleration_type linear_acceleration;
      double linear_acceleration_covariance[9];

    Imu():
 8003838:	b580      	push	{r7, lr}
 800383a:	b082      	sub	sp, #8
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
      orientation(),
      orientation_covariance(),
      angular_velocity(),
      angular_velocity_covariance(),
      linear_acceleration(),
      linear_acceleration_covariance()
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	4618      	mov	r0, r3
 8003844:	f7fd fc1e 	bl	8001084 <_ZN3ros3MsgC1Ev>
 8003848:	4a24      	ldr	r2, [pc, #144]	; (80038dc <_ZN11sensor_msgs3ImuC1Ev+0xa4>)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	601a      	str	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	3304      	adds	r3, #4
 8003852:	4618      	mov	r0, r3
 8003854:	f7fe fbb6 	bl	8001fc4 <_ZN8std_msgs6HeaderC1Ev>
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	3318      	adds	r3, #24
 800385c:	4618      	mov	r0, r3
 800385e:	f7fe fd45 	bl	80022ec <_ZN13geometry_msgs10QuaternionC1Ev>
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	f103 0240 	add.w	r2, r3, #64	; 0x40
 8003868:	2308      	movs	r3, #8
 800386a:	2b00      	cmp	r3, #0
 800386c:	db08      	blt.n	8003880 <_ZN11sensor_msgs3ImuC1Ev+0x48>
 800386e:	f04f 0000 	mov.w	r0, #0
 8003872:	f04f 0100 	mov.w	r1, #0
 8003876:	e9c2 0100 	strd	r0, r1, [r2]
 800387a:	3208      	adds	r2, #8
 800387c:	3b01      	subs	r3, #1
 800387e:	e7f4      	b.n	800386a <_ZN11sensor_msgs3ImuC1Ev+0x32>
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	3388      	adds	r3, #136	; 0x88
 8003884:	4618      	mov	r0, r3
 8003886:	f7ff fb43 	bl	8002f10 <_ZN13geometry_msgs7Vector3C1Ev>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f103 02a8 	add.w	r2, r3, #168	; 0xa8
 8003890:	2308      	movs	r3, #8
 8003892:	2b00      	cmp	r3, #0
 8003894:	db08      	blt.n	80038a8 <_ZN11sensor_msgs3ImuC1Ev+0x70>
 8003896:	f04f 0000 	mov.w	r0, #0
 800389a:	f04f 0100 	mov.w	r1, #0
 800389e:	e9c2 0100 	strd	r0, r1, [r2]
 80038a2:	3208      	adds	r2, #8
 80038a4:	3b01      	subs	r3, #1
 80038a6:	e7f4      	b.n	8003892 <_ZN11sensor_msgs3ImuC1Ev+0x5a>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	33f0      	adds	r3, #240	; 0xf0
 80038ac:	4618      	mov	r0, r3
 80038ae:	f7ff fb2f 	bl	8002f10 <_ZN13geometry_msgs7Vector3C1Ev>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f503 7288 	add.w	r2, r3, #272	; 0x110
 80038b8:	2308      	movs	r3, #8
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	db08      	blt.n	80038d0 <_ZN11sensor_msgs3ImuC1Ev+0x98>
 80038be:	f04f 0000 	mov.w	r0, #0
 80038c2:	f04f 0100 	mov.w	r1, #0
 80038c6:	e9c2 0100 	strd	r0, r1, [r2]
 80038ca:	3208      	adds	r2, #8
 80038cc:	3b01      	subs	r3, #1
 80038ce:	e7f4      	b.n	80038ba <_ZN11sensor_msgs3ImuC1Ev+0x82>
    {
    }
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	4618      	mov	r0, r3
 80038d4:	3708      	adds	r7, #8
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bd80      	pop	{r7, pc}
 80038da:	bf00      	nop
 80038dc:	080090a0 	.word	0x080090a0

080038e0 <_ZNK11sensor_msgs3Imu9serializeEPh>:

    virtual int serialize(unsigned char *outbuffer) const override
 80038e0:	b580      	push	{r7, lr}
 80038e2:	b08c      	sub	sp, #48	; 0x30
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
 80038e8:	6039      	str	r1, [r7, #0]
    {
      int offset = 0;
 80038ea:	2300      	movs	r3, #0
 80038ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->header.serialize(outbuffer + offset);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	1d18      	adds	r0, r3, #4
 80038f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038f4:	683a      	ldr	r2, [r7, #0]
 80038f6:	4413      	add	r3, r2
 80038f8:	4619      	mov	r1, r3
 80038fa:	f7fe fb83 	bl	8002004 <_ZNK8std_msgs6Header9serializeEPh>
 80038fe:	4602      	mov	r2, r0
 8003900:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003902:	4413      	add	r3, r2
 8003904:	62fb      	str	r3, [r7, #44]	; 0x2c
      offset += this->orientation.serialize(outbuffer + offset);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f103 0018 	add.w	r0, r3, #24
 800390c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800390e:	683a      	ldr	r2, [r7, #0]
 8003910:	4413      	add	r3, r2
 8003912:	4619      	mov	r1, r3
 8003914:	f7fe fd18 	bl	8002348 <_ZNK13geometry_msgs10Quaternion9serializeEPh>
 8003918:	4602      	mov	r2, r0
 800391a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800391c:	4413      	add	r3, r2
 800391e:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003920:	2300      	movs	r3, #0
 8003922:	62bb      	str	r3, [r7, #40]	; 0x28
 8003924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003926:	2b08      	cmp	r3, #8
 8003928:	d87e      	bhi.n	8003a28 <_ZNK11sensor_msgs3Imu9serializeEPh+0x148>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.real = this->orientation_covariance[i];
 800392a:	687a      	ldr	r2, [r7, #4]
 800392c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800392e:	3308      	adds	r3, #8
 8003930:	00db      	lsls	r3, r3, #3
 8003932:	4413      	add	r3, r2
 8003934:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003938:	e9c7 2306 	strd	r2, r3, [r7, #24]
      *(outbuffer + offset + 0) = (u_orientation_covariancei.base >> (8 * 0)) & 0xFF;
 800393c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003940:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003942:	6838      	ldr	r0, [r7, #0]
 8003944:	4401      	add	r1, r0
 8003946:	b2d3      	uxtb	r3, r2
 8003948:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_orientation_covariancei.base >> (8 * 1)) & 0xFF;
 800394a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	f04f 0300 	mov.w	r3, #0
 8003956:	0a02      	lsrs	r2, r0, #8
 8003958:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800395c:	0a0b      	lsrs	r3, r1, #8
 800395e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003960:	3101      	adds	r1, #1
 8003962:	6838      	ldr	r0, [r7, #0]
 8003964:	4401      	add	r1, r0
 8003966:	b2d3      	uxtb	r3, r2
 8003968:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_orientation_covariancei.base >> (8 * 2)) & 0xFF;
 800396a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800396e:	f04f 0200 	mov.w	r2, #0
 8003972:	f04f 0300 	mov.w	r3, #0
 8003976:	0c02      	lsrs	r2, r0, #16
 8003978:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800397c:	0c0b      	lsrs	r3, r1, #16
 800397e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003980:	3102      	adds	r1, #2
 8003982:	6838      	ldr	r0, [r7, #0]
 8003984:	4401      	add	r1, r0
 8003986:	b2d3      	uxtb	r3, r2
 8003988:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_orientation_covariancei.base >> (8 * 3)) & 0xFF;
 800398a:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800398e:	f04f 0200 	mov.w	r2, #0
 8003992:	f04f 0300 	mov.w	r3, #0
 8003996:	0e02      	lsrs	r2, r0, #24
 8003998:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800399c:	0e0b      	lsrs	r3, r1, #24
 800399e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039a0:	3103      	adds	r1, #3
 80039a2:	6838      	ldr	r0, [r7, #0]
 80039a4:	4401      	add	r1, r0
 80039a6:	b2d3      	uxtb	r3, r2
 80039a8:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_orientation_covariancei.base >> (8 * 4)) & 0xFF;
 80039aa:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80039ae:	f04f 0200 	mov.w	r2, #0
 80039b2:	f04f 0300 	mov.w	r3, #0
 80039b6:	000a      	movs	r2, r1
 80039b8:	2300      	movs	r3, #0
 80039ba:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039bc:	3104      	adds	r1, #4
 80039be:	6838      	ldr	r0, [r7, #0]
 80039c0:	4401      	add	r1, r0
 80039c2:	b2d3      	uxtb	r3, r2
 80039c4:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_orientation_covariancei.base >> (8 * 5)) & 0xFF;
 80039c6:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80039ca:	f04f 0200 	mov.w	r2, #0
 80039ce:	f04f 0300 	mov.w	r3, #0
 80039d2:	0a0a      	lsrs	r2, r1, #8
 80039d4:	2300      	movs	r3, #0
 80039d6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039d8:	3105      	adds	r1, #5
 80039da:	6838      	ldr	r0, [r7, #0]
 80039dc:	4401      	add	r1, r0
 80039de:	b2d3      	uxtb	r3, r2
 80039e0:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_orientation_covariancei.base >> (8 * 6)) & 0xFF;
 80039e2:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80039e6:	f04f 0200 	mov.w	r2, #0
 80039ea:	f04f 0300 	mov.w	r3, #0
 80039ee:	0c0a      	lsrs	r2, r1, #16
 80039f0:	2300      	movs	r3, #0
 80039f2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80039f4:	3106      	adds	r1, #6
 80039f6:	6838      	ldr	r0, [r7, #0]
 80039f8:	4401      	add	r1, r0
 80039fa:	b2d3      	uxtb	r3, r2
 80039fc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_orientation_covariancei.base >> (8 * 7)) & 0xFF;
 80039fe:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003a02:	f04f 0200 	mov.w	r2, #0
 8003a06:	f04f 0300 	mov.w	r3, #0
 8003a0a:	0e0a      	lsrs	r2, r1, #24
 8003a0c:	2300      	movs	r3, #0
 8003a0e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a10:	3107      	adds	r1, #7
 8003a12:	6838      	ldr	r0, [r7, #0]
 8003a14:	4401      	add	r1, r0
 8003a16:	b2d3      	uxtb	r3, r2
 8003a18:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->orientation_covariance[i]);
 8003a1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a1c:	3308      	adds	r3, #8
 8003a1e:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003a20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003a22:	3301      	adds	r3, #1
 8003a24:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a26:	e77d      	b.n	8003924 <_ZNK11sensor_msgs3Imu9serializeEPh+0x44>
      }
      offset += this->angular_velocity.serialize(outbuffer + offset);
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8003a2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a30:	683a      	ldr	r2, [r7, #0]
 8003a32:	4413      	add	r3, r2
 8003a34:	4619      	mov	r1, r3
 8003a36:	f7ff fa93 	bl	8002f60 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003a3a:	4602      	mov	r2, r0
 8003a3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003a3e:	4413      	add	r3, r2
 8003a40:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003a42:	2300      	movs	r3, #0
 8003a44:	627b      	str	r3, [r7, #36]	; 0x24
 8003a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a48:	2b08      	cmp	r3, #8
 8003a4a:	d87e      	bhi.n	8003b4a <_ZNK11sensor_msgs3Imu9serializeEPh+0x26a>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.real = this->angular_velocity_covariance[i];
 8003a4c:	687a      	ldr	r2, [r7, #4]
 8003a4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a50:	3315      	adds	r3, #21
 8003a52:	00db      	lsls	r3, r3, #3
 8003a54:	4413      	add	r3, r2
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	e9c7 2304 	strd	r2, r3, [r7, #16]
      *(outbuffer + offset + 0) = (u_angular_velocity_covariancei.base >> (8 * 0)) & 0xFF;
 8003a5e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003a62:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a64:	6838      	ldr	r0, [r7, #0]
 8003a66:	4401      	add	r1, r0
 8003a68:	b2d3      	uxtb	r3, r2
 8003a6a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_angular_velocity_covariancei.base >> (8 * 1)) & 0xFF;
 8003a6c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	0a02      	lsrs	r2, r0, #8
 8003a7a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003a7e:	0a0b      	lsrs	r3, r1, #8
 8003a80:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003a82:	3101      	adds	r1, #1
 8003a84:	6838      	ldr	r0, [r7, #0]
 8003a86:	4401      	add	r1, r0
 8003a88:	b2d3      	uxtb	r3, r2
 8003a8a:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_angular_velocity_covariancei.base >> (8 * 2)) & 0xFF;
 8003a8c:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003a90:	f04f 0200 	mov.w	r2, #0
 8003a94:	f04f 0300 	mov.w	r3, #0
 8003a98:	0c02      	lsrs	r2, r0, #16
 8003a9a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003a9e:	0c0b      	lsrs	r3, r1, #16
 8003aa0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003aa2:	3102      	adds	r1, #2
 8003aa4:	6838      	ldr	r0, [r7, #0]
 8003aa6:	4401      	add	r1, r0
 8003aa8:	b2d3      	uxtb	r3, r2
 8003aaa:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_angular_velocity_covariancei.base >> (8 * 3)) & 0xFF;
 8003aac:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ab0:	f04f 0200 	mov.w	r2, #0
 8003ab4:	f04f 0300 	mov.w	r3, #0
 8003ab8:	0e02      	lsrs	r2, r0, #24
 8003aba:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003abe:	0e0b      	lsrs	r3, r1, #24
 8003ac0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ac2:	3103      	adds	r1, #3
 8003ac4:	6838      	ldr	r0, [r7, #0]
 8003ac6:	4401      	add	r1, r0
 8003ac8:	b2d3      	uxtb	r3, r2
 8003aca:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_angular_velocity_covariancei.base >> (8 * 4)) & 0xFF;
 8003acc:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003ad0:	f04f 0200 	mov.w	r2, #0
 8003ad4:	f04f 0300 	mov.w	r3, #0
 8003ad8:	000a      	movs	r2, r1
 8003ada:	2300      	movs	r3, #0
 8003adc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ade:	3104      	adds	r1, #4
 8003ae0:	6838      	ldr	r0, [r7, #0]
 8003ae2:	4401      	add	r1, r0
 8003ae4:	b2d3      	uxtb	r3, r2
 8003ae6:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_angular_velocity_covariancei.base >> (8 * 5)) & 0xFF;
 8003ae8:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003aec:	f04f 0200 	mov.w	r2, #0
 8003af0:	f04f 0300 	mov.w	r3, #0
 8003af4:	0a0a      	lsrs	r2, r1, #8
 8003af6:	2300      	movs	r3, #0
 8003af8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003afa:	3105      	adds	r1, #5
 8003afc:	6838      	ldr	r0, [r7, #0]
 8003afe:	4401      	add	r1, r0
 8003b00:	b2d3      	uxtb	r3, r2
 8003b02:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_angular_velocity_covariancei.base >> (8 * 6)) & 0xFF;
 8003b04:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b08:	f04f 0200 	mov.w	r2, #0
 8003b0c:	f04f 0300 	mov.w	r3, #0
 8003b10:	0c0a      	lsrs	r2, r1, #16
 8003b12:	2300      	movs	r3, #0
 8003b14:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b16:	3106      	adds	r1, #6
 8003b18:	6838      	ldr	r0, [r7, #0]
 8003b1a:	4401      	add	r1, r0
 8003b1c:	b2d3      	uxtb	r3, r2
 8003b1e:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_angular_velocity_covariancei.base >> (8 * 7)) & 0xFF;
 8003b20:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003b24:	f04f 0200 	mov.w	r2, #0
 8003b28:	f04f 0300 	mov.w	r3, #0
 8003b2c:	0e0a      	lsrs	r2, r1, #24
 8003b2e:	2300      	movs	r3, #0
 8003b30:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b32:	3107      	adds	r1, #7
 8003b34:	6838      	ldr	r0, [r7, #0]
 8003b36:	4401      	add	r1, r0
 8003b38:	b2d3      	uxtb	r3, r2
 8003b3a:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->angular_velocity_covariance[i]);
 8003b3c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b3e:	3308      	adds	r3, #8
 8003b40:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003b42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b44:	3301      	adds	r3, #1
 8003b46:	627b      	str	r3, [r7, #36]	; 0x24
 8003b48:	e77d      	b.n	8003a46 <_ZNK11sensor_msgs3Imu9serializeEPh+0x166>
      }
      offset += this->linear_acceleration.serialize(outbuffer + offset);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8003b50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	4413      	add	r3, r2
 8003b56:	4619      	mov	r1, r3
 8003b58:	f7ff fa02 	bl	8002f60 <_ZNK13geometry_msgs7Vector39serializeEPh>
 8003b5c:	4602      	mov	r2, r0
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	4413      	add	r3, r2
 8003b62:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003b64:	2300      	movs	r3, #0
 8003b66:	623b      	str	r3, [r7, #32]
 8003b68:	6a3b      	ldr	r3, [r7, #32]
 8003b6a:	2b08      	cmp	r3, #8
 8003b6c:	d87e      	bhi.n	8003c6c <_ZNK11sensor_msgs3Imu9serializeEPh+0x38c>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.real = this->linear_acceleration_covariance[i];
 8003b6e:	687a      	ldr	r2, [r7, #4]
 8003b70:	6a3b      	ldr	r3, [r7, #32]
 8003b72:	3322      	adds	r3, #34	; 0x22
 8003b74:	00db      	lsls	r3, r3, #3
 8003b76:	4413      	add	r3, r2
 8003b78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7c:	e9c7 2302 	strd	r2, r3, [r7, #8]
      *(outbuffer + offset + 0) = (u_linear_acceleration_covariancei.base >> (8 * 0)) & 0xFF;
 8003b80:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003b84:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003b86:	6838      	ldr	r0, [r7, #0]
 8003b88:	4401      	add	r1, r0
 8003b8a:	b2d3      	uxtb	r3, r2
 8003b8c:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 1) = (u_linear_acceleration_covariancei.base >> (8 * 1)) & 0xFF;
 8003b8e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003b92:	f04f 0200 	mov.w	r2, #0
 8003b96:	f04f 0300 	mov.w	r3, #0
 8003b9a:	0a02      	lsrs	r2, r0, #8
 8003b9c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8003ba0:	0a0b      	lsrs	r3, r1, #8
 8003ba2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003ba4:	3101      	adds	r1, #1
 8003ba6:	6838      	ldr	r0, [r7, #0]
 8003ba8:	4401      	add	r1, r0
 8003baa:	b2d3      	uxtb	r3, r2
 8003bac:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 2) = (u_linear_acceleration_covariancei.base >> (8 * 2)) & 0xFF;
 8003bae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bb2:	f04f 0200 	mov.w	r2, #0
 8003bb6:	f04f 0300 	mov.w	r3, #0
 8003bba:	0c02      	lsrs	r2, r0, #16
 8003bbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8003bc0:	0c0b      	lsrs	r3, r1, #16
 8003bc2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003bc4:	3102      	adds	r1, #2
 8003bc6:	6838      	ldr	r0, [r7, #0]
 8003bc8:	4401      	add	r1, r0
 8003bca:	b2d3      	uxtb	r3, r2
 8003bcc:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 3) = (u_linear_acceleration_covariancei.base >> (8 * 3)) & 0xFF;
 8003bce:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	0e02      	lsrs	r2, r0, #24
 8003bdc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003be0:	0e0b      	lsrs	r3, r1, #24
 8003be2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003be4:	3103      	adds	r1, #3
 8003be6:	6838      	ldr	r0, [r7, #0]
 8003be8:	4401      	add	r1, r0
 8003bea:	b2d3      	uxtb	r3, r2
 8003bec:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 4) = (u_linear_acceleration_covariancei.base >> (8 * 4)) & 0xFF;
 8003bee:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003bf2:	f04f 0200 	mov.w	r2, #0
 8003bf6:	f04f 0300 	mov.w	r3, #0
 8003bfa:	000a      	movs	r2, r1
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c00:	3104      	adds	r1, #4
 8003c02:	6838      	ldr	r0, [r7, #0]
 8003c04:	4401      	add	r1, r0
 8003c06:	b2d3      	uxtb	r3, r2
 8003c08:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 5) = (u_linear_acceleration_covariancei.base >> (8 * 5)) & 0xFF;
 8003c0a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c0e:	f04f 0200 	mov.w	r2, #0
 8003c12:	f04f 0300 	mov.w	r3, #0
 8003c16:	0a0a      	lsrs	r2, r1, #8
 8003c18:	2300      	movs	r3, #0
 8003c1a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c1c:	3105      	adds	r1, #5
 8003c1e:	6838      	ldr	r0, [r7, #0]
 8003c20:	4401      	add	r1, r0
 8003c22:	b2d3      	uxtb	r3, r2
 8003c24:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 6) = (u_linear_acceleration_covariancei.base >> (8 * 6)) & 0xFF;
 8003c26:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c2a:	f04f 0200 	mov.w	r2, #0
 8003c2e:	f04f 0300 	mov.w	r3, #0
 8003c32:	0c0a      	lsrs	r2, r1, #16
 8003c34:	2300      	movs	r3, #0
 8003c36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c38:	3106      	adds	r1, #6
 8003c3a:	6838      	ldr	r0, [r7, #0]
 8003c3c:	4401      	add	r1, r0
 8003c3e:	b2d3      	uxtb	r3, r2
 8003c40:	700b      	strb	r3, [r1, #0]
      *(outbuffer + offset + 7) = (u_linear_acceleration_covariancei.base >> (8 * 7)) & 0xFF;
 8003c42:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	f04f 0300 	mov.w	r3, #0
 8003c4e:	0e0a      	lsrs	r2, r1, #24
 8003c50:	2300      	movs	r3, #0
 8003c52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8003c54:	3107      	adds	r1, #7
 8003c56:	6838      	ldr	r0, [r7, #0]
 8003c58:	4401      	add	r1, r0
 8003c5a:	b2d3      	uxtb	r3, r2
 8003c5c:	700b      	strb	r3, [r1, #0]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 8003c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c60:	3308      	adds	r3, #8
 8003c62:	62fb      	str	r3, [r7, #44]	; 0x2c
      for( uint32_t i = 0; i < 9; i++){
 8003c64:	6a3b      	ldr	r3, [r7, #32]
 8003c66:	3301      	adds	r3, #1
 8003c68:	623b      	str	r3, [r7, #32]
 8003c6a:	e77d      	b.n	8003b68 <_ZNK11sensor_msgs3Imu9serializeEPh+0x288>
      }
      return offset;
 8003c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    }
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3730      	adds	r7, #48	; 0x30
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}

08003c76 <_ZN11sensor_msgs3Imu11deserializeEPh>:

    virtual int deserialize(unsigned char *inbuffer) override
 8003c76:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c7a:	b0be      	sub	sp, #248	; 0xf8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
 8003c82:	f8c7 10c8 	str.w	r1, [r7, #200]	; 0xc8
    {
      int offset = 0;
 8003c86:	2300      	movs	r3, #0
 8003c88:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += this->header.deserialize(inbuffer + offset);
 8003c8c:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003c90:	1d18      	adds	r0, r3, #4
 8003c92:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003c96:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003c9a:	4413      	add	r3, r2
 8003c9c:	4619      	mov	r1, r3
 8003c9e:	f7fe fa49 	bl	8002134 <_ZN8std_msgs6Header11deserializeEPh>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ca8:	4413      	add	r3, r2
 8003caa:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      offset += this->orientation.deserialize(inbuffer + offset);
 8003cae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003cb2:	f103 0018 	add.w	r0, r3, #24
 8003cb6:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003cba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cbe:	4413      	add	r3, r2
 8003cc0:	4619      	mov	r1, r3
 8003cc2:	f7fe fd2b 	bl	800271c <_ZN13geometry_msgs10Quaternion11deserializeEPh>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ccc:	4413      	add	r3, r2
 8003cce:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003cd8:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003cdc:	2b08      	cmp	r3, #8
 8003cde:	f200 8100 	bhi.w	8003ee2 <_ZN11sensor_msgs3Imu11deserializeEPh+0x26c>
      union {
        double real;
        uint64_t base;
      } u_orientation_covariancei;
      u_orientation_covariancei.base = 0;
 8003ce2:	f04f 0200 	mov.w	r2, #0
 8003ce6:	f04f 0300 	mov.w	r3, #0
 8003cea:	e9c7 2338 	strd	r2, r3, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003cee:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003cf2:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003cf6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003cfa:	4413      	add	r3, r2
 8003cfc:	781b      	ldrb	r3, [r3, #0]
 8003cfe:	b2da      	uxtb	r2, r3
 8003d00:	f04f 0300 	mov.w	r3, #0
 8003d04:	ea40 0402 	orr.w	r4, r0, r2
 8003d08:	f8c7 40c0 	str.w	r4, [r7, #192]	; 0xc0
 8003d0c:	430b      	orrs	r3, r1
 8003d0e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8003d12:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	; 0xc0
 8003d16:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003d1a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8003d1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d22:	1c5a      	adds	r2, r3, #1
 8003d24:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d28:	4413      	add	r3, r2
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	b2da      	uxtb	r2, r3
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	f04f 0000 	mov.w	r0, #0
 8003d36:	f04f 0100 	mov.w	r1, #0
 8003d3a:	0219      	lsls	r1, r3, #8
 8003d3c:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003d40:	0210      	lsls	r0, r2, #8
 8003d42:	ea44 0300 	orr.w	r3, r4, r0
 8003d46:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003d4a:	ea45 0301 	orr.w	r3, r5, r1
 8003d4e:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8003d52:	e9d7 342e 	ldrd	r3, r4, [r7, #184]	; 0xb8
 8003d56:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003d5a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8003d5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d62:	1c9a      	adds	r2, r3, #2
 8003d64:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003d68:	4413      	add	r3, r2
 8003d6a:	781b      	ldrb	r3, [r3, #0]
 8003d6c:	b2da      	uxtb	r2, r3
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	f04f 0000 	mov.w	r0, #0
 8003d76:	f04f 0100 	mov.w	r1, #0
 8003d7a:	0419      	lsls	r1, r3, #16
 8003d7c:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003d80:	0410      	lsls	r0, r2, #16
 8003d82:	ea44 0300 	orr.w	r3, r4, r0
 8003d86:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003d8a:	ea45 0301 	orr.w	r3, r5, r1
 8003d8e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003d92:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	; 0xb0
 8003d96:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003d9a:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da2:	1cda      	adds	r2, r3, #3
 8003da4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003da8:	4413      	add	r3, r2
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	b2da      	uxtb	r2, r3
 8003dae:	f04f 0300 	mov.w	r3, #0
 8003db2:	ea4f 2912 	mov.w	r9, r2, lsr #8
 8003db6:	ea4f 6802 	mov.w	r8, r2, lsl #24
 8003dba:	ea40 0308 	orr.w	r3, r0, r8
 8003dbe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003dc2:	ea41 0309 	orr.w	r3, r1, r9
 8003dc6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8003dca:	e9d7 342a 	ldrd	r3, r4, [r7, #168]	; 0xa8
 8003dce:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8003dd2:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8003dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dda:	1d1a      	adds	r2, r3, #4
 8003ddc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003de0:	4413      	add	r3, r2
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	b2da      	uxtb	r2, r3
 8003de6:	f04f 0300 	mov.w	r3, #0
 8003dea:	f04f 0000 	mov.w	r0, #0
 8003dee:	f04f 0100 	mov.w	r1, #0
 8003df2:	0011      	movs	r1, r2
 8003df4:	2000      	movs	r0, #0
 8003df6:	ea44 0300 	orr.w	r3, r4, r0
 8003dfa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8003dfe:	ea45 0301 	orr.w	r3, r5, r1
 8003e02:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8003e06:	e9d7 3428 	ldrd	r3, r4, [r7, #160]	; 0xa0
 8003e0a:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 8003e0e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8003e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e16:	1d5a      	adds	r2, r3, #5
 8003e18:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e1c:	4413      	add	r3, r2
 8003e1e:	781b      	ldrb	r3, [r3, #0]
 8003e20:	b2da      	uxtb	r2, r3
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	f04f 0000 	mov.w	r0, #0
 8003e2a:	f04f 0100 	mov.w	r1, #0
 8003e2e:	0211      	lsls	r1, r2, #8
 8003e30:	2000      	movs	r0, #0
 8003e32:	ea44 0300 	orr.w	r3, r4, r0
 8003e36:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003e3a:	ea45 0301 	orr.w	r3, r5, r1
 8003e3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003e42:	e9d7 3426 	ldrd	r3, r4, [r7, #152]	; 0x98
 8003e46:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8003e4a:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8003e4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e52:	1d9a      	adds	r2, r3, #6
 8003e54:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e58:	4413      	add	r3, r2
 8003e5a:	781b      	ldrb	r3, [r3, #0]
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	f04f 0300 	mov.w	r3, #0
 8003e62:	f04f 0000 	mov.w	r0, #0
 8003e66:	f04f 0100 	mov.w	r1, #0
 8003e6a:	0411      	lsls	r1, r2, #16
 8003e6c:	2000      	movs	r0, #0
 8003e6e:	ea44 0300 	orr.w	r3, r4, r0
 8003e72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8003e76:	ea45 0301 	orr.w	r3, r5, r1
 8003e7a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8003e7e:	e9d7 3424 	ldrd	r3, r4, [r7, #144]	; 0x90
 8003e82:	e9c7 3438 	strd	r3, r4, [r7, #224]	; 0xe0
      u_orientation_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 8003e86:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	; 0xe0
 8003e8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e8e:	1dda      	adds	r2, r3, #7
 8003e90:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003e94:	4413      	add	r3, r2
 8003e96:	781b      	ldrb	r3, [r3, #0]
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	f04f 0300 	mov.w	r3, #0
 8003e9e:	f04f 0000 	mov.w	r0, #0
 8003ea2:	f04f 0100 	mov.w	r1, #0
 8003ea6:	0611      	lsls	r1, r2, #24
 8003ea8:	2000      	movs	r0, #0
 8003eaa:	ea44 0a00 	orr.w	sl, r4, r0
 8003eae:	ea45 0b01 	orr.w	fp, r5, r1
 8003eb2:	e9c7 ab38 	strd	sl, fp, [r7, #224]	; 0xe0
      this->orientation_covariance[i] = u_orientation_covariancei.real;
 8003eb6:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003eba:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 8003ebe:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003ec2:	3308      	adds	r3, #8
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4413      	add	r3, r2
 8003ec8:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->orientation_covariance[i]);
 8003ecc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003ed0:	3308      	adds	r3, #8
 8003ed2:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8003ed6:	f8d7 30f0 	ldr.w	r3, [r7, #240]	; 0xf0
 8003eda:	3301      	adds	r3, #1
 8003edc:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8003ee0:	e6fa      	b.n	8003cd8 <_ZN11sensor_msgs3Imu11deserializeEPh+0x62>
      }
      offset += this->angular_velocity.deserialize(inbuffer + offset);
 8003ee2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003ee6:	f103 0088 	add.w	r0, r3, #136	; 0x88
 8003eea:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003eee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003ef2:	4413      	add	r3, r2
 8003ef4:	4619      	mov	r1, r3
 8003ef6:	f7ff f9a6 	bl	8003246 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8003efa:	4602      	mov	r2, r0
 8003efc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f00:	4413      	add	r3, r2
 8003f02:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8003f06:	2300      	movs	r3, #0
 8003f08:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 8003f0c:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8003f10:	2b08      	cmp	r3, #8
 8003f12:	f200 80fc 	bhi.w	800410e <_ZN11sensor_msgs3Imu11deserializeEPh+0x498>
      union {
        double real;
        uint64_t base;
      } u_angular_velocity_covariancei;
      u_angular_velocity_covariancei.base = 0;
 8003f16:	f04f 0200 	mov.w	r2, #0
 8003f1a:	f04f 0300 	mov.w	r3, #0
 8003f1e:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 8003f22:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003f26:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8003f2a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f2e:	4413      	add	r3, r2
 8003f30:	781b      	ldrb	r3, [r3, #0]
 8003f32:	b2da      	uxtb	r2, r3
 8003f34:	f04f 0300 	mov.w	r3, #0
 8003f38:	ea40 0402 	orr.w	r4, r0, r2
 8003f3c:	f8c7 4088 	str.w	r4, [r7, #136]	; 0x88
 8003f40:	430b      	orrs	r3, r1
 8003f42:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8003f46:	e9d7 3422 	ldrd	r3, r4, [r7, #136]	; 0x88
 8003f4a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8003f4e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003f52:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f5c:	4413      	add	r3, r2
 8003f5e:	781b      	ldrb	r3, [r3, #0]
 8003f60:	b2da      	uxtb	r2, r3
 8003f62:	f04f 0300 	mov.w	r3, #0
 8003f66:	f04f 0000 	mov.w	r0, #0
 8003f6a:	f04f 0100 	mov.w	r1, #0
 8003f6e:	0219      	lsls	r1, r3, #8
 8003f70:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 8003f74:	0210      	lsls	r0, r2, #8
 8003f76:	ea44 0300 	orr.w	r3, r4, r0
 8003f7a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8003f7e:	ea45 0301 	orr.w	r3, r5, r1
 8003f82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8003f86:	e9d7 3420 	ldrd	r3, r4, [r7, #128]	; 0x80
 8003f8a:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 8003f8e:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8003f92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f96:	1c9a      	adds	r2, r3, #2
 8003f98:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003f9c:	4413      	add	r3, r2
 8003f9e:	781b      	ldrb	r3, [r3, #0]
 8003fa0:	b2da      	uxtb	r2, r3
 8003fa2:	f04f 0300 	mov.w	r3, #0
 8003fa6:	f04f 0000 	mov.w	r0, #0
 8003faa:	f04f 0100 	mov.w	r1, #0
 8003fae:	0419      	lsls	r1, r3, #16
 8003fb0:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 8003fb4:	0410      	lsls	r0, r2, #16
 8003fb6:	ea44 0300 	orr.w	r3, r4, r0
 8003fba:	67bb      	str	r3, [r7, #120]	; 0x78
 8003fbc:	ea45 0301 	orr.w	r3, r5, r1
 8003fc0:	67fb      	str	r3, [r7, #124]	; 0x7c
 8003fc2:	e9d7 341e 	ldrd	r3, r4, [r7, #120]	; 0x78
 8003fc6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 8003fca:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8003fce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fd2:	1cda      	adds	r2, r3, #3
 8003fd4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003fd8:	4413      	add	r3, r2
 8003fda:	781b      	ldrb	r3, [r3, #0]
 8003fdc:	b2da      	uxtb	r2, r3
 8003fde:	f04f 0300 	mov.w	r3, #0
 8003fe2:	0a14      	lsrs	r4, r2, #8
 8003fe4:	677c      	str	r4, [r7, #116]	; 0x74
 8003fe6:	0613      	lsls	r3, r2, #24
 8003fe8:	673b      	str	r3, [r7, #112]	; 0x70
 8003fea:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	; 0x70
 8003fee:	4623      	mov	r3, r4
 8003ff0:	4303      	orrs	r3, r0
 8003ff2:	66bb      	str	r3, [r7, #104]	; 0x68
 8003ff4:	462b      	mov	r3, r5
 8003ff6:	430b      	orrs	r3, r1
 8003ff8:	66fb      	str	r3, [r7, #108]	; 0x6c
 8003ffa:	e9d7 341a 	ldrd	r3, r4, [r7, #104]	; 0x68
 8003ffe:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004002:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004006:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800400a:	1d1a      	adds	r2, r3, #4
 800400c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004010:	4413      	add	r3, r2
 8004012:	781b      	ldrb	r3, [r3, #0]
 8004014:	b2da      	uxtb	r2, r3
 8004016:	f04f 0300 	mov.w	r3, #0
 800401a:	f04f 0000 	mov.w	r0, #0
 800401e:	f04f 0100 	mov.w	r1, #0
 8004022:	0011      	movs	r1, r2
 8004024:	2000      	movs	r0, #0
 8004026:	ea44 0300 	orr.w	r3, r4, r0
 800402a:	663b      	str	r3, [r7, #96]	; 0x60
 800402c:	ea45 0301 	orr.w	r3, r5, r1
 8004030:	667b      	str	r3, [r7, #100]	; 0x64
 8004032:	e9d7 3418 	ldrd	r3, r4, [r7, #96]	; 0x60
 8004036:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800403a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 800403e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004042:	1d5a      	adds	r2, r3, #5
 8004044:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004048:	4413      	add	r3, r2
 800404a:	781b      	ldrb	r3, [r3, #0]
 800404c:	b2da      	uxtb	r2, r3
 800404e:	f04f 0300 	mov.w	r3, #0
 8004052:	f04f 0000 	mov.w	r0, #0
 8004056:	f04f 0100 	mov.w	r1, #0
 800405a:	0211      	lsls	r1, r2, #8
 800405c:	2000      	movs	r0, #0
 800405e:	ea44 0300 	orr.w	r3, r4, r0
 8004062:	65bb      	str	r3, [r7, #88]	; 0x58
 8004064:	ea45 0301 	orr.w	r3, r5, r1
 8004068:	65fb      	str	r3, [r7, #92]	; 0x5c
 800406a:	e9d7 3416 	ldrd	r3, r4, [r7, #88]	; 0x58
 800406e:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004072:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 8004076:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800407a:	1d9a      	adds	r2, r3, #6
 800407c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004080:	4413      	add	r3, r2
 8004082:	781b      	ldrb	r3, [r3, #0]
 8004084:	b2da      	uxtb	r2, r3
 8004086:	f04f 0300 	mov.w	r3, #0
 800408a:	f04f 0000 	mov.w	r0, #0
 800408e:	f04f 0100 	mov.w	r1, #0
 8004092:	0411      	lsls	r1, r2, #16
 8004094:	2000      	movs	r0, #0
 8004096:	ea44 0300 	orr.w	r3, r4, r0
 800409a:	653b      	str	r3, [r7, #80]	; 0x50
 800409c:	ea45 0301 	orr.w	r3, r5, r1
 80040a0:	657b      	str	r3, [r7, #84]	; 0x54
 80040a2:	e9d7 3414 	ldrd	r3, r4, [r7, #80]	; 0x50
 80040a6:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      u_angular_velocity_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80040aa:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	; 0xd8
 80040ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040b2:	1dda      	adds	r2, r3, #7
 80040b4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80040b8:	4413      	add	r3, r2
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	b2da      	uxtb	r2, r3
 80040be:	f04f 0300 	mov.w	r3, #0
 80040c2:	f04f 0000 	mov.w	r0, #0
 80040c6:	f04f 0100 	mov.w	r1, #0
 80040ca:	0611      	lsls	r1, r2, #24
 80040cc:	2000      	movs	r0, #0
 80040ce:	ea44 0300 	orr.w	r3, r4, r0
 80040d2:	64bb      	str	r3, [r7, #72]	; 0x48
 80040d4:	ea45 0301 	orr.w	r3, r5, r1
 80040d8:	64fb      	str	r3, [r7, #76]	; 0x4c
 80040da:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 80040de:	e9c7 3436 	strd	r3, r4, [r7, #216]	; 0xd8
      this->angular_velocity_covariance[i] = u_angular_velocity_covariancei.real;
 80040e2:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80040e6:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 80040ea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80040ee:	3315      	adds	r3, #21
 80040f0:	00db      	lsls	r3, r3, #3
 80040f2:	4413      	add	r3, r2
 80040f4:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->angular_velocity_covariance[i]);
 80040f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040fc:	3308      	adds	r3, #8
 80040fe:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004102:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 8004106:	3301      	adds	r3, #1
 8004108:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800410c:	e6fe      	b.n	8003f0c <_ZN11sensor_msgs3Imu11deserializeEPh+0x296>
      }
      offset += this->linear_acceleration.deserialize(inbuffer + offset);
 800410e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8004112:	f103 00f0 	add.w	r0, r3, #240	; 0xf0
 8004116:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 800411a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800411e:	4413      	add	r3, r2
 8004120:	4619      	mov	r1, r3
 8004122:	f7ff f890 	bl	8003246 <_ZN13geometry_msgs7Vector311deserializeEPh>
 8004126:	4602      	mov	r2, r0
 8004128:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800412c:	4413      	add	r3, r2
 800412e:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004132:	2300      	movs	r3, #0
 8004134:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004138:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800413c:	2b08      	cmp	r3, #8
 800413e:	f200 80f8 	bhi.w	8004332 <_ZN11sensor_msgs3Imu11deserializeEPh+0x6bc>
      union {
        double real;
        uint64_t base;
      } u_linear_acceleration_covariancei;
      u_linear_acceleration_covariancei.base = 0;
 8004142:	f04f 0200 	mov.w	r2, #0
 8004146:	f04f 0300 	mov.w	r3, #0
 800414a:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 0))) << (8 * 0);
 800414e:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004152:	f8d7 20f4 	ldr.w	r2, [r7, #244]	; 0xf4
 8004156:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800415a:	4413      	add	r3, r2
 800415c:	781b      	ldrb	r3, [r3, #0]
 800415e:	b2da      	uxtb	r2, r3
 8004160:	f04f 0300 	mov.w	r3, #0
 8004164:	ea40 0402 	orr.w	r4, r0, r2
 8004168:	643c      	str	r4, [r7, #64]	; 0x40
 800416a:	430b      	orrs	r3, r1
 800416c:	647b      	str	r3, [r7, #68]	; 0x44
 800416e:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	; 0x40
 8004172:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 1))) << (8 * 1);
 8004176:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800417a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800417e:	1c5a      	adds	r2, r3, #1
 8004180:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004184:	4413      	add	r3, r2
 8004186:	781b      	ldrb	r3, [r3, #0]
 8004188:	b2da      	uxtb	r2, r3
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	f04f 0000 	mov.w	r0, #0
 8004192:	f04f 0100 	mov.w	r1, #0
 8004196:	0219      	lsls	r1, r3, #8
 8004198:	ea41 6112 	orr.w	r1, r1, r2, lsr #24
 800419c:	0210      	lsls	r0, r2, #8
 800419e:	ea44 0300 	orr.w	r3, r4, r0
 80041a2:	63bb      	str	r3, [r7, #56]	; 0x38
 80041a4:	ea45 0301 	orr.w	r3, r5, r1
 80041a8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80041aa:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	; 0x38
 80041ae:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 2))) << (8 * 2);
 80041b2:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80041b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041ba:	1c9a      	adds	r2, r3, #2
 80041bc:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041c0:	4413      	add	r3, r2
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	b2da      	uxtb	r2, r3
 80041c6:	f04f 0300 	mov.w	r3, #0
 80041ca:	f04f 0000 	mov.w	r0, #0
 80041ce:	f04f 0100 	mov.w	r1, #0
 80041d2:	0419      	lsls	r1, r3, #16
 80041d4:	ea41 4112 	orr.w	r1, r1, r2, lsr #16
 80041d8:	0410      	lsls	r0, r2, #16
 80041da:	ea44 0300 	orr.w	r3, r4, r0
 80041de:	633b      	str	r3, [r7, #48]	; 0x30
 80041e0:	ea45 0301 	orr.w	r3, r5, r1
 80041e4:	637b      	str	r3, [r7, #52]	; 0x34
 80041e6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	; 0x30
 80041ea:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 3))) << (8 * 3);
 80041ee:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 80041f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f6:	1cda      	adds	r2, r3, #3
 80041f8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80041fc:	4413      	add	r3, r2
 80041fe:	781b      	ldrb	r3, [r3, #0]
 8004200:	b2da      	uxtb	r2, r3
 8004202:	f04f 0300 	mov.w	r3, #0
 8004206:	0a14      	lsrs	r4, r2, #8
 8004208:	62fc      	str	r4, [r7, #44]	; 0x2c
 800420a:	0613      	lsls	r3, r2, #24
 800420c:	62bb      	str	r3, [r7, #40]	; 0x28
 800420e:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	; 0x28
 8004212:	4623      	mov	r3, r4
 8004214:	4303      	orrs	r3, r0
 8004216:	623b      	str	r3, [r7, #32]
 8004218:	462b      	mov	r3, r5
 800421a:	430b      	orrs	r3, r1
 800421c:	627b      	str	r3, [r7, #36]	; 0x24
 800421e:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8004222:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 4))) << (8 * 4);
 8004226:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800422a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800422e:	1d1a      	adds	r2, r3, #4
 8004230:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8004234:	4413      	add	r3, r2
 8004236:	781b      	ldrb	r3, [r3, #0]
 8004238:	b2da      	uxtb	r2, r3
 800423a:	f04f 0300 	mov.w	r3, #0
 800423e:	f04f 0000 	mov.w	r0, #0
 8004242:	f04f 0100 	mov.w	r1, #0
 8004246:	0011      	movs	r1, r2
 8004248:	2000      	movs	r0, #0
 800424a:	ea44 0300 	orr.w	r3, r4, r0
 800424e:	61bb      	str	r3, [r7, #24]
 8004250:	ea45 0301 	orr.w	r3, r5, r1
 8004254:	61fb      	str	r3, [r7, #28]
 8004256:	e9d7 3406 	ldrd	r3, r4, [r7, #24]
 800425a:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 5))) << (8 * 5);
 800425e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 8004262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004266:	1d5a      	adds	r2, r3, #5
 8004268:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800426c:	4413      	add	r3, r2
 800426e:	781b      	ldrb	r3, [r3, #0]
 8004270:	b2da      	uxtb	r2, r3
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	f04f 0000 	mov.w	r0, #0
 800427a:	f04f 0100 	mov.w	r1, #0
 800427e:	0211      	lsls	r1, r2, #8
 8004280:	2000      	movs	r0, #0
 8004282:	ea44 0300 	orr.w	r3, r4, r0
 8004286:	613b      	str	r3, [r7, #16]
 8004288:	ea45 0301 	orr.w	r3, r5, r1
 800428c:	617b      	str	r3, [r7, #20]
 800428e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8004292:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 6))) << (8 * 6);
 8004296:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 800429a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800429e:	1d9a      	adds	r2, r3, #6
 80042a0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042a4:	4413      	add	r3, r2
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	b2da      	uxtb	r2, r3
 80042aa:	f04f 0300 	mov.w	r3, #0
 80042ae:	f04f 0000 	mov.w	r0, #0
 80042b2:	f04f 0100 	mov.w	r1, #0
 80042b6:	0411      	lsls	r1, r2, #16
 80042b8:	2000      	movs	r0, #0
 80042ba:	ea44 0300 	orr.w	r3, r4, r0
 80042be:	60bb      	str	r3, [r7, #8]
 80042c0:	ea45 0301 	orr.w	r3, r5, r1
 80042c4:	60fb      	str	r3, [r7, #12]
 80042c6:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80042ca:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      u_linear_acceleration_covariancei.base |= ((uint64_t) (*(inbuffer + offset + 7))) << (8 * 7);
 80042ce:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	; 0xd0
 80042d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80042d6:	1dda      	adds	r2, r3, #7
 80042d8:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80042dc:	4413      	add	r3, r2
 80042de:	781b      	ldrb	r3, [r3, #0]
 80042e0:	b2da      	uxtb	r2, r3
 80042e2:	f04f 0300 	mov.w	r3, #0
 80042e6:	f04f 0000 	mov.w	r0, #0
 80042ea:	f04f 0100 	mov.w	r1, #0
 80042ee:	0611      	lsls	r1, r2, #24
 80042f0:	2000      	movs	r0, #0
 80042f2:	ea44 0300 	orr.w	r3, r4, r0
 80042f6:	603b      	str	r3, [r7, #0]
 80042f8:	ea45 0301 	orr.w	r3, r5, r1
 80042fc:	607b      	str	r3, [r7, #4]
 80042fe:	e9d7 3400 	ldrd	r3, r4, [r7]
 8004302:	e9c7 3434 	strd	r3, r4, [r7, #208]	; 0xd0
      this->linear_acceleration_covariance[i] = u_linear_acceleration_covariancei.real;
 8004306:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800430a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	; 0xcc
 800430e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004312:	3322      	adds	r3, #34	; 0x22
 8004314:	00db      	lsls	r3, r3, #3
 8004316:	4413      	add	r3, r2
 8004318:	e9c3 0100 	strd	r0, r1, [r3]
      offset += sizeof(this->linear_acceleration_covariance[i]);
 800431c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004320:	3308      	adds	r3, #8
 8004322:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
      for( uint32_t i = 0; i < 9; i++){
 8004326:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800432a:	3301      	adds	r3, #1
 800432c:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004330:	e702      	b.n	8004138 <_ZN11sensor_msgs3Imu11deserializeEPh+0x4c2>
      }
     return offset;
 8004332:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
    }
 8004336:	4618      	mov	r0, r3
 8004338:	37f8      	adds	r7, #248	; 0xf8
 800433a:	46bd      	mov	sp, r7
 800433c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08004340 <_ZN11sensor_msgs3Imu7getTypeEv>:

    virtual const char * getType() override { return "sensor_msgs/Imu"; };
 8004340:	b480      	push	{r7}
 8004342:	b083      	sub	sp, #12
 8004344:	af00      	add	r7, sp, #0
 8004346:	6078      	str	r0, [r7, #4]
 8004348:	4b03      	ldr	r3, [pc, #12]	; (8004358 <_ZN11sensor_msgs3Imu7getTypeEv+0x18>)
 800434a:	4618      	mov	r0, r3
 800434c:	370c      	adds	r7, #12
 800434e:	46bd      	mov	sp, r7
 8004350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004354:	4770      	bx	lr
 8004356:	bf00      	nop
 8004358:	08008ff4 	.word	0x08008ff4

0800435c <_ZN11sensor_msgs3Imu6getMD5Ev>:
    virtual const char * getMD5() override { return "6a62c6daae103f4ff57a132d6f95cec2"; };
 800435c:	b480      	push	{r7}
 800435e:	b083      	sub	sp, #12
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	4b03      	ldr	r3, [pc, #12]	; (8004374 <_ZN11sensor_msgs3Imu6getMD5Ev+0x18>)
 8004366:	4618      	mov	r0, r3
 8004368:	370c      	adds	r7, #12
 800436a:	46bd      	mov	sp, r7
 800436c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004370:	4770      	bx	lr
 8004372:	bf00      	nop
 8004374:	08009004 	.word	0x08009004

08004378 <_ZN3ros15NodeHandleBase_C1Ev>:
#include "ros/msg.h"

namespace ros
{

class NodeHandleBase_
 8004378:	b480      	push	{r7}
 800437a:	b083      	sub	sp, #12
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	4a04      	ldr	r2, [pc, #16]	; (8004394 <_ZN3ros15NodeHandleBase_C1Ev+0x1c>)
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	601a      	str	r2, [r3, #0]
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	4618      	mov	r0, r3
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	08009100 	.word	0x08009100

08004398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>:
template<class Hardware,
         int MAX_SUBSCRIBERS = 25,
         int MAX_PUBLISHERS = 25,
         int INPUT_SIZE = 512,
         int OUTPUT_SIZE = 512>
class NodeHandle_ : public NodeHandleBase_
 8004398:	b580      	push	{r7, lr}
 800439a:	b082      	sub	sp, #8
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7ff ffe8 	bl	8004378 <_ZN3ros15NodeHandleBase_C1Ev>
 80043a8:	4a36      	ldr	r2, [pc, #216]	; (8004484 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev+0xec>)
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fd fcf0 	bl	8001d98 <_ZN13STM32HardwareC1Ev>
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2200      	movs	r2, #0
 80043bc:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2200      	movs	r2, #0
 80043c4:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f8c3 241c 	str.w	r2, [r3, #1052]	; 0x41c
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2200      	movs	r2, #0
 80043d4:	f8c3 2420 	str.w	r2, [r3, #1056]	; 0x420
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80043de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f004 fbed 	bl	8008bc4 <memset>
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	f203 6324 	addw	r3, r3, #1572	; 0x624
 80043f0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80043f4:	2100      	movs	r1, #0
 80043f6:	4618      	mov	r0, r3
 80043f8:	f004 fbe4 	bl	8008bc4 <memset>
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	f603 0324 	addw	r3, r3, #2084	; 0x824
 8004402:	2264      	movs	r2, #100	; 0x64
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f004 fbdc 	bl	8008bc4 <memset>
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8004412:	2264      	movs	r2, #100	; 0x64
 8004414:	2100      	movs	r1, #0
 8004416:	4618      	mov	r0, r3
 8004418:	f004 fbd4 	bl	8008bc4 <memset>
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2200      	movs	r2, #0
 8004420:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2200      	movs	r2, #0
 8004430:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2200      	movs	r2, #0
 8004438:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2200      	movs	r2, #0
 8004448:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2200      	movs	r2, #0
 8004458:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2200      	movs	r2, #0
 8004460:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	2200      	movs	r2, #0
 8004468:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	f603 1314 	addw	r3, r3, #2324	; 0x914
 8004472:	4618      	mov	r0, r3
 8004474:	f7fd f97a 	bl	800176c <_ZN14rosserial_msgs20RequestParamResponseC1Ev>
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	4618      	mov	r0, r3
 800447c:	3708      	adds	r7, #8
 800447e:	46bd      	mov	sp, r7
 8004480:	bd80      	pop	{r7, pc}
 8004482:	bf00      	nop
 8004484:	0800908c 	.word	0x0800908c

08004488 <HAL_UART_TxCpltCallback>:

ros::NodeHandle nh;
sensor_msgs::Imu BNO;
ros::Publisher bno("BNO", &BNO);

void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart){
 8004488:	b580      	push	{r7, lr}
 800448a:	b082      	sub	sp, #8
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  nh.getHardware()->flush();
 8004490:	4805      	ldr	r0, [pc, #20]	; (80044a8 <HAL_UART_TxCpltCallback+0x20>)
 8004492:	f000 f8ae 	bl	80045f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 8004496:	4603      	mov	r3, r0
 8004498:	4618      	mov	r0, r3
 800449a:	f7fd fce3 	bl	8001e64 <_ZN13STM32Hardware5flushEv>
}
 800449e:	bf00      	nop
 80044a0:	3708      	adds	r7, #8
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bd80      	pop	{r7, pc}
 80044a6:	bf00      	nop
 80044a8:	200000c0 	.word	0x200000c0

080044ac <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b082      	sub	sp, #8
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
  nh.getHardware()->reset_rbuf();
 80044b4:	4805      	ldr	r0, [pc, #20]	; (80044cc <HAL_UART_RxCpltCallback+0x20>)
 80044b6:	f000 f89c 	bl	80045f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>
 80044ba:	4603      	mov	r3, r0
 80044bc:	4618      	mov	r0, r3
 80044be:	f7fd fc92 	bl	8001de6 <_ZN13STM32Hardware10reset_rbufEv>
}
 80044c2:	bf00      	nop
 80044c4:	3708      	adds	r7, #8
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	200000c0 	.word	0x200000c0

080044d0 <setup>:

void setup(void) {
 80044d0:	b580      	push	{r7, lr}
 80044d2:	af00      	add	r7, sp, #0
	nh.initNode();
 80044d4:	4804      	ldr	r0, [pc, #16]	; (80044e8 <setup+0x18>)
 80044d6:	f000 f898 	bl	800460a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>
	nh.advertise(bno);
 80044da:	4904      	ldr	r1, [pc, #16]	; (80044ec <setup+0x1c>)
 80044dc:	4802      	ldr	r0, [pc, #8]	; (80044e8 <setup+0x18>)
 80044de:	f000 f8b1 	bl	8004644 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>
}
 80044e2:	bf00      	nop
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	200000c0 	.word	0x200000c0
 80044ec:	20000b58 	.word	0x20000b58

080044f0 <loop>:

void loop(void) {
 80044f0:	b580      	push	{r7, lr}
 80044f2:	af00      	add	r7, sp, #0
	BNO.orientation.x = IMU_Quarternion[0];
 80044f4:	4b19      	ldr	r3, [pc, #100]	; (800455c <loop+0x6c>)
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4618      	mov	r0, r3
 80044fa:	f7fb ffe3 	bl	80004c4 <__aeabi_f2d>
 80044fe:	4602      	mov	r2, r0
 8004500:	460b      	mov	r3, r1
 8004502:	4917      	ldr	r1, [pc, #92]	; (8004560 <loop+0x70>)
 8004504:	e9c1 2308 	strd	r2, r3, [r1, #32]
	BNO.orientation.y = IMU_Quarternion[1];
 8004508:	4b14      	ldr	r3, [pc, #80]	; (800455c <loop+0x6c>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	4618      	mov	r0, r3
 800450e:	f7fb ffd9 	bl	80004c4 <__aeabi_f2d>
 8004512:	4602      	mov	r2, r0
 8004514:	460b      	mov	r3, r1
 8004516:	4912      	ldr	r1, [pc, #72]	; (8004560 <loop+0x70>)
 8004518:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
	BNO.orientation.z = IMU_Quarternion[2];
 800451c:	4b0f      	ldr	r3, [pc, #60]	; (800455c <loop+0x6c>)
 800451e:	689b      	ldr	r3, [r3, #8]
 8004520:	4618      	mov	r0, r3
 8004522:	f7fb ffcf 	bl	80004c4 <__aeabi_f2d>
 8004526:	4602      	mov	r2, r0
 8004528:	460b      	mov	r3, r1
 800452a:	490d      	ldr	r1, [pc, #52]	; (8004560 <loop+0x70>)
 800452c:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
	BNO.orientation.w = IMU_Quarternion[3];
 8004530:	4b0a      	ldr	r3, [pc, #40]	; (800455c <loop+0x6c>)
 8004532:	68db      	ldr	r3, [r3, #12]
 8004534:	4618      	mov	r0, r3
 8004536:	f7fb ffc5 	bl	80004c4 <__aeabi_f2d>
 800453a:	4602      	mov	r2, r0
 800453c:	460b      	mov	r3, r1
 800453e:	4908      	ldr	r1, [pc, #32]	; (8004560 <loop+0x70>)
 8004540:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

	bno.publish(&BNO);
 8004544:	4906      	ldr	r1, [pc, #24]	; (8004560 <loop+0x70>)
 8004546:	4807      	ldr	r0, [pc, #28]	; (8004564 <loop+0x74>)
 8004548:	f7fd fbf3 	bl	8001d32 <_ZN3ros9Publisher7publishEPKNS_3MsgE>
	nh.spinOnce();
 800454c:	4806      	ldr	r0, [pc, #24]	; (8004568 <loop+0x78>)
 800454e:	f000 f8a9 	bl	80046a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>
	HAL_Delay(200);
 8004552:	20c8      	movs	r0, #200	; 0xc8
 8004554:	f001 f81c 	bl	8005590 <HAL_Delay>
}
 8004558:	bf00      	nop
 800455a:	bd80      	pop	{r7, pc}
 800455c:	200000b0 	.word	0x200000b0
 8004560:	20000a00 	.word	0x20000a00
 8004564:	20000b58 	.word	0x20000b58
 8004568:	200000c0 	.word	0x200000c0

0800456c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_>:
    return 8;
  }

  // Copy data from variable into a byte array
  template<typename A, typename V>
  static void varToArr(A arr, const V var)
 800456c:	b480      	push	{r7}
 800456e:	b085      	sub	sp, #20
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  {
    for (size_t i = 0; i < sizeof(V); i++)
 8004576:	2300      	movs	r3, #0
 8004578:	60fb      	str	r3, [r7, #12]
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2b03      	cmp	r3, #3
 800457e:	d80d      	bhi.n	800459c <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0x30>
      arr[i] = (var >> (8 * i));
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	00db      	lsls	r3, r3, #3
 8004584:	683a      	ldr	r2, [r7, #0]
 8004586:	fa22 f103 	lsr.w	r1, r2, r3
 800458a:	687a      	ldr	r2, [r7, #4]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	4413      	add	r3, r2
 8004590:	b2ca      	uxtb	r2, r1
 8004592:	701a      	strb	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	3301      	adds	r3, #1
 8004598:	60fb      	str	r3, [r7, #12]
 800459a:	e7ee      	b.n	800457a <_ZN3ros3Msg8varToArrIPhmEEvT_T0_+0xe>
  }
 800459c:	bf00      	nop
 800459e:	3714      	adds	r7, #20
 80045a0:	46bd      	mov	sp, r7
 80045a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a6:	4770      	bx	lr

080045a8 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_>:

  // Copy data from a byte array into variable
  template<typename V, typename A>
  static void arrToVar(V& var, const A arr)
 80045a8:	b480      	push	{r7}
 80045aa:	b085      	sub	sp, #20
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  {
    var = 0;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	2200      	movs	r2, #0
 80045b6:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80045b8:	2300      	movs	r3, #0
 80045ba:	60fb      	str	r3, [r7, #12]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d811      	bhi.n	80045e6 <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x3e>
      var |= (arr[i] << (8 * i));
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	6839      	ldr	r1, [r7, #0]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	440a      	add	r2, r1
 80045cc:	7812      	ldrb	r2, [r2, #0]
 80045ce:	4611      	mov	r1, r2
 80045d0:	68fa      	ldr	r2, [r7, #12]
 80045d2:	00d2      	lsls	r2, r2, #3
 80045d4:	fa01 f202 	lsl.w	r2, r1, r2
 80045d8:	431a      	orrs	r2, r3
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	601a      	str	r2, [r3, #0]
    for (size_t i = 0; i < sizeof(V); i++)
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	3301      	adds	r3, #1
 80045e2:	60fb      	str	r3, [r7, #12]
 80045e4:	e7ea      	b.n	80045bc <_ZN3ros3Msg8arrToVarImPhEEvRT_T0_+0x14>
  }
 80045e6:	bf00      	nop
 80045e8:	3714      	adds	r7, #20
 80045ea:	46bd      	mov	sp, r7
 80045ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f0:	4770      	bx	lr

080045f2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE11getHardwareEv>:

  /*
   * Setup Functions
   */
public:
  Hardware* getHardware()
 80045f2:	b480      	push	{r7}
 80045f4:	b083      	sub	sp, #12
 80045f6:	af00      	add	r7, sp, #0
 80045f8:	6078      	str	r0, [r7, #4]
  {
    return &hardware_;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	3304      	adds	r3, #4
  }
 80045fe:	4618      	mov	r0, r3
 8004600:	370c      	adds	r7, #12
 8004602:	46bd      	mov	sp, r7
 8004604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004608:	4770      	bx	lr

0800460a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8initNodeEv>:

  /* Start serial, initialize buffers */
  void initNode()
 800460a:	b580      	push	{r7, lr}
 800460c:	b082      	sub	sp, #8
 800460e:	af00      	add	r7, sp, #0
 8004610:	6078      	str	r0, [r7, #4]
  {
    hardware_.init();
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	3304      	adds	r3, #4
 8004616:	4618      	mov	r0, r3
 8004618:	f7fd fbda 	bl	8001dd0 <_ZN13STM32Hardware4initEv>
    mode_ = 0;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2200      	movs	r2, #0
 8004620:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
    bytes_ = 0;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
    index_ = 0;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	2200      	movs	r2, #0
 8004630:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
    topic_ = 0;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2200      	movs	r2, #0
 8004638:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
  };
 800463c:	bf00      	nop
 800463e:	3708      	adds	r7, #8
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE>:
  /********************************************************************
   * Topic Management
   */

  /* Register a new publisher */
  bool advertise(Publisher & p)
 8004644:	b480      	push	{r7}
 8004646:	b085      	sub	sp, #20
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
 800464c:	6039      	str	r1, [r7, #0]
  {
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800464e:	2300      	movs	r3, #0
 8004650:	60fb      	str	r3, [r7, #12]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	2b18      	cmp	r3, #24
 8004656:	dc1e      	bgt.n	8004696 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x52>
    {
      if (publishers[i] == 0) // empty slot
 8004658:	687a      	ldr	r2, [r7, #4]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004660:	009b      	lsls	r3, r3, #2
 8004662:	4413      	add	r3, r2
 8004664:	685b      	ldr	r3, [r3, #4]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d111      	bne.n	800468e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x4a>
      {
        publishers[i] = &p;
 800466a:	687a      	ldr	r2, [r7, #4]
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004672:	009b      	lsls	r3, r3, #2
 8004674:	4413      	add	r3, r2
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	605a      	str	r2, [r3, #4]
        p.id_ = i + 100 + MAX_SUBSCRIBERS;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	f103 027d 	add.w	r2, r3, #125	; 0x7d
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	609a      	str	r2, [r3, #8]
        p.nh_ = this;
 8004684:	687a      	ldr	r2, [r7, #4]
 8004686:	683b      	ldr	r3, [r7, #0]
 8004688:	60da      	str	r2, [r3, #12]
        return true;
 800468a:	2301      	movs	r3, #1
 800468c:	e004      	b.n	8004698 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0x54>
    for (int i = 0; i < MAX_PUBLISHERS; i++)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	3301      	adds	r3, #1
 8004692:	60fb      	str	r3, [r7, #12]
 8004694:	e7dd      	b.n	8004652 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9advertiseERNS_9PublisherE+0xe>
      }
    }
    return false;
 8004696:	2300      	movs	r3, #0
  }
 8004698:	4618      	mov	r0, r3
 800469a:	3714      	adds	r7, #20
 800469c:	46bd      	mov	sp, r7
 800469e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046a2:	4770      	bx	lr

080046a4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv>:
  virtual int spinOnce() override
 80046a4:	b580      	push	{r7, lr}
 80046a6:	b084      	sub	sp, #16
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	6078      	str	r0, [r7, #4]
    uint32_t c_time = hardware_.time();
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	3304      	adds	r3, #4
 80046b0:	4618      	mov	r0, r3
 80046b2:	f7fd fc7b 	bl	8001fac <_ZN13STM32Hardware4timeEv>
 80046b6:	60f8      	str	r0, [r7, #12]
    if ((c_time - last_sync_receive_time) > (SYNC_SECONDS * 2200))
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	f8d3 3908 	ldr.w	r3, [r3, #2312]	; 0x908
 80046be:	68fa      	ldr	r2, [r7, #12]
 80046c0:	1ad3      	subs	r3, r2, r3
 80046c2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d903      	bls.n	80046d2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2e>
      configured_ = false;
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	2200      	movs	r2, #0
 80046ce:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
    if (mode_ != MODE_FIRST_FF)
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d009      	beq.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      if (c_time > last_msg_timeout_time)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f8d3 390c 	ldr.w	r3, [r3, #2316]	; 0x90c
 80046e2:	68fa      	ldr	r2, [r7, #12]
 80046e4:	429a      	cmp	r2, r3
 80046e6:	d903      	bls.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
      if (spin_timeout_ > 0)
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d014      	beq.n	8004724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
        if ((hardware_.time() - c_time) > spin_timeout_)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	3304      	adds	r3, #4
 80046fe:	4618      	mov	r0, r3
 8004700:	f7fd fc54 	bl	8001fac <_ZN13STM32Hardware4timeEv>
 8004704:	4602      	mov	r2, r0
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	1ad2      	subs	r2, r2, r3
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	f8d3 3420 	ldr.w	r3, [r3, #1056]	; 0x420
 8004710:	429a      	cmp	r2, r3
 8004712:	bf8c      	ite	hi
 8004714:	2301      	movhi	r3, #1
 8004716:	2300      	movls	r3, #0
 8004718:	b2db      	uxtb	r3, r3
 800471a:	2b00      	cmp	r3, #0
 800471c:	d002      	beq.n	8004724 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x80>
          return SPIN_TIMEOUT;
 800471e:	f06f 0301 	mvn.w	r3, #1
 8004722:	e194      	b.n	8004a4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      int data = hardware_.read();
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	3304      	adds	r3, #4
 8004728:	4618      	mov	r0, r3
 800472a:	f7fd fb6d 	bl	8001e08 <_ZN13STM32Hardware4readEv>
 800472e:	60b8      	str	r0, [r7, #8]
      if (data < 0)
 8004730:	68bb      	ldr	r3, [r7, #8]
 8004732:	2b00      	cmp	r3, #0
 8004734:	f2c0 8174 	blt.w	8004a20 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x37c>
      checksum_ += data;
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f8d3 28fc 	ldr.w	r2, [r3, #2300]	; 0x8fc
 800473e:	68bb      	ldr	r3, [r7, #8]
 8004740:	441a      	add	r2, r3
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
      if (mode_ == MODE_MESSAGE)          /* message data being recieved */
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800474e:	2b07      	cmp	r3, #7
 8004750:	d11e      	bne.n	8004790 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0xec>
        message_in[index_++] = data;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	f8d3 38f8 	ldr.w	r3, [r3, #2296]	; 0x8f8
 8004758:	1c59      	adds	r1, r3, #1
 800475a:	687a      	ldr	r2, [r7, #4]
 800475c:	f8c2 18f8 	str.w	r1, [r2, #2296]	; 0x8f8
 8004760:	68ba      	ldr	r2, [r7, #8]
 8004762:	b2d1      	uxtb	r1, r2
 8004764:	687a      	ldr	r2, [r7, #4]
 8004766:	4413      	add	r3, r2
 8004768:	460a      	mov	r2, r1
 800476a:	f883 2424 	strb.w	r2, [r3, #1060]	; 0x424
        bytes_--;
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004774:	1e5a      	subs	r2, r3, #1
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        if (bytes_ == 0)                 /* is message complete? if so, checksum */
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1b4      	bne.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2208      	movs	r2, #8
 800478a:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800478e:	e7af      	b.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_FIRST_FF)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004796:	2b00      	cmp	r3, #0
 8004798:	d128      	bne.n	80047ec <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x148>
        if (data == 0xff)
 800479a:	68bb      	ldr	r3, [r7, #8]
 800479c:	2bff      	cmp	r3, #255	; 0xff
 800479e:	d10d      	bne.n	80047bc <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x118>
          mode_++;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80047a6:	1c5a      	adds	r2, r3, #1
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          last_msg_timeout_time = c_time + SERIAL_MSG_TIMEOUT;
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f103 0214 	add.w	r2, r3, #20
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f8c3 290c 	str.w	r2, [r3, #2316]	; 0x90c
 80047ba:	e799      	b.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        else if (hardware_.time() - c_time > (SYNC_SECONDS * 1000))
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	3304      	adds	r3, #4
 80047c0:	4618      	mov	r0, r3
 80047c2:	f7fd fbf3 	bl	8001fac <_ZN13STM32Hardware4timeEv>
 80047c6:	4602      	mov	r2, r0
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	1ad3      	subs	r3, r2, r3
 80047cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80047d0:	4293      	cmp	r3, r2
 80047d2:	bf8c      	ite	hi
 80047d4:	2301      	movhi	r3, #1
 80047d6:	2300      	movls	r3, #0
 80047d8:	b2db      	uxtb	r3, r3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d088      	beq.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          configured_ = false;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2200      	movs	r2, #0
 80047e2:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
          return SPIN_TIMEOUT;
 80047e6:	f06f 0301 	mvn.w	r3, #1
 80047ea:	e130      	b.n	8004a4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
      else if (mode_ == MODE_PROTOCOL_VER)
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80047f2:	2b01      	cmp	r3, #1
 80047f4:	d118      	bne.n	8004828 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x184>
        if (data == PROTOCOL_VER)
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	2bfe      	cmp	r3, #254	; 0xfe
 80047fa:	d107      	bne.n	800480c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x168>
          mode_++;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004802:	1c5a      	adds	r2, r3, #1
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 800480a:	e771      	b.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	2200      	movs	r2, #0
 8004810:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
          if (configured_ == false)
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 800481a:	2b00      	cmp	r3, #0
 800481c:	f47f af68 	bne.w	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            requestSyncTime();  /* send a msg back showing our protocol version */
 8004820:	6878      	ldr	r0, [r7, #4]
 8004822:	f000 f918 	bl	8004a56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
 8004826:	e763      	b.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_L)      /* bottom half of message size */
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800482e:	2b02      	cmp	r3, #2
 8004830:	d113      	bne.n	800485a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1b6>
        bytes_ = data;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        index_ = 0;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f8c3 28f8 	str.w	r2, [r3, #2296]	; 0x8f8
        mode_++;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004848:	1c5a      	adds	r2, r3, #1
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte for calculating size checksum */
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	68ba      	ldr	r2, [r7, #8]
 8004854:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 8004858:	e74a      	b.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_H)      /* top half of message size */
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004860:	2b03      	cmp	r3, #3
 8004862:	d110      	bne.n	8004886 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x1e2>
        bytes_ += data << 8;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 28f0 	ldr.w	r2, [r3, #2288]	; 0x8f0
 800486a:	68bb      	ldr	r3, [r7, #8]
 800486c:	021b      	lsls	r3, r3, #8
 800486e:	441a      	add	r2, r3
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	f8c3 28f0 	str.w	r2, [r3, #2288]	; 0x8f0
        mode_++;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800487c:	1c5a      	adds	r2, r3, #1
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004884:	e734      	b.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_SIZE_CHECKSUM)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 800488c:	2b04      	cmp	r3, #4
 800488e:	d116      	bne.n	80048be <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x21a>
        if ((checksum_ % 256) == 255)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 8004896:	425a      	negs	r2, r3
 8004898:	b2db      	uxtb	r3, r3
 800489a:	b2d2      	uxtb	r2, r2
 800489c:	bf58      	it	pl
 800489e:	4253      	negpl	r3, r2
 80048a0:	2bff      	cmp	r3, #255	; 0xff
 80048a2:	d107      	bne.n	80048b4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x210>
          mode_++;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80048b2:	e71d      	b.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_FIRST_FF;          /* Abandon the frame if the msg len is wrong */
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2200      	movs	r2, #0
 80048b8:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 80048bc:	e718      	b.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_L)     /* bottom half of topic id */
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80048c4:	2b05      	cmp	r3, #5
 80048c6:	d10f      	bne.n	80048e8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x244>
        topic_ = data;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	68ba      	ldr	r2, [r7, #8]
 80048cc:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_++;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80048d6:	1c5a      	adds	r2, r3, #1
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        checksum_ = data;               /* first byte included in checksum */
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	68ba      	ldr	r2, [r7, #8]
 80048e2:	f8c3 28fc 	str.w	r2, [r3, #2300]	; 0x8fc
 80048e6:	e703      	b.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_TOPIC_H)     /* top half of topic id */
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 80048ee:	2b06      	cmp	r3, #6
 80048f0:	d117      	bne.n	8004922 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x27e>
        topic_ += data << 8;
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	f8d3 28f4 	ldr.w	r2, [r3, #2292]	; 0x8f4
 80048f8:	68bb      	ldr	r3, [r7, #8]
 80048fa:	021b      	lsls	r3, r3, #8
 80048fc:	441a      	add	r2, r3
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	f8c3 28f4 	str.w	r2, [r3, #2292]	; 0x8f4
        mode_ = MODE_MESSAGE;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	2207      	movs	r2, #7
 8004908:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if (bytes_ == 0)
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	f8d3 38f0 	ldr.w	r3, [r3, #2288]	; 0x8f0
 8004912:	2b00      	cmp	r3, #0
 8004914:	f47f aeec 	bne.w	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          mode_ = MODE_MSG_CHECKSUM;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2208      	movs	r2, #8
 800491c:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
 8004920:	e6e6      	b.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
      else if (mode_ == MODE_MSG_CHECKSUM)    /* do checksum */
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	f8d3 38ec 	ldr.w	r3, [r3, #2284]	; 0x8ec
 8004928:	2b08      	cmp	r3, #8
 800492a:	f47f aee1 	bne.w	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        mode_ = MODE_FIRST_FF;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f8c3 28ec 	str.w	r2, [r3, #2284]	; 0x8ec
        if ((checksum_ % 256) == 255)
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	f8d3 38fc 	ldr.w	r3, [r3, #2300]	; 0x8fc
 800493c:	425a      	negs	r2, r3
 800493e:	b2db      	uxtb	r3, r3
 8004940:	b2d2      	uxtb	r2, r2
 8004942:	bf58      	it	pl
 8004944:	4253      	negpl	r3, r2
 8004946:	2bff      	cmp	r3, #255	; 0xff
 8004948:	f47f aed2 	bne.w	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          if (topic_ == TopicInfo::ID_PUBLISHER)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004952:	2b00      	cmp	r3, #0
 8004954:	d110      	bne.n	8004978 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2d4>
            requestSyncTime();
 8004956:	6878      	ldr	r0, [r7, #4]
 8004958:	f000 f87d 	bl	8004a56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
            negotiateTopics();
 800495c:	6878      	ldr	r0, [r7, #4]
 800495e:	f000 f898 	bl	8004a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>
            last_sync_time = c_time;
 8004962:	687b      	ldr	r3, [r7, #4]
 8004964:	68fa      	ldr	r2, [r7, #12]
 8004966:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
            last_sync_receive_time = c_time;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	68fa      	ldr	r2, [r7, #12]
 800496e:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
            return SPIN_ERR;
 8004972:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8004976:	e06a      	b.n	8004a4e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3aa>
          else if (topic_ == TopicInfo::ID_TIME)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 800497e:	2b0a      	cmp	r3, #10
 8004980:	d107      	bne.n	8004992 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x2ee>
            syncTime(message_in);
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f203 4324 	addw	r3, r3, #1060	; 0x424
 8004988:	4619      	mov	r1, r3
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 f960 	bl	8004c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>
 8004990:	e6ae      	b.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_PARAMETER_REQUEST)
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004998:	2b06      	cmp	r3, #6
 800499a:	d10e      	bne.n	80049ba <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x316>
            req_param_resp.deserialize(message_in);
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	f603 1214 	addw	r2, r3, #2324	; 0x914
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	f203 4324 	addw	r3, r3, #1060	; 0x424
 80049a8:	4619      	mov	r1, r3
 80049aa:	4610      	mov	r0, r2
 80049ac:	f7fd f81d 	bl	80019ea <_ZN14rosserial_msgs20RequestParamResponse11deserializeEPh>
            param_received = true;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2910 	strb.w	r2, [r3, #2320]	; 0x910
 80049b8:	e69a      	b.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
          else if (topic_ == TopicInfo::ID_TX_STOP)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80049c0:	2b0b      	cmp	r3, #11
 80049c2:	d104      	bne.n	80049ce <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x32a>
            configured_ = false;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2200      	movs	r2, #0
 80049c8:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
 80049cc:	e690      	b.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
            if (subscribers[topic_ - 100])
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80049d4:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f202 2222 	addw	r2, r2, #546	; 0x222
 80049de:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f43f ae84 	beq.w	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
              subscribers[topic_ - 100]->callback(message_in);
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 80049ee:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	f202 2222 	addw	r2, r2, #546	; 0x222
 80049f8:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	f8d3 38f4 	ldr.w	r3, [r3, #2292]	; 0x8f4
 8004a02:	f1a3 0264 	sub.w	r2, r3, #100	; 0x64
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004a0c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	687a      	ldr	r2, [r7, #4]
 8004a16:	f202 4224 	addw	r2, r2, #1060	; 0x424
 8004a1a:	4611      	mov	r1, r2
 8004a1c:	4798      	blx	r3
    while (true)
 8004a1e:	e667      	b.n	80046f0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x4c>
        break;
 8004a20:	bf00      	nop
    if (configured_ && ((c_time - last_sync_time) > (SYNC_SECONDS * 500)))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d00f      	beq.n	8004a4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	f8d3 3904 	ldr.w	r3, [r3, #2308]	; 0x904
 8004a32:	68fa      	ldr	r2, [r7, #12]
 8004a34:	1ad3      	subs	r3, r2, r3
 8004a36:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d906      	bls.n	8004a4c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8spinOnceEv+0x3a8>
      requestSyncTime();
 8004a3e:	6878      	ldr	r0, [r7, #4]
 8004a40:	f000 f809 	bl	8004a56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>
      last_sync_time = c_time;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	68fa      	ldr	r2, [r7, #12]
 8004a48:	f8c3 2904 	str.w	r2, [r3, #2308]	; 0x904
    return SPIN_OK;
 8004a4c:	2300      	movs	r3, #0
  }
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3710      	adds	r7, #16
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15requestSyncTimeEv>:
  void requestSyncTime()
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b086      	sub	sp, #24
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	6078      	str	r0, [r7, #4]
    std_msgs::Time t;
 8004a5e:	f107 030c 	add.w	r3, r7, #12
 8004a62:	4618      	mov	r0, r3
 8004a64:	f7fc fb1e 	bl	80010a4 <_ZN8std_msgs4TimeC1Ev>
    publish(TopicInfo::ID_TIME, &t);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	f107 020c 	add.w	r2, r7, #12
 8004a72:	210a      	movs	r1, #10
 8004a74:	6878      	ldr	r0, [r7, #4]
 8004a76:	4798      	blx	r3
    rt_time = hardware_.time();
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	3304      	adds	r3, #4
 8004a7c:	4618      	mov	r0, r3
 8004a7e:	f7fd fa95 	bl	8001fac <_ZN13STM32Hardware4timeEv>
 8004a82:	4602      	mov	r2, r0
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	f8c3 2414 	str.w	r2, [r3, #1044]	; 0x414
  }
 8004a8a:	bf00      	nop
 8004a8c:	3718      	adds	r7, #24
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	bd80      	pop	{r7, pc}

08004a92 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv>:
    bool v = advertise(srv.pub);
    bool w = subscribe(srv);
    return v && w;
  }

  void negotiateTopics()
 8004a92:	b590      	push	{r4, r7, lr}
 8004a94:	b08b      	sub	sp, #44	; 0x2c
 8004a96:	af00      	add	r7, sp, #0
 8004a98:	6078      	str	r0, [r7, #4]
  {
    rosserial_msgs::TopicInfo ti;
 8004a9a:	f107 030c 	add.w	r3, r7, #12
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	f7fc fbf0 	bl	8001284 <_ZN14rosserial_msgs9TopicInfoC1Ev>
    int i;
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004aa4:	2300      	movs	r3, #0
 8004aa6:	627b      	str	r3, [r7, #36]	; 0x24
 8004aa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aaa:	2b18      	cmp	r3, #24
 8004aac:	dc63      	bgt.n	8004b76 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe4>
    {
      if (publishers[i] != 0) // non-empty slot
 8004aae:	687a      	ldr	r2, [r7, #4]
 8004ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab2:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	4413      	add	r3, r2
 8004aba:	685b      	ldr	r3, [r3, #4]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d056      	beq.n	8004b6e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xdc>
      {
        ti.topic_id = publishers[i]->id_;
 8004ac0:	687a      	ldr	r2, [r7, #4]
 8004ac2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac4:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004ac8:	009b      	lsls	r3, r3, #2
 8004aca:	4413      	add	r3, r2
 8004acc:	685b      	ldr	r3, [r3, #4]
 8004ace:	689b      	ldr	r3, [r3, #8]
 8004ad0:	b29b      	uxth	r3, r3
 8004ad2:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) publishers[i]->topic_;
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4413      	add	r3, r2
 8004ae0:	685b      	ldr	r3, [r3, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) publishers[i]->msg_->getType();
 8004ae6:	687a      	ldr	r2, [r7, #4]
 8004ae8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aea:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004aee:	009b      	lsls	r3, r3, #2
 8004af0:	4413      	add	r3, r2
 8004af2:	685b      	ldr	r3, [r3, #4]
 8004af4:	6859      	ldr	r1, [r3, #4]
 8004af6:	687a      	ldr	r2, [r7, #4]
 8004af8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004afa:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004afe:	009b      	lsls	r3, r3, #2
 8004b00:	4413      	add	r3, r2
 8004b02:	685b      	ldr	r3, [r3, #4]
 8004b04:	685b      	ldr	r3, [r3, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	3308      	adds	r3, #8
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	4608      	mov	r0, r1
 8004b0e:	4798      	blx	r3
 8004b10:	4603      	mov	r3, r0
 8004b12:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) publishers[i]->msg_->getMD5();
 8004b14:	687a      	ldr	r2, [r7, #4]
 8004b16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b18:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b1c:	009b      	lsls	r3, r3, #2
 8004b1e:	4413      	add	r3, r2
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	6859      	ldr	r1, [r3, #4]
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b28:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b2c:	009b      	lsls	r3, r3, #2
 8004b2e:	4413      	add	r3, r2
 8004b30:	685b      	ldr	r3, [r3, #4]
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	330c      	adds	r3, #12
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4608      	mov	r0, r1
 8004b3c:	4798      	blx	r3
 8004b3e:	4603      	mov	r3, r0
 8004b40:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = OUTPUT_SIZE;
 8004b42:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004b46:	623b      	str	r3, [r7, #32]
        publish(publishers[i]->getEndpointType(), &ti);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	681c      	ldr	r4, [r3, #0]
 8004b4e:	687a      	ldr	r2, [r7, #4]
 8004b50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b52:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8004b56:	009b      	lsls	r3, r3, #2
 8004b58:	4413      	add	r3, r2
 8004b5a:	685b      	ldr	r3, [r3, #4]
 8004b5c:	4618      	mov	r0, r3
 8004b5e:	f7fd f8fc 	bl	8001d5a <_ZN3ros9Publisher15getEndpointTypeEv>
 8004b62:	4601      	mov	r1, r0
 8004b64:	f107 030c 	add.w	r3, r7, #12
 8004b68:	461a      	mov	r2, r3
 8004b6a:	6878      	ldr	r0, [r7, #4]
 8004b6c:	47a0      	blx	r4
    for (i = 0; i < MAX_PUBLISHERS; i++)
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b70:	3301      	adds	r3, #1
 8004b72:	627b      	str	r3, [r7, #36]	; 0x24
 8004b74:	e798      	b.n	8004aa8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x16>
      }
    }
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004b76:	2300      	movs	r3, #0
 8004b78:	627b      	str	r3, [r7, #36]	; 0x24
 8004b7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b7c:	2b18      	cmp	r3, #24
 8004b7e:	dc5f      	bgt.n	8004c40 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1ae>
    {
      if (subscribers[i] != 0) // non-empty slot
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b84:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d053      	beq.n	8004c38 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0x1a6>
      {
        ti.topic_id = subscribers[i]->id_;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004b94:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004b98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b9c:	685b      	ldr	r3, [r3, #4]
 8004b9e:	b29b      	uxth	r3, r3
 8004ba0:	823b      	strh	r3, [r7, #16]
        ti.topic_name = (char *) subscribers[i]->topic_;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004ba6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004baa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bae:	689b      	ldr	r3, [r3, #8]
 8004bb0:	617b      	str	r3, [r7, #20]
        ti.message_type = (char *) subscribers[i]->getMsgType();
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bb6:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004bba:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bc2:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004bc6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	3308      	adds	r3, #8
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	4608      	mov	r0, r1
 8004bd2:	4798      	blx	r3
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	61bb      	str	r3, [r7, #24]
        ti.md5sum = (char *) subscribers[i]->getMsgMD5();
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004bdc:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004be0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004be8:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004bec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	4608      	mov	r0, r1
 8004bf8:	4798      	blx	r3
 8004bfa:	4603      	mov	r3, r0
 8004bfc:	61fb      	str	r3, [r7, #28]
        ti.buffer_size = INPUT_SIZE;
 8004bfe:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004c02:	623b      	str	r3, [r7, #32]
        publish(subscribers[i]->getEndpointType(), &ti);
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	681c      	ldr	r4, [r3, #0]
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c0e:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004c12:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c1a:	f202 2222 	addw	r2, r2, #546	; 0x222
 8004c1e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	3304      	adds	r3, #4
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	4608      	mov	r0, r1
 8004c2a:	4798      	blx	r3
 8004c2c:	4601      	mov	r1, r0
 8004c2e:	f107 030c 	add.w	r3, r7, #12
 8004c32:	461a      	mov	r2, r3
 8004c34:	6878      	ldr	r0, [r7, #4]
 8004c36:	47a0      	blx	r4
    for (i = 0; i < MAX_SUBSCRIBERS; i++)
 8004c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	627b      	str	r3, [r7, #36]	; 0x24
 8004c3e:	e79c      	b.n	8004b7a <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE15negotiateTopicsEv+0xe8>
      }
    }
    configured_ = true;
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	2201      	movs	r2, #1
 8004c44:	f883 2900 	strb.w	r2, [r3, #2304]	; 0x900
  }
 8004c48:	bf00      	nop
 8004c4a:	372c      	adds	r7, #44	; 0x2c
 8004c4c:	46bd      	mov	sp, r7
 8004c4e:	bd90      	pop	{r4, r7, pc}

08004c50 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh>:
  void syncTime(uint8_t * data)
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b086      	sub	sp, #24
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
 8004c58:	6039      	str	r1, [r7, #0]
    std_msgs::Time t;
 8004c5a:	f107 0308 	add.w	r3, r7, #8
 8004c5e:	4618      	mov	r0, r3
 8004c60:	f7fc fa20 	bl	80010a4 <_ZN8std_msgs4TimeC1Ev>
    uint32_t offset = hardware_.time() - rt_time;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	3304      	adds	r3, #4
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fd f99f 	bl	8001fac <_ZN13STM32Hardware4timeEv>
 8004c6e:	4602      	mov	r2, r0
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	f8d3 3414 	ldr.w	r3, [r3, #1044]	; 0x414
 8004c76:	1ad3      	subs	r3, r2, r3
 8004c78:	617b      	str	r3, [r7, #20]
    t.deserialize(data);
 8004c7a:	f107 0308 	add.w	r3, r7, #8
 8004c7e:	6839      	ldr	r1, [r7, #0]
 8004c80:	4618      	mov	r0, r3
 8004c82:	f7fc fa7f 	bl	8001184 <_ZN8std_msgs4Time11deserializeEPh>
    t.data.sec += offset / 1000;
 8004c86:	68fa      	ldr	r2, [r7, #12]
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	4915      	ldr	r1, [pc, #84]	; (8004ce0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004c8c:	fba1 1303 	umull	r1, r3, r1, r3
 8004c90:	099b      	lsrs	r3, r3, #6
 8004c92:	4413      	add	r3, r2
 8004c94:	60fb      	str	r3, [r7, #12]
    t.data.nsec += (offset % 1000) * 1000000UL;
 8004c96:	6939      	ldr	r1, [r7, #16]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4b11      	ldr	r3, [pc, #68]	; (8004ce0 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x90>)
 8004c9c:	fba3 0302 	umull	r0, r3, r3, r2
 8004ca0:	099b      	lsrs	r3, r3, #6
 8004ca2:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004ca6:	fb00 f303 	mul.w	r3, r0, r3
 8004caa:	1ad3      	subs	r3, r2, r3
 8004cac:	4a0d      	ldr	r2, [pc, #52]	; (8004ce4 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8syncTimeEPh+0x94>)
 8004cae:	fb02 f303 	mul.w	r3, r2, r3
 8004cb2:	440b      	add	r3, r1
 8004cb4:	613b      	str	r3, [r7, #16]
    this->setNow(t.data);
 8004cb6:	f107 0308 	add.w	r3, r7, #8
 8004cba:	3304      	adds	r3, #4
 8004cbc:	4619      	mov	r1, r3
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 f8a4 	bl	8004e0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>
    last_sync_receive_time = hardware_.time();
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	3304      	adds	r3, #4
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fd f96f 	bl	8001fac <_ZN13STM32Hardware4timeEv>
 8004cce:	4602      	mov	r2, r0
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	f8c3 2908 	str.w	r2, [r3, #2312]	; 0x908
  }
 8004cd6:	bf00      	nop
 8004cd8:	3718      	adds	r7, #24
 8004cda:	46bd      	mov	sp, r7
 8004cdc:	bd80      	pop	{r7, pc}
 8004cde:	bf00      	nop
 8004ce0:	10624dd3 	.word	0x10624dd3
 8004ce4:	000f4240 	.word	0x000f4240

08004ce8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE>:

  virtual int publish(int id, const Msg * msg) override
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b088      	sub	sp, #32
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	607a      	str	r2, [r7, #4]
  {
    if (id >= 100 && !configured_)
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	2b63      	cmp	r3, #99	; 0x63
 8004cf8:	dd09      	ble.n	8004d0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
 8004d00:	f083 0301 	eor.w	r3, r3, #1
 8004d04:	b2db      	uxtb	r3, r3
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d001      	beq.n	8004d0e <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x26>
      return 0;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	e077      	b.n	8004dfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>

    /* serialize message */
    int l = msg->serialize(message_out + 7);
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	681b      	ldr	r3, [r3, #0]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	68fa      	ldr	r2, [r7, #12]
 8004d16:	f202 6224 	addw	r2, r2, #1572	; 0x624
 8004d1a:	3207      	adds	r2, #7
 8004d1c:	4611      	mov	r1, r2
 8004d1e:	6878      	ldr	r0, [r7, #4]
 8004d20:	4798      	blx	r3
 8004d22:	6178      	str	r0, [r7, #20]

    /* setup the header */
    message_out[0] = 0xff;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	22ff      	movs	r2, #255	; 0xff
 8004d28:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624
    message_out[1] = PROTOCOL_VER;
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	22fe      	movs	r2, #254	; 0xfe
 8004d30:	f883 2625 	strb.w	r2, [r3, #1573]	; 0x625
    message_out[2] = (uint8_t)((uint16_t)l & 255);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	b2da      	uxtb	r2, r3
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	f883 2626 	strb.w	r2, [r3, #1574]	; 0x626
    message_out[3] = (uint8_t)((uint16_t)l >> 8);
 8004d3e:	697b      	ldr	r3, [r7, #20]
 8004d40:	b29b      	uxth	r3, r3
 8004d42:	121b      	asrs	r3, r3, #8
 8004d44:	b2da      	uxtb	r2, r3
 8004d46:	68fb      	ldr	r3, [r7, #12]
 8004d48:	f883 2627 	strb.w	r2, [r3, #1575]	; 0x627
    message_out[4] = 255 - ((message_out[2] + message_out[3]) % 256);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 2626 	ldrb.w	r2, [r3, #1574]	; 0x626
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	f893 3627 	ldrb.w	r3, [r3, #1575]	; 0x627
 8004d58:	4413      	add	r3, r2
 8004d5a:	b2db      	uxtb	r3, r3
 8004d5c:	43db      	mvns	r3, r3
 8004d5e:	b2da      	uxtb	r2, r3
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	f883 2628 	strb.w	r2, [r3, #1576]	; 0x628
    message_out[5] = (uint8_t)((int16_t)id & 255);
 8004d66:	68bb      	ldr	r3, [r7, #8]
 8004d68:	b2da      	uxtb	r2, r3
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	f883 2629 	strb.w	r2, [r3, #1577]	; 0x629
    message_out[6] = (uint8_t)((int16_t)id >> 8);
 8004d70:	68bb      	ldr	r3, [r7, #8]
 8004d72:	b21b      	sxth	r3, r3
 8004d74:	121b      	asrs	r3, r3, #8
 8004d76:	b2da      	uxtb	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a

    /* calculate checksum */
    int chk = 0;
 8004d7e:	2300      	movs	r3, #0
 8004d80:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004d82:	2305      	movs	r3, #5
 8004d84:	61bb      	str	r3, [r7, #24]
 8004d86:	697b      	ldr	r3, [r7, #20]
 8004d88:	3306      	adds	r3, #6
 8004d8a:	69ba      	ldr	r2, [r7, #24]
 8004d8c:	429a      	cmp	r2, r3
 8004d8e:	dc0d      	bgt.n	8004dac <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0xc4>
      chk += message_out[i];
 8004d90:	68fa      	ldr	r2, [r7, #12]
 8004d92:	69bb      	ldr	r3, [r7, #24]
 8004d94:	4413      	add	r3, r2
 8004d96:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004d9a:	781b      	ldrb	r3, [r3, #0]
 8004d9c:	461a      	mov	r2, r3
 8004d9e:	69fb      	ldr	r3, [r7, #28]
 8004da0:	4413      	add	r3, r2
 8004da2:	61fb      	str	r3, [r7, #28]
    for (int i = 5; i < l + 7; i++)
 8004da4:	69bb      	ldr	r3, [r7, #24]
 8004da6:	3301      	adds	r3, #1
 8004da8:	61bb      	str	r3, [r7, #24]
 8004daa:	e7ec      	b.n	8004d86 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x9e>
    l += 7;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	3307      	adds	r3, #7
 8004db0:	617b      	str	r3, [r7, #20]
    message_out[l++] = 255 - (chk % 256);
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	425a      	negs	r2, r3
 8004db6:	b2db      	uxtb	r3, r3
 8004db8:	b2d2      	uxtb	r2, r2
 8004dba:	bf58      	it	pl
 8004dbc:	4253      	negpl	r3, r2
 8004dbe:	b2da      	uxtb	r2, r3
 8004dc0:	697b      	ldr	r3, [r7, #20]
 8004dc2:	1c59      	adds	r1, r3, #1
 8004dc4:	6179      	str	r1, [r7, #20]
 8004dc6:	43d2      	mvns	r2, r2
 8004dc8:	b2d1      	uxtb	r1, r2
 8004dca:	68fa      	ldr	r2, [r7, #12]
 8004dcc:	4413      	add	r3, r2
 8004dce:	460a      	mov	r2, r1
 8004dd0:	f883 2624 	strb.w	r2, [r3, #1572]	; 0x624

    if (l <= OUTPUT_SIZE)
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dda:	dc0a      	bgt.n	8004df2 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x10a>
    {
      hardware_.write(message_out, l);
 8004ddc:	68fb      	ldr	r3, [r7, #12]
 8004dde:	1d18      	adds	r0, r3, #4
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	f203 6324 	addw	r3, r3, #1572	; 0x624
 8004de6:	697a      	ldr	r2, [r7, #20]
 8004de8:	4619      	mov	r1, r3
 8004dea:	f7fd f899 	bl	8001f20 <_ZN13STM32Hardware5writeEPhi>
      return l;
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	e005      	b.n	8004dfe <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x116>
    }
    else
    {
      logerror("Message from device dropped: message larger than buffer.");
 8004df2:	4905      	ldr	r1, [pc, #20]	; (8004e08 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE7publishEiPKNS_3MsgE+0x120>)
 8004df4:	68f8      	ldr	r0, [r7, #12]
 8004df6:	f000 f849 	bl	8004e8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>
      return -1;
 8004dfa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    }
  }
 8004dfe:	4618      	mov	r0, r3
 8004e00:	3720      	adds	r7, #32
 8004e02:	46bd      	mov	sp, r7
 8004e04:	bd80      	pop	{r7, pc}
 8004e06:	bf00      	nop
 8004e08:	08009028 	.word	0x08009028

08004e0c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE>:
  void setNow(const Time & new_now)
 8004e0c:	b580      	push	{r7, lr}
 8004e0e:	b084      	sub	sp, #16
 8004e10:	af00      	add	r7, sp, #0
 8004e12:	6078      	str	r0, [r7, #4]
 8004e14:	6039      	str	r1, [r7, #0]
    uint32_t ms = hardware_.time();
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	3304      	adds	r3, #4
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fd f8c6 	bl	8001fac <_ZN13STM32Hardware4timeEv>
 8004e20:	60f8      	str	r0, [r7, #12]
    sec_offset = new_now.sec - ms / 1000 - 1;
 8004e22:	683b      	ldr	r3, [r7, #0]
 8004e24:	681a      	ldr	r2, [r3, #0]
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	4915      	ldr	r1, [pc, #84]	; (8004e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004e2a:	fba1 1303 	umull	r1, r3, r1, r3
 8004e2e:	099b      	lsrs	r3, r3, #6
 8004e30:	1ad3      	subs	r3, r2, r3
 8004e32:	1e5a      	subs	r2, r3, #1
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f8c3 2418 	str.w	r2, [r3, #1048]	; 0x418
    nsec_offset = new_now.nsec - (ms % 1000) * 1000000UL + 1000000000UL;
 8004e3a:	683b      	ldr	r3, [r7, #0]
 8004e3c:	6859      	ldr	r1, [r3, #4]
 8004e3e:	68fa      	ldr	r2, [r7, #12]
 8004e40:	4b0f      	ldr	r3, [pc, #60]	; (8004e80 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x74>)
 8004e42:	fba3 0302 	umull	r0, r3, r3, r2
 8004e46:	099b      	lsrs	r3, r3, #6
 8004e48:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8004e4c:	fb00 f303 	mul.w	r3, r0, r3
 8004e50:	1ad3      	subs	r3, r2, r3
 8004e52:	4a0c      	ldr	r2, [pc, #48]	; (8004e84 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x78>)
 8004e54:	fb02 f303 	mul.w	r3, r2, r3
 8004e58:	1aca      	subs	r2, r1, r3
 8004e5a:	4b0b      	ldr	r3, [pc, #44]	; (8004e88 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE6setNowERKNS_4TimeE+0x7c>)
 8004e5c:	4413      	add	r3, r2
 8004e5e:	687a      	ldr	r2, [r7, #4]
 8004e60:	f8c2 341c 	str.w	r3, [r2, #1052]	; 0x41c
    normalizeSecNSec(sec_offset, nsec_offset);
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f503 6283 	add.w	r2, r3, #1048	; 0x418
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	f203 431c 	addw	r3, r3, #1052	; 0x41c
 8004e70:	4619      	mov	r1, r3
 8004e72:	4610      	mov	r0, r2
 8004e74:	f000 fac4 	bl	8005400 <_ZN3ros16normalizeSecNSecERmS0_>
  }
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}
 8004e80:	10624dd3 	.word	0x10624dd3
 8004e84:	000f4240 	.word	0x000f4240
 8004e88:	3b9aca00 	.word	0x3b9aca00

08004e8c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE8logerrorEPKc>:
  }
  void logwarn(const char *msg)
  {
    log(rosserial_msgs::Log::WARN, msg);
  }
  void logerror(const char*msg)
 8004e8c:	b580      	push	{r7, lr}
 8004e8e:	b082      	sub	sp, #8
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
 8004e94:	6039      	str	r1, [r7, #0]
  {
    log(rosserial_msgs::Log::ERROR, msg);
 8004e96:	683a      	ldr	r2, [r7, #0]
 8004e98:	2103      	movs	r1, #3
 8004e9a:	6878      	ldr	r0, [r7, #4]
 8004e9c:	f000 f804 	bl	8004ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>
  }
 8004ea0:	bf00      	nop
 8004ea2:	3708      	adds	r7, #8
 8004ea4:	46bd      	mov	sp, r7
 8004ea6:	bd80      	pop	{r7, pc}

08004ea8 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE3logEcPKc>:
  void log(char byte, const char * msg)
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b088      	sub	sp, #32
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	60f8      	str	r0, [r7, #12]
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	607a      	str	r2, [r7, #4]
 8004eb4:	72fb      	strb	r3, [r7, #11]
    rosserial_msgs::Log l;
 8004eb6:	f107 0314 	add.w	r3, r7, #20
 8004eba:	4618      	mov	r0, r3
 8004ebc:	f7fc fba6 	bl	800160c <_ZN14rosserial_msgs3LogC1Ev>
    l.level = byte;
 8004ec0:	7afb      	ldrb	r3, [r7, #11]
 8004ec2:	763b      	strb	r3, [r7, #24]
    l.msg = (char*)msg;
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	61fb      	str	r3, [r7, #28]
    publish(rosserial_msgs::TopicInfo::ID_LOG, &l);
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f107 0214 	add.w	r2, r7, #20
 8004ed2:	2107      	movs	r1, #7
 8004ed4:	68f8      	ldr	r0, [r7, #12]
 8004ed6:	4798      	blx	r3
  }
 8004ed8:	bf00      	nop
 8004eda:	3720      	adds	r7, #32
 8004edc:	46bd      	mov	sp, r7
 8004ede:	bd80      	pop	{r7, pc}

08004ee0 <_Z41__static_initialization_and_destruction_0ii>:
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2b01      	cmp	r3, #1
 8004eee:	d110      	bne.n	8004f12 <_Z41__static_initialization_and_destruction_0ii+0x32>
 8004ef0:	683b      	ldr	r3, [r7, #0]
 8004ef2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d10b      	bne.n	8004f12 <_Z41__static_initialization_and_destruction_0ii+0x32>
ros::NodeHandle nh;
 8004efa:	4808      	ldr	r0, [pc, #32]	; (8004f1c <_Z41__static_initialization_and_destruction_0ii+0x3c>)
 8004efc:	f7ff fa4c 	bl	8004398 <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EEC1Ev>
sensor_msgs::Imu BNO;
 8004f00:	4807      	ldr	r0, [pc, #28]	; (8004f20 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004f02:	f7fe fc99 	bl	8003838 <_ZN11sensor_msgs3ImuC1Ev>
ros::Publisher bno("BNO", &BNO);
 8004f06:	2300      	movs	r3, #0
 8004f08:	4a05      	ldr	r2, [pc, #20]	; (8004f20 <_Z41__static_initialization_and_destruction_0ii+0x40>)
 8004f0a:	4906      	ldr	r1, [pc, #24]	; (8004f24 <_Z41__static_initialization_and_destruction_0ii+0x44>)
 8004f0c:	4806      	ldr	r0, [pc, #24]	; (8004f28 <_Z41__static_initialization_and_destruction_0ii+0x48>)
 8004f0e:	f7fc fef9 	bl	8001d04 <_ZN3ros9PublisherC1EPKcPNS_3MsgEi>
}
 8004f12:	bf00      	nop
 8004f14:	3708      	adds	r7, #8
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}
 8004f1a:	bf00      	nop
 8004f1c:	200000c0 	.word	0x200000c0
 8004f20:	20000a00 	.word	0x20000a00
 8004f24:	08009064 	.word	0x08009064
 8004f28:	20000b58 	.word	0x20000b58

08004f2c <_ZN3ros11NodeHandle_I13STM32HardwareLi25ELi25ELi512ELi512EE9connectedEv>:
  virtual bool connected() override
 8004f2c:	b480      	push	{r7}
 8004f2e:	b083      	sub	sp, #12
 8004f30:	af00      	add	r7, sp, #0
 8004f32:	6078      	str	r0, [r7, #4]
    return configured_;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	f893 3900 	ldrb.w	r3, [r3, #2304]	; 0x900
  };
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	370c      	adds	r7, #12
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr

08004f46 <_GLOBAL__sub_I_IMU_Euler>:
 8004f46:	b580      	push	{r7, lr}
 8004f48:	af00      	add	r7, sp, #0
 8004f4a:	f64f 71ff 	movw	r1, #65535	; 0xffff
 8004f4e:	2001      	movs	r0, #1
 8004f50:	f7ff ffc6 	bl	8004ee0 <_Z41__static_initialization_and_destruction_0ii>
 8004f54:	bd80      	pop	{r7, pc}
	...

08004f58 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004f58:	b480      	push	{r7}
 8004f5a:	b083      	sub	sp, #12
 8004f5c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004f5e:	2300      	movs	r3, #0
 8004f60:	607b      	str	r3, [r7, #4]
 8004f62:	4b10      	ldr	r3, [pc, #64]	; (8004fa4 <HAL_MspInit+0x4c>)
 8004f64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f66:	4a0f      	ldr	r2, [pc, #60]	; (8004fa4 <HAL_MspInit+0x4c>)
 8004f68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004f6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004f6e:	4b0d      	ldr	r3, [pc, #52]	; (8004fa4 <HAL_MspInit+0x4c>)
 8004f70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004f76:	607b      	str	r3, [r7, #4]
 8004f78:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004f7a:	2300      	movs	r3, #0
 8004f7c:	603b      	str	r3, [r7, #0]
 8004f7e:	4b09      	ldr	r3, [pc, #36]	; (8004fa4 <HAL_MspInit+0x4c>)
 8004f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f82:	4a08      	ldr	r2, [pc, #32]	; (8004fa4 <HAL_MspInit+0x4c>)
 8004f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f88:	6413      	str	r3, [r2, #64]	; 0x40
 8004f8a:	4b06      	ldr	r3, [pc, #24]	; (8004fa4 <HAL_MspInit+0x4c>)
 8004f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f92:	603b      	str	r3, [r7, #0]
 8004f94:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004f96:	bf00      	nop
 8004f98:	370c      	adds	r7, #12
 8004f9a:	46bd      	mov	sp, r7
 8004f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa0:	4770      	bx	lr
 8004fa2:	bf00      	nop
 8004fa4:	40023800 	.word	0x40023800

08004fa8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8004fa8:	b580      	push	{r7, lr}
 8004faa:	b08a      	sub	sp, #40	; 0x28
 8004fac:	af00      	add	r7, sp, #0
 8004fae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004fb0:	f107 0314 	add.w	r3, r7, #20
 8004fb4:	2200      	movs	r2, #0
 8004fb6:	601a      	str	r2, [r3, #0]
 8004fb8:	605a      	str	r2, [r3, #4]
 8004fba:	609a      	str	r2, [r3, #8]
 8004fbc:	60da      	str	r2, [r3, #12]
 8004fbe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a48      	ldr	r2, [pc, #288]	; (80050e8 <HAL_I2C_MspInit+0x140>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	f040 8089 	bne.w	80050de <HAL_I2C_MspInit+0x136>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004fcc:	2300      	movs	r3, #0
 8004fce:	613b      	str	r3, [r7, #16]
 8004fd0:	4b46      	ldr	r3, [pc, #280]	; (80050ec <HAL_I2C_MspInit+0x144>)
 8004fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fd4:	4a45      	ldr	r2, [pc, #276]	; (80050ec <HAL_I2C_MspInit+0x144>)
 8004fd6:	f043 0302 	orr.w	r3, r3, #2
 8004fda:	6313      	str	r3, [r2, #48]	; 0x30
 8004fdc:	4b43      	ldr	r3, [pc, #268]	; (80050ec <HAL_I2C_MspInit+0x144>)
 8004fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004fe0:	f003 0302 	and.w	r3, r3, #2
 8004fe4:	613b      	str	r3, [r7, #16]
 8004fe6:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8004fe8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004fee:	2312      	movs	r3, #18
 8004ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8004ff2:	2301      	movs	r3, #1
 8004ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004ff6:	2303      	movs	r3, #3
 8004ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004ffa:	2304      	movs	r3, #4
 8004ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004ffe:	f107 0314 	add.w	r3, r7, #20
 8005002:	4619      	mov	r1, r3
 8005004:	483a      	ldr	r0, [pc, #232]	; (80050f0 <HAL_I2C_MspInit+0x148>)
 8005006:	f000 fffb 	bl	8006000 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800500a:	2300      	movs	r3, #0
 800500c:	60fb      	str	r3, [r7, #12]
 800500e:	4b37      	ldr	r3, [pc, #220]	; (80050ec <HAL_I2C_MspInit+0x144>)
 8005010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005012:	4a36      	ldr	r2, [pc, #216]	; (80050ec <HAL_I2C_MspInit+0x144>)
 8005014:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005018:	6413      	str	r3, [r2, #64]	; 0x40
 800501a:	4b34      	ldr	r3, [pc, #208]	; (80050ec <HAL_I2C_MspInit+0x144>)
 800501c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800501e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8005022:	60fb      	str	r3, [r7, #12]
 8005024:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8005026:	4b33      	ldr	r3, [pc, #204]	; (80050f4 <HAL_I2C_MspInit+0x14c>)
 8005028:	4a33      	ldr	r2, [pc, #204]	; (80050f8 <HAL_I2C_MspInit+0x150>)
 800502a:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800502c:	4b31      	ldr	r3, [pc, #196]	; (80050f4 <HAL_I2C_MspInit+0x14c>)
 800502e:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8005032:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005034:	4b2f      	ldr	r3, [pc, #188]	; (80050f4 <HAL_I2C_MspInit+0x14c>)
 8005036:	2200      	movs	r2, #0
 8005038:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800503a:	4b2e      	ldr	r3, [pc, #184]	; (80050f4 <HAL_I2C_MspInit+0x14c>)
 800503c:	2200      	movs	r2, #0
 800503e:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8005040:	4b2c      	ldr	r3, [pc, #176]	; (80050f4 <HAL_I2C_MspInit+0x14c>)
 8005042:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005046:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005048:	4b2a      	ldr	r3, [pc, #168]	; (80050f4 <HAL_I2C_MspInit+0x14c>)
 800504a:	2200      	movs	r2, #0
 800504c:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800504e:	4b29      	ldr	r3, [pc, #164]	; (80050f4 <HAL_I2C_MspInit+0x14c>)
 8005050:	2200      	movs	r2, #0
 8005052:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8005054:	4b27      	ldr	r3, [pc, #156]	; (80050f4 <HAL_I2C_MspInit+0x14c>)
 8005056:	2200      	movs	r2, #0
 8005058:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800505a:	4b26      	ldr	r3, [pc, #152]	; (80050f4 <HAL_I2C_MspInit+0x14c>)
 800505c:	2200      	movs	r2, #0
 800505e:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8005060:	4b24      	ldr	r3, [pc, #144]	; (80050f4 <HAL_I2C_MspInit+0x14c>)
 8005062:	2200      	movs	r2, #0
 8005064:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8005066:	4823      	ldr	r0, [pc, #140]	; (80050f4 <HAL_I2C_MspInit+0x14c>)
 8005068:	f000 fbc8 	bl	80057fc <HAL_DMA_Init>
 800506c:	4603      	mov	r3, r0
 800506e:	2b00      	cmp	r3, #0
 8005070:	d001      	beq.n	8005076 <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8005072:	f7fb fff1 	bl	8001058 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmarx,hdma_i2c1_rx);
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	4a1e      	ldr	r2, [pc, #120]	; (80050f4 <HAL_I2C_MspInit+0x14c>)
 800507a:	639a      	str	r2, [r3, #56]	; 0x38
 800507c:	4a1d      	ldr	r2, [pc, #116]	; (80050f4 <HAL_I2C_MspInit+0x14c>)
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Stream6;
 8005082:	4b1e      	ldr	r3, [pc, #120]	; (80050fc <HAL_I2C_MspInit+0x154>)
 8005084:	4a1e      	ldr	r2, [pc, #120]	; (8005100 <HAL_I2C_MspInit+0x158>)
 8005086:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Channel = DMA_CHANNEL_1;
 8005088:	4b1c      	ldr	r3, [pc, #112]	; (80050fc <HAL_I2C_MspInit+0x154>)
 800508a:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800508e:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8005090:	4b1a      	ldr	r3, [pc, #104]	; (80050fc <HAL_I2C_MspInit+0x154>)
 8005092:	2240      	movs	r2, #64	; 0x40
 8005094:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005096:	4b19      	ldr	r3, [pc, #100]	; (80050fc <HAL_I2C_MspInit+0x154>)
 8005098:	2200      	movs	r2, #0
 800509a:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 800509c:	4b17      	ldr	r3, [pc, #92]	; (80050fc <HAL_I2C_MspInit+0x154>)
 800509e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80050a2:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80050a4:	4b15      	ldr	r3, [pc, #84]	; (80050fc <HAL_I2C_MspInit+0x154>)
 80050a6:	2200      	movs	r2, #0
 80050a8:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80050aa:	4b14      	ldr	r3, [pc, #80]	; (80050fc <HAL_I2C_MspInit+0x154>)
 80050ac:	2200      	movs	r2, #0
 80050ae:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 80050b0:	4b12      	ldr	r3, [pc, #72]	; (80050fc <HAL_I2C_MspInit+0x154>)
 80050b2:	2200      	movs	r2, #0
 80050b4:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80050b6:	4b11      	ldr	r3, [pc, #68]	; (80050fc <HAL_I2C_MspInit+0x154>)
 80050b8:	2200      	movs	r2, #0
 80050ba:	621a      	str	r2, [r3, #32]
    hdma_i2c1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80050bc:	4b0f      	ldr	r3, [pc, #60]	; (80050fc <HAL_I2C_MspInit+0x154>)
 80050be:	2200      	movs	r2, #0
 80050c0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 80050c2:	480e      	ldr	r0, [pc, #56]	; (80050fc <HAL_I2C_MspInit+0x154>)
 80050c4:	f000 fb9a 	bl	80057fc <HAL_DMA_Init>
 80050c8:	4603      	mov	r3, r0
 80050ca:	2b00      	cmp	r3, #0
 80050cc:	d001      	beq.n	80050d2 <HAL_I2C_MspInit+0x12a>
    {
      Error_Handler();
 80050ce:	f7fb ffc3 	bl	8001058 <Error_Handler>
    }

    __HAL_LINKDMA(hi2c,hdmatx,hdma_i2c1_tx);
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	4a09      	ldr	r2, [pc, #36]	; (80050fc <HAL_I2C_MspInit+0x154>)
 80050d6:	635a      	str	r2, [r3, #52]	; 0x34
 80050d8:	4a08      	ldr	r2, [pc, #32]	; (80050fc <HAL_I2C_MspInit+0x154>)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80050de:	bf00      	nop
 80050e0:	3728      	adds	r7, #40	; 0x28
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	40005400 	.word	0x40005400
 80050ec:	40023800 	.word	0x40023800
 80050f0:	40020400 	.word	0x40020400
 80050f4:	20000d54 	.word	0x20000d54
 80050f8:	40026010 	.word	0x40026010
 80050fc:	20000c40 	.word	0x20000c40
 8005100:	400260a0 	.word	0x400260a0

08005104 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005104:	b580      	push	{r7, lr}
 8005106:	b08a      	sub	sp, #40	; 0x28
 8005108:	af00      	add	r7, sp, #0
 800510a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800510c:	f107 0314 	add.w	r3, r7, #20
 8005110:	2200      	movs	r2, #0
 8005112:	601a      	str	r2, [r3, #0]
 8005114:	605a      	str	r2, [r3, #4]
 8005116:	609a      	str	r2, [r3, #8]
 8005118:	60da      	str	r2, [r3, #12]
 800511a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	4a4d      	ldr	r2, [pc, #308]	; (8005258 <HAL_UART_MspInit+0x154>)
 8005122:	4293      	cmp	r3, r2
 8005124:	f040 8093 	bne.w	800524e <HAL_UART_MspInit+0x14a>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8005128:	2300      	movs	r3, #0
 800512a:	613b      	str	r3, [r7, #16]
 800512c:	4b4b      	ldr	r3, [pc, #300]	; (800525c <HAL_UART_MspInit+0x158>)
 800512e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005130:	4a4a      	ldr	r2, [pc, #296]	; (800525c <HAL_UART_MspInit+0x158>)
 8005132:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005136:	6413      	str	r3, [r2, #64]	; 0x40
 8005138:	4b48      	ldr	r3, [pc, #288]	; (800525c <HAL_UART_MspInit+0x158>)
 800513a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800513c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005140:	613b      	str	r3, [r7, #16]
 8005142:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005144:	2300      	movs	r3, #0
 8005146:	60fb      	str	r3, [r7, #12]
 8005148:	4b44      	ldr	r3, [pc, #272]	; (800525c <HAL_UART_MspInit+0x158>)
 800514a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800514c:	4a43      	ldr	r2, [pc, #268]	; (800525c <HAL_UART_MspInit+0x158>)
 800514e:	f043 0308 	orr.w	r3, r3, #8
 8005152:	6313      	str	r3, [r2, #48]	; 0x30
 8005154:	4b41      	ldr	r3, [pc, #260]	; (800525c <HAL_UART_MspInit+0x158>)
 8005156:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005158:	f003 0308 	and.w	r3, r3, #8
 800515c:	60fb      	str	r3, [r7, #12]
 800515e:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8005160:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005164:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005166:	2302      	movs	r3, #2
 8005168:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800516a:	2300      	movs	r3, #0
 800516c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800516e:	2303      	movs	r3, #3
 8005170:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005172:	2307      	movs	r3, #7
 8005174:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005176:	f107 0314 	add.w	r3, r7, #20
 800517a:	4619      	mov	r1, r3
 800517c:	4838      	ldr	r0, [pc, #224]	; (8005260 <HAL_UART_MspInit+0x15c>)
 800517e:	f000 ff3f 	bl	8006000 <HAL_GPIO_Init>

    /* USART3 DMA Init */
    /* USART3_RX Init */
    hdma_usart3_rx.Instance = DMA1_Stream1;
 8005182:	4b38      	ldr	r3, [pc, #224]	; (8005264 <HAL_UART_MspInit+0x160>)
 8005184:	4a38      	ldr	r2, [pc, #224]	; (8005268 <HAL_UART_MspInit+0x164>)
 8005186:	601a      	str	r2, [r3, #0]
    hdma_usart3_rx.Init.Channel = DMA_CHANNEL_4;
 8005188:	4b36      	ldr	r3, [pc, #216]	; (8005264 <HAL_UART_MspInit+0x160>)
 800518a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800518e:	605a      	str	r2, [r3, #4]
    hdma_usart3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8005190:	4b34      	ldr	r3, [pc, #208]	; (8005264 <HAL_UART_MspInit+0x160>)
 8005192:	2200      	movs	r2, #0
 8005194:	609a      	str	r2, [r3, #8]
    hdma_usart3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8005196:	4b33      	ldr	r3, [pc, #204]	; (8005264 <HAL_UART_MspInit+0x160>)
 8005198:	2200      	movs	r2, #0
 800519a:	60da      	str	r2, [r3, #12]
    hdma_usart3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800519c:	4b31      	ldr	r3, [pc, #196]	; (8005264 <HAL_UART_MspInit+0x160>)
 800519e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80051a2:	611a      	str	r2, [r3, #16]
    hdma_usart3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80051a4:	4b2f      	ldr	r3, [pc, #188]	; (8005264 <HAL_UART_MspInit+0x160>)
 80051a6:	2200      	movs	r2, #0
 80051a8:	615a      	str	r2, [r3, #20]
    hdma_usart3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80051aa:	4b2e      	ldr	r3, [pc, #184]	; (8005264 <HAL_UART_MspInit+0x160>)
 80051ac:	2200      	movs	r2, #0
 80051ae:	619a      	str	r2, [r3, #24]
    hdma_usart3_rx.Init.Mode = DMA_NORMAL;
 80051b0:	4b2c      	ldr	r3, [pc, #176]	; (8005264 <HAL_UART_MspInit+0x160>)
 80051b2:	2200      	movs	r2, #0
 80051b4:	61da      	str	r2, [r3, #28]
    hdma_usart3_rx.Init.Priority = DMA_PRIORITY_HIGH;
 80051b6:	4b2b      	ldr	r3, [pc, #172]	; (8005264 <HAL_UART_MspInit+0x160>)
 80051b8:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80051bc:	621a      	str	r2, [r3, #32]
    hdma_usart3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80051be:	4b29      	ldr	r3, [pc, #164]	; (8005264 <HAL_UART_MspInit+0x160>)
 80051c0:	2200      	movs	r2, #0
 80051c2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_rx) != HAL_OK)
 80051c4:	4827      	ldr	r0, [pc, #156]	; (8005264 <HAL_UART_MspInit+0x160>)
 80051c6:	f000 fb19 	bl	80057fc <HAL_DMA_Init>
 80051ca:	4603      	mov	r3, r0
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d001      	beq.n	80051d4 <HAL_UART_MspInit+0xd0>
    {
      Error_Handler();
 80051d0:	f7fb ff42 	bl	8001058 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart3_rx);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	4a23      	ldr	r2, [pc, #140]	; (8005264 <HAL_UART_MspInit+0x160>)
 80051d8:	639a      	str	r2, [r3, #56]	; 0x38
 80051da:	4a22      	ldr	r2, [pc, #136]	; (8005264 <HAL_UART_MspInit+0x160>)
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3_TX Init */
    hdma_usart3_tx.Instance = DMA1_Stream3;
 80051e0:	4b22      	ldr	r3, [pc, #136]	; (800526c <HAL_UART_MspInit+0x168>)
 80051e2:	4a23      	ldr	r2, [pc, #140]	; (8005270 <HAL_UART_MspInit+0x16c>)
 80051e4:	601a      	str	r2, [r3, #0]
    hdma_usart3_tx.Init.Channel = DMA_CHANNEL_4;
 80051e6:	4b21      	ldr	r3, [pc, #132]	; (800526c <HAL_UART_MspInit+0x168>)
 80051e8:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80051ec:	605a      	str	r2, [r3, #4]
    hdma_usart3_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80051ee:	4b1f      	ldr	r3, [pc, #124]	; (800526c <HAL_UART_MspInit+0x168>)
 80051f0:	2240      	movs	r2, #64	; 0x40
 80051f2:	609a      	str	r2, [r3, #8]
    hdma_usart3_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80051f4:	4b1d      	ldr	r3, [pc, #116]	; (800526c <HAL_UART_MspInit+0x168>)
 80051f6:	2200      	movs	r2, #0
 80051f8:	60da      	str	r2, [r3, #12]
    hdma_usart3_tx.Init.MemInc = DMA_MINC_ENABLE;
 80051fa:	4b1c      	ldr	r3, [pc, #112]	; (800526c <HAL_UART_MspInit+0x168>)
 80051fc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005200:	611a      	str	r2, [r3, #16]
    hdma_usart3_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8005202:	4b1a      	ldr	r3, [pc, #104]	; (800526c <HAL_UART_MspInit+0x168>)
 8005204:	2200      	movs	r2, #0
 8005206:	615a      	str	r2, [r3, #20]
    hdma_usart3_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8005208:	4b18      	ldr	r3, [pc, #96]	; (800526c <HAL_UART_MspInit+0x168>)
 800520a:	2200      	movs	r2, #0
 800520c:	619a      	str	r2, [r3, #24]
    hdma_usart3_tx.Init.Mode = DMA_NORMAL;
 800520e:	4b17      	ldr	r3, [pc, #92]	; (800526c <HAL_UART_MspInit+0x168>)
 8005210:	2200      	movs	r2, #0
 8005212:	61da      	str	r2, [r3, #28]
    hdma_usart3_tx.Init.Priority = DMA_PRIORITY_HIGH;
 8005214:	4b15      	ldr	r3, [pc, #84]	; (800526c <HAL_UART_MspInit+0x168>)
 8005216:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 800521a:	621a      	str	r2, [r3, #32]
    hdma_usart3_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800521c:	4b13      	ldr	r3, [pc, #76]	; (800526c <HAL_UART_MspInit+0x168>)
 800521e:	2200      	movs	r2, #0
 8005220:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart3_tx) != HAL_OK)
 8005222:	4812      	ldr	r0, [pc, #72]	; (800526c <HAL_UART_MspInit+0x168>)
 8005224:	f000 faea 	bl	80057fc <HAL_DMA_Init>
 8005228:	4603      	mov	r3, r0
 800522a:	2b00      	cmp	r3, #0
 800522c:	d001      	beq.n	8005232 <HAL_UART_MspInit+0x12e>
    {
      Error_Handler();
 800522e:	f7fb ff13 	bl	8001058 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart3_tx);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	4a0d      	ldr	r2, [pc, #52]	; (800526c <HAL_UART_MspInit+0x168>)
 8005236:	635a      	str	r2, [r3, #52]	; 0x34
 8005238:	4a0c      	ldr	r2, [pc, #48]	; (800526c <HAL_UART_MspInit+0x168>)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800523e:	2200      	movs	r2, #0
 8005240:	2100      	movs	r1, #0
 8005242:	2027      	movs	r0, #39	; 0x27
 8005244:	f000 faa3 	bl	800578e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005248:	2027      	movs	r0, #39	; 0x27
 800524a:	f000 fabc 	bl	80057c6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800524e:	bf00      	nop
 8005250:	3728      	adds	r7, #40	; 0x28
 8005252:	46bd      	mov	sp, r7
 8005254:	bd80      	pop	{r7, pc}
 8005256:	bf00      	nop
 8005258:	40004800 	.word	0x40004800
 800525c:	40023800 	.word	0x40023800
 8005260:	40020c00 	.word	0x40020c00
 8005264:	20000b9c 	.word	0x20000b9c
 8005268:	40026028 	.word	0x40026028
 800526c:	20000cf4 	.word	0x20000cf4
 8005270:	40026058 	.word	0x40026058

08005274 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005278:	e7fe      	b.n	8005278 <NMI_Handler+0x4>

0800527a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800527a:	b480      	push	{r7}
 800527c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800527e:	e7fe      	b.n	800527e <HardFault_Handler+0x4>

08005280 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005280:	b480      	push	{r7}
 8005282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005284:	e7fe      	b.n	8005284 <MemManage_Handler+0x4>

08005286 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005286:	b480      	push	{r7}
 8005288:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800528a:	e7fe      	b.n	800528a <BusFault_Handler+0x4>

0800528c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800528c:	b480      	push	{r7}
 800528e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005290:	e7fe      	b.n	8005290 <UsageFault_Handler+0x4>

08005292 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005292:	b480      	push	{r7}
 8005294:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005296:	bf00      	nop
 8005298:	46bd      	mov	sp, r7
 800529a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800529e:	4770      	bx	lr

080052a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80052a0:	b480      	push	{r7}
 80052a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80052a4:	bf00      	nop
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr

080052ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80052ae:	b480      	push	{r7}
 80052b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80052b2:	bf00      	nop
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80052bc:	b580      	push	{r7, lr}
 80052be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80052c0:	f000 f946 	bl	8005550 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80052c4:	bf00      	nop
 80052c6:	bd80      	pop	{r7, pc}

080052c8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80052c8:	b580      	push	{r7, lr}
 80052ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80052cc:	4802      	ldr	r0, [pc, #8]	; (80052d8 <DMA1_Stream0_IRQHandler+0x10>)
 80052ce:	f000 fc2d 	bl	8005b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80052d2:	bf00      	nop
 80052d4:	bd80      	pop	{r7, pc}
 80052d6:	bf00      	nop
 80052d8:	20000d54 	.word	0x20000d54

080052dc <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_rx);
 80052e0:	4802      	ldr	r0, [pc, #8]	; (80052ec <DMA1_Stream1_IRQHandler+0x10>)
 80052e2:	f000 fc23 	bl	8005b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 80052e6:	bf00      	nop
 80052e8:	bd80      	pop	{r7, pc}
 80052ea:	bf00      	nop
 80052ec:	20000b9c 	.word	0x20000b9c

080052f0 <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 80052f0:	b580      	push	{r7, lr}
 80052f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart3_tx);
 80052f4:	4802      	ldr	r0, [pc, #8]	; (8005300 <DMA1_Stream3_IRQHandler+0x10>)
 80052f6:	f000 fc19 	bl	8005b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 80052fa:	bf00      	nop
 80052fc:	bd80      	pop	{r7, pc}
 80052fe:	bf00      	nop
 8005300:	20000cf4 	.word	0x20000cf4

08005304 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 8005308:	4802      	ldr	r0, [pc, #8]	; (8005314 <DMA1_Stream6_IRQHandler+0x10>)
 800530a:	f000 fc0f 	bl	8005b2c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800530e:	bf00      	nop
 8005310:	bd80      	pop	{r7, pc}
 8005312:	bf00      	nop
 8005314:	20000c40 	.word	0x20000c40

08005318 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800531c:	4802      	ldr	r0, [pc, #8]	; (8005328 <USART3_IRQHandler+0x10>)
 800531e:	f002 fdbd 	bl	8007e9c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005322:	bf00      	nop
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	20000bfc 	.word	0x20000bfc

0800532c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800532c:	b480      	push	{r7}
 800532e:	af00      	add	r7, sp, #0
	return 1;
 8005330:	2301      	movs	r3, #1
}
 8005332:	4618      	mov	r0, r3
 8005334:	46bd      	mov	sp, r7
 8005336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533a:	4770      	bx	lr

0800533c <_kill>:

int _kill(int pid, int sig)
{
 800533c:	b580      	push	{r7, lr}
 800533e:	b082      	sub	sp, #8
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005346:	f003 fc05 	bl	8008b54 <__errno>
 800534a:	4603      	mov	r3, r0
 800534c:	2216      	movs	r2, #22
 800534e:	601a      	str	r2, [r3, #0]
	return -1;
 8005350:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
}
 8005354:	4618      	mov	r0, r3
 8005356:	3708      	adds	r7, #8
 8005358:	46bd      	mov	sp, r7
 800535a:	bd80      	pop	{r7, pc}

0800535c <_exit>:

void _exit (int status)
{
 800535c:	b580      	push	{r7, lr}
 800535e:	b082      	sub	sp, #8
 8005360:	af00      	add	r7, sp, #0
 8005362:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005364:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff ffe7 	bl	800533c <_kill>
	while (1) {}		/* Make sure we hang here */
 800536e:	e7fe      	b.n	800536e <_exit+0x12>

08005370 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8005370:	b580      	push	{r7, lr}
 8005372:	b086      	sub	sp, #24
 8005374:	af00      	add	r7, sp, #0
 8005376:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8005378:	4a14      	ldr	r2, [pc, #80]	; (80053cc <_sbrk+0x5c>)
 800537a:	4b15      	ldr	r3, [pc, #84]	; (80053d0 <_sbrk+0x60>)
 800537c:	1ad3      	subs	r3, r2, r3
 800537e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8005380:	697b      	ldr	r3, [r7, #20]
 8005382:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8005384:	4b13      	ldr	r3, [pc, #76]	; (80053d4 <_sbrk+0x64>)
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	2b00      	cmp	r3, #0
 800538a:	d102      	bne.n	8005392 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800538c:	4b11      	ldr	r3, [pc, #68]	; (80053d4 <_sbrk+0x64>)
 800538e:	4a12      	ldr	r2, [pc, #72]	; (80053d8 <_sbrk+0x68>)
 8005390:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8005392:	4b10      	ldr	r3, [pc, #64]	; (80053d4 <_sbrk+0x64>)
 8005394:	681a      	ldr	r2, [r3, #0]
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	4413      	add	r3, r2
 800539a:	693a      	ldr	r2, [r7, #16]
 800539c:	429a      	cmp	r2, r3
 800539e:	d207      	bcs.n	80053b0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80053a0:	f003 fbd8 	bl	8008b54 <__errno>
 80053a4:	4603      	mov	r3, r0
 80053a6:	220c      	movs	r2, #12
 80053a8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80053aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80053ae:	e009      	b.n	80053c4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80053b0:	4b08      	ldr	r3, [pc, #32]	; (80053d4 <_sbrk+0x64>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80053b6:	4b07      	ldr	r3, [pc, #28]	; (80053d4 <_sbrk+0x64>)
 80053b8:	681a      	ldr	r2, [r3, #0]
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	4413      	add	r3, r2
 80053be:	4a05      	ldr	r2, [pc, #20]	; (80053d4 <_sbrk+0x64>)
 80053c0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80053c2:	68fb      	ldr	r3, [r7, #12]
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3718      	adds	r7, #24
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	20030000 	.word	0x20030000
 80053d0:	00000400 	.word	0x00000400
 80053d4:	20000b6c 	.word	0x20000b6c
 80053d8:	20000dc8 	.word	0x20000dc8

080053dc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80053dc:	b480      	push	{r7}
 80053de:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80053e0:	4b06      	ldr	r3, [pc, #24]	; (80053fc <SystemInit+0x20>)
 80053e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053e6:	4a05      	ldr	r2, [pc, #20]	; (80053fc <SystemInit+0x20>)
 80053e8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80053ec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80053f0:	bf00      	nop
 80053f2:	46bd      	mov	sp, r7
 80053f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	e000ed00 	.word	0xe000ed00

08005400 <_ZN3ros16normalizeSecNSecERmS0_>:
#include "ros/time.h"

namespace ros
{
void normalizeSecNSec(uint32_t& sec, uint32_t& nsec)
{
 8005400:	b480      	push	{r7}
 8005402:	b085      	sub	sp, #20
 8005404:	af00      	add	r7, sp, #0
 8005406:	6078      	str	r0, [r7, #4]
 8005408:	6039      	str	r1, [r7, #0]
  uint32_t nsec_part = nsec % 1000000000UL;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	0a5a      	lsrs	r2, r3, #9
 8005410:	490f      	ldr	r1, [pc, #60]	; (8005450 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 8005412:	fba1 1202 	umull	r1, r2, r1, r2
 8005416:	09d2      	lsrs	r2, r2, #7
 8005418:	490e      	ldr	r1, [pc, #56]	; (8005454 <_ZN3ros16normalizeSecNSecERmS0_+0x54>)
 800541a:	fb01 f202 	mul.w	r2, r1, r2
 800541e:	1a9b      	subs	r3, r3, r2
 8005420:	60fb      	str	r3, [r7, #12]
  uint32_t sec_part = nsec / 1000000000UL;
 8005422:	683b      	ldr	r3, [r7, #0]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	0a5b      	lsrs	r3, r3, #9
 8005428:	4a09      	ldr	r2, [pc, #36]	; (8005450 <_ZN3ros16normalizeSecNSecERmS0_+0x50>)
 800542a:	fba2 2303 	umull	r2, r3, r2, r3
 800542e:	09db      	lsrs	r3, r3, #7
 8005430:	60bb      	str	r3, [r7, #8]
  sec += sec_part;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681a      	ldr	r2, [r3, #0]
 8005436:	68bb      	ldr	r3, [r7, #8]
 8005438:	441a      	add	r2, r3
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	601a      	str	r2, [r3, #0]
  nsec = nsec_part;
 800543e:	683b      	ldr	r3, [r7, #0]
 8005440:	68fa      	ldr	r2, [r7, #12]
 8005442:	601a      	str	r2, [r3, #0]
}
 8005444:	bf00      	nop
 8005446:	3714      	adds	r7, #20
 8005448:	46bd      	mov	sp, r7
 800544a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544e:	4770      	bx	lr
 8005450:	00044b83 	.word	0x00044b83
 8005454:	3b9aca00 	.word	0x3b9aca00

08005458 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8005458:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005490 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800545c:	480d      	ldr	r0, [pc, #52]	; (8005494 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800545e:	490e      	ldr	r1, [pc, #56]	; (8005498 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8005460:	4a0e      	ldr	r2, [pc, #56]	; (800549c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8005462:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005464:	e002      	b.n	800546c <LoopCopyDataInit>

08005466 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005466:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005468:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800546a:	3304      	adds	r3, #4

0800546c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800546c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800546e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8005470:	d3f9      	bcc.n	8005466 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8005472:	4a0b      	ldr	r2, [pc, #44]	; (80054a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8005474:	4c0b      	ldr	r4, [pc, #44]	; (80054a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8005476:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005478:	e001      	b.n	800547e <LoopFillZerobss>

0800547a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800547a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800547c:	3204      	adds	r2, #4

0800547e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800547e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8005480:	d3fb      	bcc.n	800547a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8005482:	f7ff ffab 	bl	80053dc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8005486:	f003 fb6b 	bl	8008b60 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800548a:	f7fb fc07 	bl	8000c9c <main>
  bx  lr    
 800548e:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8005490:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8005494:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8005498:	2000007c 	.word	0x2000007c
  ldr r2, =_sidata
 800549c:	080091b8 	.word	0x080091b8
  ldr r2, =_sbss
 80054a0:	20000080 	.word	0x20000080
  ldr r4, =_ebss
 80054a4:	20000dc8 	.word	0x20000dc8

080054a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80054a8:	e7fe      	b.n	80054a8 <ADC_IRQHandler>
	...

080054ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80054ac:	b580      	push	{r7, lr}
 80054ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80054b0:	4b0e      	ldr	r3, [pc, #56]	; (80054ec <HAL_Init+0x40>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4a0d      	ldr	r2, [pc, #52]	; (80054ec <HAL_Init+0x40>)
 80054b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80054ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80054bc:	4b0b      	ldr	r3, [pc, #44]	; (80054ec <HAL_Init+0x40>)
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	4a0a      	ldr	r2, [pc, #40]	; (80054ec <HAL_Init+0x40>)
 80054c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80054c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80054c8:	4b08      	ldr	r3, [pc, #32]	; (80054ec <HAL_Init+0x40>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	4a07      	ldr	r2, [pc, #28]	; (80054ec <HAL_Init+0x40>)
 80054ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80054d4:	2003      	movs	r0, #3
 80054d6:	f000 f94f 	bl	8005778 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80054da:	2000      	movs	r0, #0
 80054dc:	f000 f808 	bl	80054f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80054e0:	f7ff fd3a 	bl	8004f58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80054e4:	2300      	movs	r3, #0
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	bd80      	pop	{r7, pc}
 80054ea:	bf00      	nop
 80054ec:	40023c00 	.word	0x40023c00

080054f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80054f0:	b580      	push	{r7, lr}
 80054f2:	b082      	sub	sp, #8
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80054f8:	4b12      	ldr	r3, [pc, #72]	; (8005544 <HAL_InitTick+0x54>)
 80054fa:	681a      	ldr	r2, [r3, #0]
 80054fc:	4b12      	ldr	r3, [pc, #72]	; (8005548 <HAL_InitTick+0x58>)
 80054fe:	781b      	ldrb	r3, [r3, #0]
 8005500:	4619      	mov	r1, r3
 8005502:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8005506:	fbb3 f3f1 	udiv	r3, r3, r1
 800550a:	fbb2 f3f3 	udiv	r3, r2, r3
 800550e:	4618      	mov	r0, r3
 8005510:	f000 f967 	bl	80057e2 <HAL_SYSTICK_Config>
 8005514:	4603      	mov	r3, r0
 8005516:	2b00      	cmp	r3, #0
 8005518:	d001      	beq.n	800551e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800551a:	2301      	movs	r3, #1
 800551c:	e00e      	b.n	800553c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	2b0f      	cmp	r3, #15
 8005522:	d80a      	bhi.n	800553a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8005524:	2200      	movs	r2, #0
 8005526:	6879      	ldr	r1, [r7, #4]
 8005528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800552c:	f000 f92f 	bl	800578e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8005530:	4a06      	ldr	r2, [pc, #24]	; (800554c <HAL_InitTick+0x5c>)
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8005536:	2300      	movs	r3, #0
 8005538:	e000      	b.n	800553c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800553a:	2301      	movs	r3, #1
}
 800553c:	4618      	mov	r0, r3
 800553e:	3708      	adds	r7, #8
 8005540:	46bd      	mov	sp, r7
 8005542:	bd80      	pop	{r7, pc}
 8005544:	20000008 	.word	0x20000008
 8005548:	20000010 	.word	0x20000010
 800554c:	2000000c 	.word	0x2000000c

08005550 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8005550:	b480      	push	{r7}
 8005552:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8005554:	4b06      	ldr	r3, [pc, #24]	; (8005570 <HAL_IncTick+0x20>)
 8005556:	781b      	ldrb	r3, [r3, #0]
 8005558:	461a      	mov	r2, r3
 800555a:	4b06      	ldr	r3, [pc, #24]	; (8005574 <HAL_IncTick+0x24>)
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	4413      	add	r3, r2
 8005560:	4a04      	ldr	r2, [pc, #16]	; (8005574 <HAL_IncTick+0x24>)
 8005562:	6013      	str	r3, [r2, #0]
}
 8005564:	bf00      	nop
 8005566:	46bd      	mov	sp, r7
 8005568:	f85d 7b04 	ldr.w	r7, [sp], #4
 800556c:	4770      	bx	lr
 800556e:	bf00      	nop
 8005570:	20000010 	.word	0x20000010
 8005574:	20000db4 	.word	0x20000db4

08005578 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8005578:	b480      	push	{r7}
 800557a:	af00      	add	r7, sp, #0
  return uwTick;
 800557c:	4b03      	ldr	r3, [pc, #12]	; (800558c <HAL_GetTick+0x14>)
 800557e:	681b      	ldr	r3, [r3, #0]
}
 8005580:	4618      	mov	r0, r3
 8005582:	46bd      	mov	sp, r7
 8005584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005588:	4770      	bx	lr
 800558a:	bf00      	nop
 800558c:	20000db4 	.word	0x20000db4

08005590 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8005590:	b580      	push	{r7, lr}
 8005592:	b084      	sub	sp, #16
 8005594:	af00      	add	r7, sp, #0
 8005596:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8005598:	f7ff ffee 	bl	8005578 <HAL_GetTick>
 800559c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80055a8:	d005      	beq.n	80055b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80055aa:	4b0a      	ldr	r3, [pc, #40]	; (80055d4 <HAL_Delay+0x44>)
 80055ac:	781b      	ldrb	r3, [r3, #0]
 80055ae:	461a      	mov	r2, r3
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	4413      	add	r3, r2
 80055b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80055b6:	bf00      	nop
 80055b8:	f7ff ffde 	bl	8005578 <HAL_GetTick>
 80055bc:	4602      	mov	r2, r0
 80055be:	68bb      	ldr	r3, [r7, #8]
 80055c0:	1ad3      	subs	r3, r2, r3
 80055c2:	68fa      	ldr	r2, [r7, #12]
 80055c4:	429a      	cmp	r2, r3
 80055c6:	d8f7      	bhi.n	80055b8 <HAL_Delay+0x28>
  {
  }
}
 80055c8:	bf00      	nop
 80055ca:	bf00      	nop
 80055cc:	3710      	adds	r7, #16
 80055ce:	46bd      	mov	sp, r7
 80055d0:	bd80      	pop	{r7, pc}
 80055d2:	bf00      	nop
 80055d4:	20000010 	.word	0x20000010

080055d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80055d8:	b480      	push	{r7}
 80055da:	b085      	sub	sp, #20
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	f003 0307 	and.w	r3, r3, #7
 80055e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80055e8:	4b0c      	ldr	r3, [pc, #48]	; (800561c <__NVIC_SetPriorityGrouping+0x44>)
 80055ea:	68db      	ldr	r3, [r3, #12]
 80055ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80055f4:	4013      	ands	r3, r2
 80055f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80055fc:	68bb      	ldr	r3, [r7, #8]
 80055fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8005600:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8005604:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005608:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800560a:	4a04      	ldr	r2, [pc, #16]	; (800561c <__NVIC_SetPriorityGrouping+0x44>)
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	60d3      	str	r3, [r2, #12]
}
 8005610:	bf00      	nop
 8005612:	3714      	adds	r7, #20
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr
 800561c:	e000ed00 	.word	0xe000ed00

08005620 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8005620:	b480      	push	{r7}
 8005622:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005624:	4b04      	ldr	r3, [pc, #16]	; (8005638 <__NVIC_GetPriorityGrouping+0x18>)
 8005626:	68db      	ldr	r3, [r3, #12]
 8005628:	0a1b      	lsrs	r3, r3, #8
 800562a:	f003 0307 	and.w	r3, r3, #7
}
 800562e:	4618      	mov	r0, r3
 8005630:	46bd      	mov	sp, r7
 8005632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005636:	4770      	bx	lr
 8005638:	e000ed00 	.word	0xe000ed00

0800563c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800563c:	b480      	push	{r7}
 800563e:	b083      	sub	sp, #12
 8005640:	af00      	add	r7, sp, #0
 8005642:	4603      	mov	r3, r0
 8005644:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005646:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800564a:	2b00      	cmp	r3, #0
 800564c:	db0b      	blt.n	8005666 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800564e:	79fb      	ldrb	r3, [r7, #7]
 8005650:	f003 021f 	and.w	r2, r3, #31
 8005654:	4907      	ldr	r1, [pc, #28]	; (8005674 <__NVIC_EnableIRQ+0x38>)
 8005656:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800565a:	095b      	lsrs	r3, r3, #5
 800565c:	2001      	movs	r0, #1
 800565e:	fa00 f202 	lsl.w	r2, r0, r2
 8005662:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8005666:	bf00      	nop
 8005668:	370c      	adds	r7, #12
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr
 8005672:	bf00      	nop
 8005674:	e000e100 	.word	0xe000e100

08005678 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8005678:	b480      	push	{r7}
 800567a:	b083      	sub	sp, #12
 800567c:	af00      	add	r7, sp, #0
 800567e:	4603      	mov	r3, r0
 8005680:	6039      	str	r1, [r7, #0]
 8005682:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005684:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005688:	2b00      	cmp	r3, #0
 800568a:	db0a      	blt.n	80056a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800568c:	683b      	ldr	r3, [r7, #0]
 800568e:	b2da      	uxtb	r2, r3
 8005690:	490c      	ldr	r1, [pc, #48]	; (80056c4 <__NVIC_SetPriority+0x4c>)
 8005692:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005696:	0112      	lsls	r2, r2, #4
 8005698:	b2d2      	uxtb	r2, r2
 800569a:	440b      	add	r3, r1
 800569c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80056a0:	e00a      	b.n	80056b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	b2da      	uxtb	r2, r3
 80056a6:	4908      	ldr	r1, [pc, #32]	; (80056c8 <__NVIC_SetPriority+0x50>)
 80056a8:	79fb      	ldrb	r3, [r7, #7]
 80056aa:	f003 030f 	and.w	r3, r3, #15
 80056ae:	3b04      	subs	r3, #4
 80056b0:	0112      	lsls	r2, r2, #4
 80056b2:	b2d2      	uxtb	r2, r2
 80056b4:	440b      	add	r3, r1
 80056b6:	761a      	strb	r2, [r3, #24]
}
 80056b8:	bf00      	nop
 80056ba:	370c      	adds	r7, #12
 80056bc:	46bd      	mov	sp, r7
 80056be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c2:	4770      	bx	lr
 80056c4:	e000e100 	.word	0xe000e100
 80056c8:	e000ed00 	.word	0xe000ed00

080056cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b089      	sub	sp, #36	; 0x24
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f003 0307 	and.w	r3, r3, #7
 80056de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80056e0:	69fb      	ldr	r3, [r7, #28]
 80056e2:	f1c3 0307 	rsb	r3, r3, #7
 80056e6:	2b04      	cmp	r3, #4
 80056e8:	bf28      	it	cs
 80056ea:	2304      	movcs	r3, #4
 80056ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80056ee:	69fb      	ldr	r3, [r7, #28]
 80056f0:	3304      	adds	r3, #4
 80056f2:	2b06      	cmp	r3, #6
 80056f4:	d902      	bls.n	80056fc <NVIC_EncodePriority+0x30>
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	3b03      	subs	r3, #3
 80056fa:	e000      	b.n	80056fe <NVIC_EncodePriority+0x32>
 80056fc:	2300      	movs	r3, #0
 80056fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005700:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005704:	69bb      	ldr	r3, [r7, #24]
 8005706:	fa02 f303 	lsl.w	r3, r2, r3
 800570a:	43da      	mvns	r2, r3
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	401a      	ands	r2, r3
 8005710:	697b      	ldr	r3, [r7, #20]
 8005712:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8005714:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005718:	697b      	ldr	r3, [r7, #20]
 800571a:	fa01 f303 	lsl.w	r3, r1, r3
 800571e:	43d9      	mvns	r1, r3
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005724:	4313      	orrs	r3, r2
         );
}
 8005726:	4618      	mov	r0, r3
 8005728:	3724      	adds	r7, #36	; 0x24
 800572a:	46bd      	mov	sp, r7
 800572c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005730:	4770      	bx	lr
	...

08005734 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8005734:	b580      	push	{r7, lr}
 8005736:	b082      	sub	sp, #8
 8005738:	af00      	add	r7, sp, #0
 800573a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	3b01      	subs	r3, #1
 8005740:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005744:	d301      	bcc.n	800574a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8005746:	2301      	movs	r3, #1
 8005748:	e00f      	b.n	800576a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800574a:	4a0a      	ldr	r2, [pc, #40]	; (8005774 <SysTick_Config+0x40>)
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	3b01      	subs	r3, #1
 8005750:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8005752:	210f      	movs	r1, #15
 8005754:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8005758:	f7ff ff8e 	bl	8005678 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800575c:	4b05      	ldr	r3, [pc, #20]	; (8005774 <SysTick_Config+0x40>)
 800575e:	2200      	movs	r2, #0
 8005760:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8005762:	4b04      	ldr	r3, [pc, #16]	; (8005774 <SysTick_Config+0x40>)
 8005764:	2207      	movs	r2, #7
 8005766:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8005768:	2300      	movs	r3, #0
}
 800576a:	4618      	mov	r0, r3
 800576c:	3708      	adds	r7, #8
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}
 8005772:	bf00      	nop
 8005774:	e000e010 	.word	0xe000e010

08005778 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8005778:	b580      	push	{r7, lr}
 800577a:	b082      	sub	sp, #8
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8005780:	6878      	ldr	r0, [r7, #4]
 8005782:	f7ff ff29 	bl	80055d8 <__NVIC_SetPriorityGrouping>
}
 8005786:	bf00      	nop
 8005788:	3708      	adds	r7, #8
 800578a:	46bd      	mov	sp, r7
 800578c:	bd80      	pop	{r7, pc}

0800578e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800578e:	b580      	push	{r7, lr}
 8005790:	b086      	sub	sp, #24
 8005792:	af00      	add	r7, sp, #0
 8005794:	4603      	mov	r3, r0
 8005796:	60b9      	str	r1, [r7, #8]
 8005798:	607a      	str	r2, [r7, #4]
 800579a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800579c:	2300      	movs	r3, #0
 800579e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80057a0:	f7ff ff3e 	bl	8005620 <__NVIC_GetPriorityGrouping>
 80057a4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80057a6:	687a      	ldr	r2, [r7, #4]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	6978      	ldr	r0, [r7, #20]
 80057ac:	f7ff ff8e 	bl	80056cc <NVIC_EncodePriority>
 80057b0:	4602      	mov	r2, r0
 80057b2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057b6:	4611      	mov	r1, r2
 80057b8:	4618      	mov	r0, r3
 80057ba:	f7ff ff5d 	bl	8005678 <__NVIC_SetPriority>
}
 80057be:	bf00      	nop
 80057c0:	3718      	adds	r7, #24
 80057c2:	46bd      	mov	sp, r7
 80057c4:	bd80      	pop	{r7, pc}

080057c6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80057c6:	b580      	push	{r7, lr}
 80057c8:	b082      	sub	sp, #8
 80057ca:	af00      	add	r7, sp, #0
 80057cc:	4603      	mov	r3, r0
 80057ce:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80057d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7ff ff31 	bl	800563c <__NVIC_EnableIRQ>
}
 80057da:	bf00      	nop
 80057dc:	3708      	adds	r7, #8
 80057de:	46bd      	mov	sp, r7
 80057e0:	bd80      	pop	{r7, pc}

080057e2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057e2:	b580      	push	{r7, lr}
 80057e4:	b082      	sub	sp, #8
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f7ff ffa2 	bl	8005734 <SysTick_Config>
 80057f0:	4603      	mov	r3, r0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3708      	adds	r7, #8
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
	...

080057fc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80057fc:	b580      	push	{r7, lr}
 80057fe:	b086      	sub	sp, #24
 8005800:	af00      	add	r7, sp, #0
 8005802:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8005804:	2300      	movs	r3, #0
 8005806:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8005808:	f7ff feb6 	bl	8005578 <HAL_GetTick>
 800580c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	2b00      	cmp	r3, #0
 8005812:	d101      	bne.n	8005818 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8005814:	2301      	movs	r3, #1
 8005816:	e099      	b.n	800594c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	2200      	movs	r2, #0
 800581c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2202      	movs	r2, #2
 8005824:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	681a      	ldr	r2, [r3, #0]
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f022 0201 	bic.w	r2, r2, #1
 8005836:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005838:	e00f      	b.n	800585a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800583a:	f7ff fe9d 	bl	8005578 <HAL_GetTick>
 800583e:	4602      	mov	r2, r0
 8005840:	693b      	ldr	r3, [r7, #16]
 8005842:	1ad3      	subs	r3, r2, r3
 8005844:	2b05      	cmp	r3, #5
 8005846:	d908      	bls.n	800585a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2220      	movs	r2, #32
 800584c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	2203      	movs	r2, #3
 8005852:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8005856:	2303      	movs	r3, #3
 8005858:	e078      	b.n	800594c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	f003 0301 	and.w	r3, r3, #1
 8005864:	2b00      	cmp	r3, #0
 8005866:	d1e8      	bne.n	800583a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8005870:	697a      	ldr	r2, [r7, #20]
 8005872:	4b38      	ldr	r3, [pc, #224]	; (8005954 <HAL_DMA_Init+0x158>)
 8005874:	4013      	ands	r3, r2
 8005876:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	685a      	ldr	r2, [r3, #4]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8005886:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	691b      	ldr	r3, [r3, #16]
 800588c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8005892:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	699b      	ldr	r3, [r3, #24]
 8005898:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800589e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80058a6:	697a      	ldr	r2, [r7, #20]
 80058a8:	4313      	orrs	r3, r2
 80058aa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b0:	2b04      	cmp	r3, #4
 80058b2:	d107      	bne.n	80058c4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058bc:	4313      	orrs	r3, r2
 80058be:	697a      	ldr	r2, [r7, #20]
 80058c0:	4313      	orrs	r3, r2
 80058c2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	697a      	ldr	r2, [r7, #20]
 80058ca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	695b      	ldr	r3, [r3, #20]
 80058d2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0307 	bic.w	r3, r3, #7
 80058da:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e0:	697a      	ldr	r2, [r7, #20]
 80058e2:	4313      	orrs	r3, r2
 80058e4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d117      	bne.n	800591e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058f2:	697a      	ldr	r2, [r7, #20]
 80058f4:	4313      	orrs	r3, r2
 80058f6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d00e      	beq.n	800591e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8005900:	6878      	ldr	r0, [r7, #4]
 8005902:	f000 fb01 	bl	8005f08 <DMA_CheckFifoParam>
 8005906:	4603      	mov	r3, r0
 8005908:	2b00      	cmp	r3, #0
 800590a:	d008      	beq.n	800591e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	2240      	movs	r2, #64	; 0x40
 8005910:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2201      	movs	r2, #1
 8005916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800591a:	2301      	movs	r3, #1
 800591c:	e016      	b.n	800594c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	697a      	ldr	r2, [r7, #20]
 8005924:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f000 fab8 	bl	8005e9c <DMA_CalcBaseAndBitshift>
 800592c:	4603      	mov	r3, r0
 800592e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005934:	223f      	movs	r2, #63	; 0x3f
 8005936:	409a      	lsls	r2, r3
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	2200      	movs	r2, #0
 8005940:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	2201      	movs	r2, #1
 8005946:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800594a:	2300      	movs	r3, #0
}
 800594c:	4618      	mov	r0, r3
 800594e:	3718      	adds	r7, #24
 8005950:	46bd      	mov	sp, r7
 8005952:	bd80      	pop	{r7, pc}
 8005954:	f010803f 	.word	0xf010803f

08005958 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005966:	2300      	movs	r3, #0
 8005968:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800596a:	68fb      	ldr	r3, [r7, #12]
 800596c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800596e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8005976:	2b01      	cmp	r3, #1
 8005978:	d101      	bne.n	800597e <HAL_DMA_Start_IT+0x26>
 800597a:	2302      	movs	r3, #2
 800597c:	e040      	b.n	8005a00 <HAL_DMA_Start_IT+0xa8>
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	2201      	movs	r2, #1
 8005982:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800598c:	b2db      	uxtb	r3, r3
 800598e:	2b01      	cmp	r3, #1
 8005990:	d12f      	bne.n	80059f2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2202      	movs	r2, #2
 8005996:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	2200      	movs	r2, #0
 800599e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	687a      	ldr	r2, [r7, #4]
 80059a4:	68b9      	ldr	r1, [r7, #8]
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 fa4a 	bl	8005e40 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80059b0:	223f      	movs	r2, #63	; 0x3f
 80059b2:	409a      	lsls	r2, r3
 80059b4:	693b      	ldr	r3, [r7, #16]
 80059b6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80059b8:	68fb      	ldr	r3, [r7, #12]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	681a      	ldr	r2, [r3, #0]
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	f042 0216 	orr.w	r2, r2, #22
 80059c6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d007      	beq.n	80059e0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	681a      	ldr	r2, [r3, #0]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f042 0208 	orr.w	r2, r2, #8
 80059de:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f042 0201 	orr.w	r2, r2, #1
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	e005      	b.n	80059fe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	2200      	movs	r2, #0
 80059f6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80059fa:	2302      	movs	r3, #2
 80059fc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80059fe:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3718      	adds	r7, #24
 8005a04:	46bd      	mov	sp, r7
 8005a06:	bd80      	pop	{r7, pc}

08005a08 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b084      	sub	sp, #16
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005a14:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8005a16:	f7ff fdaf 	bl	8005578 <HAL_GetTick>
 8005a1a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005a22:	b2db      	uxtb	r3, r3
 8005a24:	2b02      	cmp	r3, #2
 8005a26:	d008      	beq.n	8005a3a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	2280      	movs	r2, #128	; 0x80
 8005a2c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	2200      	movs	r2, #0
 8005a32:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8005a36:	2301      	movs	r3, #1
 8005a38:	e052      	b.n	8005ae0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f022 0216 	bic.w	r2, r2, #22
 8005a48:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	695a      	ldr	r2, [r3, #20]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005a58:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d103      	bne.n	8005a6a <HAL_DMA_Abort+0x62>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d007      	beq.n	8005a7a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	f022 0208 	bic.w	r2, r2, #8
 8005a78:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0201 	bic.w	r2, r2, #1
 8005a88:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005a8a:	e013      	b.n	8005ab4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8005a8c:	f7ff fd74 	bl	8005578 <HAL_GetTick>
 8005a90:	4602      	mov	r2, r0
 8005a92:	68bb      	ldr	r3, [r7, #8]
 8005a94:	1ad3      	subs	r3, r2, r3
 8005a96:	2b05      	cmp	r3, #5
 8005a98:	d90c      	bls.n	8005ab4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	2220      	movs	r2, #32
 8005a9e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	2200      	movs	r2, #0
 8005aa4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2203      	movs	r2, #3
 8005aac:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8005ab0:	2303      	movs	r3, #3
 8005ab2:	e015      	b.n	8005ae0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	f003 0301 	and.w	r3, r3, #1
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d1e4      	bne.n	8005a8c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ac6:	223f      	movs	r2, #63	; 0x3f
 8005ac8:	409a      	lsls	r2, r3
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2201      	movs	r2, #1
 8005ada:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8005ade:	2300      	movs	r3, #0
}
 8005ae0:	4618      	mov	r0, r3
 8005ae2:	3710      	adds	r7, #16
 8005ae4:	46bd      	mov	sp, r7
 8005ae6:	bd80      	pop	{r7, pc}

08005ae8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b083      	sub	sp, #12
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005af6:	b2db      	uxtb	r3, r3
 8005af8:	2b02      	cmp	r3, #2
 8005afa:	d004      	beq.n	8005b06 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2280      	movs	r2, #128	; 0x80
 8005b00:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e00c      	b.n	8005b20 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	2205      	movs	r2, #5
 8005b0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f022 0201 	bic.w	r2, r2, #1
 8005b1c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8005b1e:	2300      	movs	r3, #0
}
 8005b20:	4618      	mov	r0, r3
 8005b22:	370c      	adds	r7, #12
 8005b24:	46bd      	mov	sp, r7
 8005b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2a:	4770      	bx	lr

08005b2c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b086      	sub	sp, #24
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8005b34:	2300      	movs	r3, #0
 8005b36:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8005b38:	4b92      	ldr	r3, [pc, #584]	; (8005d84 <HAL_DMA_IRQHandler+0x258>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	4a92      	ldr	r2, [pc, #584]	; (8005d88 <HAL_DMA_IRQHandler+0x25c>)
 8005b3e:	fba2 2303 	umull	r2, r3, r2, r3
 8005b42:	0a9b      	lsrs	r3, r3, #10
 8005b44:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005b4a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8005b4c:	693b      	ldr	r3, [r7, #16]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b56:	2208      	movs	r2, #8
 8005b58:	409a      	lsls	r2, r3
 8005b5a:	68fb      	ldr	r3, [r7, #12]
 8005b5c:	4013      	ands	r3, r2
 8005b5e:	2b00      	cmp	r3, #0
 8005b60:	d01a      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	681b      	ldr	r3, [r3, #0]
 8005b68:	f003 0304 	and.w	r3, r3, #4
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d013      	beq.n	8005b98 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	681a      	ldr	r2, [r3, #0]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f022 0204 	bic.w	r2, r2, #4
 8005b7e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b84:	2208      	movs	r2, #8
 8005b86:	409a      	lsls	r2, r3
 8005b88:	693b      	ldr	r3, [r7, #16]
 8005b8a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005b90:	f043 0201 	orr.w	r2, r3, #1
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005b9c:	2201      	movs	r2, #1
 8005b9e:	409a      	lsls	r2, r3
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	4013      	ands	r3, r2
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d012      	beq.n	8005bce <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	695b      	ldr	r3, [r3, #20]
 8005bae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb2:	2b00      	cmp	r3, #0
 8005bb4:	d00b      	beq.n	8005bce <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bba:	2201      	movs	r2, #1
 8005bbc:	409a      	lsls	r2, r3
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bc6:	f043 0202 	orr.w	r2, r3, #2
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bd2:	2204      	movs	r2, #4
 8005bd4:	409a      	lsls	r2, r3
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	4013      	ands	r3, r2
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d012      	beq.n	8005c04 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f003 0302 	and.w	r3, r3, #2
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d00b      	beq.n	8005c04 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005bf0:	2204      	movs	r2, #4
 8005bf2:	409a      	lsls	r2, r3
 8005bf4:	693b      	ldr	r3, [r7, #16]
 8005bf6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005bfc:	f043 0204 	orr.w	r2, r3, #4
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c08:	2210      	movs	r2, #16
 8005c0a:	409a      	lsls	r2, r3
 8005c0c:	68fb      	ldr	r3, [r7, #12]
 8005c0e:	4013      	ands	r3, r2
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d043      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0308 	and.w	r3, r3, #8
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d03c      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c26:	2210      	movs	r2, #16
 8005c28:	409a      	lsls	r2, r3
 8005c2a:	693b      	ldr	r3, [r7, #16]
 8005c2c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	681b      	ldr	r3, [r3, #0]
 8005c34:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d018      	beq.n	8005c6e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d108      	bne.n	8005c5c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c4e:	2b00      	cmp	r3, #0
 8005c50:	d024      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	4798      	blx	r3
 8005c5a:	e01f      	b.n	8005c9c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d01b      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c68:	6878      	ldr	r0, [r7, #4]
 8005c6a:	4798      	blx	r3
 8005c6c:	e016      	b.n	8005c9c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d107      	bne.n	8005c8c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	681a      	ldr	r2, [r3, #0]
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	681b      	ldr	r3, [r3, #0]
 8005c86:	f022 0208 	bic.w	r2, r2, #8
 8005c8a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c98:	6878      	ldr	r0, [r7, #4]
 8005c9a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005ca0:	2220      	movs	r2, #32
 8005ca2:	409a      	lsls	r2, r3
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	f000 808e 	beq.w	8005dca <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	f003 0310 	and.w	r3, r3, #16
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 8086 	beq.w	8005dca <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005cc2:	2220      	movs	r2, #32
 8005cc4:	409a      	lsls	r2, r3
 8005cc6:	693b      	ldr	r3, [r7, #16]
 8005cc8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005cd0:	b2db      	uxtb	r3, r3
 8005cd2:	2b05      	cmp	r3, #5
 8005cd4:	d136      	bne.n	8005d44 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f022 0216 	bic.w	r2, r2, #22
 8005ce4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	695a      	ldr	r2, [r3, #20]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005cf4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d103      	bne.n	8005d06 <HAL_DMA_IRQHandler+0x1da>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005d02:	2b00      	cmp	r3, #0
 8005d04:	d007      	beq.n	8005d16 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f022 0208 	bic.w	r2, r2, #8
 8005d14:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005d1a:	223f      	movs	r2, #63	; 0x3f
 8005d1c:	409a      	lsls	r2, r3
 8005d1e:	693b      	ldr	r3, [r7, #16]
 8005d20:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	2200      	movs	r2, #0
 8005d26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	2201      	movs	r2, #1
 8005d2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d07d      	beq.n	8005e36 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005d3e:	6878      	ldr	r0, [r7, #4]
 8005d40:	4798      	blx	r3
        }
        return;
 8005d42:	e078      	b.n	8005e36 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d01c      	beq.n	8005d8c <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d108      	bne.n	8005d72 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d030      	beq.n	8005dca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6c:	6878      	ldr	r0, [r7, #4]
 8005d6e:	4798      	blx	r3
 8005d70:	e02b      	b.n	8005dca <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d027      	beq.n	8005dca <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d7e:	6878      	ldr	r0, [r7, #4]
 8005d80:	4798      	blx	r3
 8005d82:	e022      	b.n	8005dca <HAL_DMA_IRQHandler+0x29e>
 8005d84:	20000008 	.word	0x20000008
 8005d88:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d10f      	bne.n	8005dba <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	681a      	ldr	r2, [r3, #0]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f022 0210 	bic.w	r2, r2, #16
 8005da8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	2201      	movs	r2, #1
 8005db6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	d003      	beq.n	8005dca <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005dc6:	6878      	ldr	r0, [r7, #4]
 8005dc8:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d032      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005dd6:	f003 0301 	and.w	r3, r3, #1
 8005dda:	2b00      	cmp	r3, #0
 8005ddc:	d022      	beq.n	8005e24 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	2205      	movs	r2, #5
 8005de2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	681a      	ldr	r2, [r3, #0]
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	f022 0201 	bic.w	r2, r2, #1
 8005df4:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8005df6:	68bb      	ldr	r3, [r7, #8]
 8005df8:	3301      	adds	r3, #1
 8005dfa:	60bb      	str	r3, [r7, #8]
 8005dfc:	697a      	ldr	r2, [r7, #20]
 8005dfe:	429a      	cmp	r2, r3
 8005e00:	d307      	bcc.n	8005e12 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d1f2      	bne.n	8005df6 <HAL_DMA_IRQHandler+0x2ca>
 8005e10:	e000      	b.n	8005e14 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8005e12:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2200      	movs	r2, #0
 8005e18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	2201      	movs	r2, #1
 8005e20:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d005      	beq.n	8005e38 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e30:	6878      	ldr	r0, [r7, #4]
 8005e32:	4798      	blx	r3
 8005e34:	e000      	b.n	8005e38 <HAL_DMA_IRQHandler+0x30c>
        return;
 8005e36:	bf00      	nop
    }
  }
}
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop

08005e40 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b085      	sub	sp, #20
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	60f8      	str	r0, [r7, #12]
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	607a      	str	r2, [r7, #4]
 8005e4c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	681b      	ldr	r3, [r3, #0]
 8005e52:	681a      	ldr	r2, [r3, #0]
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	681b      	ldr	r3, [r3, #0]
 8005e58:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005e5c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8005e5e:	68fb      	ldr	r3, [r7, #12]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	683a      	ldr	r2, [r7, #0]
 8005e64:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8005e66:	68fb      	ldr	r3, [r7, #12]
 8005e68:	689b      	ldr	r3, [r3, #8]
 8005e6a:	2b40      	cmp	r3, #64	; 0x40
 8005e6c:	d108      	bne.n	8005e80 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	687a      	ldr	r2, [r7, #4]
 8005e74:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	68ba      	ldr	r2, [r7, #8]
 8005e7c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8005e7e:	e007      	b.n	8005e90 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	68ba      	ldr	r2, [r7, #8]
 8005e86:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	687a      	ldr	r2, [r7, #4]
 8005e8e:	60da      	str	r2, [r3, #12]
}
 8005e90:	bf00      	nop
 8005e92:	3714      	adds	r7, #20
 8005e94:	46bd      	mov	sp, r7
 8005e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9a:	4770      	bx	lr

08005e9c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8005e9c:	b480      	push	{r7}
 8005e9e:	b085      	sub	sp, #20
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	b2db      	uxtb	r3, r3
 8005eaa:	3b10      	subs	r3, #16
 8005eac:	4a14      	ldr	r2, [pc, #80]	; (8005f00 <DMA_CalcBaseAndBitshift+0x64>)
 8005eae:	fba2 2303 	umull	r2, r3, r2, r3
 8005eb2:	091b      	lsrs	r3, r3, #4
 8005eb4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8005eb6:	4a13      	ldr	r2, [pc, #76]	; (8005f04 <DMA_CalcBaseAndBitshift+0x68>)
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	4413      	add	r3, r2
 8005ebc:	781b      	ldrb	r3, [r3, #0]
 8005ebe:	461a      	mov	r2, r3
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	2b03      	cmp	r3, #3
 8005ec8:	d909      	bls.n	8005ede <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ed2:	f023 0303 	bic.w	r3, r3, #3
 8005ed6:	1d1a      	adds	r2, r3, #4
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	659a      	str	r2, [r3, #88]	; 0x58
 8005edc:	e007      	b.n	8005eee <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8005ee6:	f023 0303 	bic.w	r3, r3, #3
 8005eea:	687a      	ldr	r2, [r7, #4]
 8005eec:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	3714      	adds	r7, #20
 8005ef6:	46bd      	mov	sp, r7
 8005ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005efc:	4770      	bx	lr
 8005efe:	bf00      	nop
 8005f00:	aaaaaaab 	.word	0xaaaaaaab
 8005f04:	0800919c 	.word	0x0800919c

08005f08 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8005f08:	b480      	push	{r7}
 8005f0a:	b085      	sub	sp, #20
 8005f0c:	af00      	add	r7, sp, #0
 8005f0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f10:	2300      	movs	r3, #0
 8005f12:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f18:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	699b      	ldr	r3, [r3, #24]
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d11f      	bne.n	8005f62 <DMA_CheckFifoParam+0x5a>
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2b03      	cmp	r3, #3
 8005f26:	d856      	bhi.n	8005fd6 <DMA_CheckFifoParam+0xce>
 8005f28:	a201      	add	r2, pc, #4	; (adr r2, 8005f30 <DMA_CheckFifoParam+0x28>)
 8005f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f2e:	bf00      	nop
 8005f30:	08005f41 	.word	0x08005f41
 8005f34:	08005f53 	.word	0x08005f53
 8005f38:	08005f41 	.word	0x08005f41
 8005f3c:	08005fd7 	.word	0x08005fd7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f44:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d046      	beq.n	8005fda <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f50:	e043      	b.n	8005fda <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f56:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005f5a:	d140      	bne.n	8005fde <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8005f5c:	2301      	movs	r3, #1
 8005f5e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f60:	e03d      	b.n	8005fde <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	699b      	ldr	r3, [r3, #24]
 8005f66:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005f6a:	d121      	bne.n	8005fb0 <DMA_CheckFifoParam+0xa8>
 8005f6c:	68bb      	ldr	r3, [r7, #8]
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d837      	bhi.n	8005fe2 <DMA_CheckFifoParam+0xda>
 8005f72:	a201      	add	r2, pc, #4	; (adr r2, 8005f78 <DMA_CheckFifoParam+0x70>)
 8005f74:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f78:	08005f89 	.word	0x08005f89
 8005f7c:	08005f8f 	.word	0x08005f8f
 8005f80:	08005f89 	.word	0x08005f89
 8005f84:	08005fa1 	.word	0x08005fa1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8005f88:	2301      	movs	r3, #1
 8005f8a:	73fb      	strb	r3, [r7, #15]
      break;
 8005f8c:	e030      	b.n	8005ff0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f92:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d025      	beq.n	8005fe6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8005f9e:	e022      	b.n	8005fe6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fa4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8005fa8:	d11f      	bne.n	8005fea <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8005faa:	2301      	movs	r3, #1
 8005fac:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8005fae:	e01c      	b.n	8005fea <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8005fb0:	68bb      	ldr	r3, [r7, #8]
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d903      	bls.n	8005fbe <DMA_CheckFifoParam+0xb6>
 8005fb6:	68bb      	ldr	r3, [r7, #8]
 8005fb8:	2b03      	cmp	r3, #3
 8005fba:	d003      	beq.n	8005fc4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8005fbc:	e018      	b.n	8005ff0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	73fb      	strb	r3, [r7, #15]
      break;
 8005fc2:	e015      	b.n	8005ff0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d00e      	beq.n	8005fee <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8005fd4:	e00b      	b.n	8005fee <DMA_CheckFifoParam+0xe6>
      break;
 8005fd6:	bf00      	nop
 8005fd8:	e00a      	b.n	8005ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8005fda:	bf00      	nop
 8005fdc:	e008      	b.n	8005ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8005fde:	bf00      	nop
 8005fe0:	e006      	b.n	8005ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8005fe2:	bf00      	nop
 8005fe4:	e004      	b.n	8005ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8005fe6:	bf00      	nop
 8005fe8:	e002      	b.n	8005ff0 <DMA_CheckFifoParam+0xe8>
      break;   
 8005fea:	bf00      	nop
 8005fec:	e000      	b.n	8005ff0 <DMA_CheckFifoParam+0xe8>
      break;
 8005fee:	bf00      	nop
    }
  } 
  
  return status; 
 8005ff0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ff2:	4618      	mov	r0, r3
 8005ff4:	3714      	adds	r7, #20
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffc:	4770      	bx	lr
 8005ffe:	bf00      	nop

08006000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006000:	b480      	push	{r7}
 8006002:	b089      	sub	sp, #36	; 0x24
 8006004:	af00      	add	r7, sp, #0
 8006006:	6078      	str	r0, [r7, #4]
 8006008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800600a:	2300      	movs	r3, #0
 800600c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800600e:	2300      	movs	r3, #0
 8006010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006012:	2300      	movs	r3, #0
 8006014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006016:	2300      	movs	r3, #0
 8006018:	61fb      	str	r3, [r7, #28]
 800601a:	e177      	b.n	800630c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800601c:	2201      	movs	r2, #1
 800601e:	69fb      	ldr	r3, [r7, #28]
 8006020:	fa02 f303 	lsl.w	r3, r2, r3
 8006024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006026:	683b      	ldr	r3, [r7, #0]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	697a      	ldr	r2, [r7, #20]
 800602c:	4013      	ands	r3, r2
 800602e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006030:	693a      	ldr	r2, [r7, #16]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	429a      	cmp	r2, r3
 8006036:	f040 8166 	bne.w	8006306 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	685b      	ldr	r3, [r3, #4]
 800603e:	f003 0303 	and.w	r3, r3, #3
 8006042:	2b01      	cmp	r3, #1
 8006044:	d005      	beq.n	8006052 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800604e:	2b02      	cmp	r3, #2
 8006050:	d130      	bne.n	80060b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	689b      	ldr	r3, [r3, #8]
 8006056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006058:	69fb      	ldr	r3, [r7, #28]
 800605a:	005b      	lsls	r3, r3, #1
 800605c:	2203      	movs	r2, #3
 800605e:	fa02 f303 	lsl.w	r3, r2, r3
 8006062:	43db      	mvns	r3, r3
 8006064:	69ba      	ldr	r2, [r7, #24]
 8006066:	4013      	ands	r3, r2
 8006068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800606a:	683b      	ldr	r3, [r7, #0]
 800606c:	68da      	ldr	r2, [r3, #12]
 800606e:	69fb      	ldr	r3, [r7, #28]
 8006070:	005b      	lsls	r3, r3, #1
 8006072:	fa02 f303 	lsl.w	r3, r2, r3
 8006076:	69ba      	ldr	r2, [r7, #24]
 8006078:	4313      	orrs	r3, r2
 800607a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	69ba      	ldr	r2, [r7, #24]
 8006080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	685b      	ldr	r3, [r3, #4]
 8006086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006088:	2201      	movs	r2, #1
 800608a:	69fb      	ldr	r3, [r7, #28]
 800608c:	fa02 f303 	lsl.w	r3, r2, r3
 8006090:	43db      	mvns	r3, r3
 8006092:	69ba      	ldr	r2, [r7, #24]
 8006094:	4013      	ands	r3, r2
 8006096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	685b      	ldr	r3, [r3, #4]
 800609c:	091b      	lsrs	r3, r3, #4
 800609e:	f003 0201 	and.w	r2, r3, #1
 80060a2:	69fb      	ldr	r3, [r7, #28]
 80060a4:	fa02 f303 	lsl.w	r3, r2, r3
 80060a8:	69ba      	ldr	r2, [r7, #24]
 80060aa:	4313      	orrs	r3, r2
 80060ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	69ba      	ldr	r2, [r7, #24]
 80060b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	685b      	ldr	r3, [r3, #4]
 80060b8:	f003 0303 	and.w	r3, r3, #3
 80060bc:	2b03      	cmp	r3, #3
 80060be:	d017      	beq.n	80060f0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80060c6:	69fb      	ldr	r3, [r7, #28]
 80060c8:	005b      	lsls	r3, r3, #1
 80060ca:	2203      	movs	r2, #3
 80060cc:	fa02 f303 	lsl.w	r3, r2, r3
 80060d0:	43db      	mvns	r3, r3
 80060d2:	69ba      	ldr	r2, [r7, #24]
 80060d4:	4013      	ands	r3, r2
 80060d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80060d8:	683b      	ldr	r3, [r7, #0]
 80060da:	689a      	ldr	r2, [r3, #8]
 80060dc:	69fb      	ldr	r3, [r7, #28]
 80060de:	005b      	lsls	r3, r3, #1
 80060e0:	fa02 f303 	lsl.w	r3, r2, r3
 80060e4:	69ba      	ldr	r2, [r7, #24]
 80060e6:	4313      	orrs	r3, r2
 80060e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	69ba      	ldr	r2, [r7, #24]
 80060ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	685b      	ldr	r3, [r3, #4]
 80060f4:	f003 0303 	and.w	r3, r3, #3
 80060f8:	2b02      	cmp	r3, #2
 80060fa:	d123      	bne.n	8006144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80060fc:	69fb      	ldr	r3, [r7, #28]
 80060fe:	08da      	lsrs	r2, r3, #3
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	3208      	adds	r2, #8
 8006104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800610a:	69fb      	ldr	r3, [r7, #28]
 800610c:	f003 0307 	and.w	r3, r3, #7
 8006110:	009b      	lsls	r3, r3, #2
 8006112:	220f      	movs	r2, #15
 8006114:	fa02 f303 	lsl.w	r3, r2, r3
 8006118:	43db      	mvns	r3, r3
 800611a:	69ba      	ldr	r2, [r7, #24]
 800611c:	4013      	ands	r3, r2
 800611e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006120:	683b      	ldr	r3, [r7, #0]
 8006122:	691a      	ldr	r2, [r3, #16]
 8006124:	69fb      	ldr	r3, [r7, #28]
 8006126:	f003 0307 	and.w	r3, r3, #7
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	fa02 f303 	lsl.w	r3, r2, r3
 8006130:	69ba      	ldr	r2, [r7, #24]
 8006132:	4313      	orrs	r3, r2
 8006134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006136:	69fb      	ldr	r3, [r7, #28]
 8006138:	08da      	lsrs	r2, r3, #3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	3208      	adds	r2, #8
 800613e:	69b9      	ldr	r1, [r7, #24]
 8006140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	2203      	movs	r2, #3
 8006150:	fa02 f303 	lsl.w	r3, r2, r3
 8006154:	43db      	mvns	r3, r3
 8006156:	69ba      	ldr	r2, [r7, #24]
 8006158:	4013      	ands	r3, r2
 800615a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800615c:	683b      	ldr	r3, [r7, #0]
 800615e:	685b      	ldr	r3, [r3, #4]
 8006160:	f003 0203 	and.w	r2, r3, #3
 8006164:	69fb      	ldr	r3, [r7, #28]
 8006166:	005b      	lsls	r3, r3, #1
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	69ba      	ldr	r2, [r7, #24]
 800616e:	4313      	orrs	r3, r2
 8006170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	69ba      	ldr	r2, [r7, #24]
 8006176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006180:	2b00      	cmp	r3, #0
 8006182:	f000 80c0 	beq.w	8006306 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006186:	2300      	movs	r3, #0
 8006188:	60fb      	str	r3, [r7, #12]
 800618a:	4b66      	ldr	r3, [pc, #408]	; (8006324 <HAL_GPIO_Init+0x324>)
 800618c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800618e:	4a65      	ldr	r2, [pc, #404]	; (8006324 <HAL_GPIO_Init+0x324>)
 8006190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006194:	6453      	str	r3, [r2, #68]	; 0x44
 8006196:	4b63      	ldr	r3, [pc, #396]	; (8006324 <HAL_GPIO_Init+0x324>)
 8006198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800619a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80061a2:	4a61      	ldr	r2, [pc, #388]	; (8006328 <HAL_GPIO_Init+0x328>)
 80061a4:	69fb      	ldr	r3, [r7, #28]
 80061a6:	089b      	lsrs	r3, r3, #2
 80061a8:	3302      	adds	r3, #2
 80061aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80061ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80061b0:	69fb      	ldr	r3, [r7, #28]
 80061b2:	f003 0303 	and.w	r3, r3, #3
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	220f      	movs	r2, #15
 80061ba:	fa02 f303 	lsl.w	r3, r2, r3
 80061be:	43db      	mvns	r3, r3
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	4013      	ands	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	4a58      	ldr	r2, [pc, #352]	; (800632c <HAL_GPIO_Init+0x32c>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d037      	beq.n	800623e <HAL_GPIO_Init+0x23e>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4a57      	ldr	r2, [pc, #348]	; (8006330 <HAL_GPIO_Init+0x330>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d031      	beq.n	800623a <HAL_GPIO_Init+0x23a>
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	4a56      	ldr	r2, [pc, #344]	; (8006334 <HAL_GPIO_Init+0x334>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d02b      	beq.n	8006236 <HAL_GPIO_Init+0x236>
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	4a55      	ldr	r2, [pc, #340]	; (8006338 <HAL_GPIO_Init+0x338>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d025      	beq.n	8006232 <HAL_GPIO_Init+0x232>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	4a54      	ldr	r2, [pc, #336]	; (800633c <HAL_GPIO_Init+0x33c>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d01f      	beq.n	800622e <HAL_GPIO_Init+0x22e>
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	4a53      	ldr	r2, [pc, #332]	; (8006340 <HAL_GPIO_Init+0x340>)
 80061f2:	4293      	cmp	r3, r2
 80061f4:	d019      	beq.n	800622a <HAL_GPIO_Init+0x22a>
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	4a52      	ldr	r2, [pc, #328]	; (8006344 <HAL_GPIO_Init+0x344>)
 80061fa:	4293      	cmp	r3, r2
 80061fc:	d013      	beq.n	8006226 <HAL_GPIO_Init+0x226>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a51      	ldr	r2, [pc, #324]	; (8006348 <HAL_GPIO_Init+0x348>)
 8006202:	4293      	cmp	r3, r2
 8006204:	d00d      	beq.n	8006222 <HAL_GPIO_Init+0x222>
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	4a50      	ldr	r2, [pc, #320]	; (800634c <HAL_GPIO_Init+0x34c>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d007      	beq.n	800621e <HAL_GPIO_Init+0x21e>
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	4a4f      	ldr	r2, [pc, #316]	; (8006350 <HAL_GPIO_Init+0x350>)
 8006212:	4293      	cmp	r3, r2
 8006214:	d101      	bne.n	800621a <HAL_GPIO_Init+0x21a>
 8006216:	2309      	movs	r3, #9
 8006218:	e012      	b.n	8006240 <HAL_GPIO_Init+0x240>
 800621a:	230a      	movs	r3, #10
 800621c:	e010      	b.n	8006240 <HAL_GPIO_Init+0x240>
 800621e:	2308      	movs	r3, #8
 8006220:	e00e      	b.n	8006240 <HAL_GPIO_Init+0x240>
 8006222:	2307      	movs	r3, #7
 8006224:	e00c      	b.n	8006240 <HAL_GPIO_Init+0x240>
 8006226:	2306      	movs	r3, #6
 8006228:	e00a      	b.n	8006240 <HAL_GPIO_Init+0x240>
 800622a:	2305      	movs	r3, #5
 800622c:	e008      	b.n	8006240 <HAL_GPIO_Init+0x240>
 800622e:	2304      	movs	r3, #4
 8006230:	e006      	b.n	8006240 <HAL_GPIO_Init+0x240>
 8006232:	2303      	movs	r3, #3
 8006234:	e004      	b.n	8006240 <HAL_GPIO_Init+0x240>
 8006236:	2302      	movs	r3, #2
 8006238:	e002      	b.n	8006240 <HAL_GPIO_Init+0x240>
 800623a:	2301      	movs	r3, #1
 800623c:	e000      	b.n	8006240 <HAL_GPIO_Init+0x240>
 800623e:	2300      	movs	r3, #0
 8006240:	69fa      	ldr	r2, [r7, #28]
 8006242:	f002 0203 	and.w	r2, r2, #3
 8006246:	0092      	lsls	r2, r2, #2
 8006248:	4093      	lsls	r3, r2
 800624a:	69ba      	ldr	r2, [r7, #24]
 800624c:	4313      	orrs	r3, r2
 800624e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006250:	4935      	ldr	r1, [pc, #212]	; (8006328 <HAL_GPIO_Init+0x328>)
 8006252:	69fb      	ldr	r3, [r7, #28]
 8006254:	089b      	lsrs	r3, r3, #2
 8006256:	3302      	adds	r3, #2
 8006258:	69ba      	ldr	r2, [r7, #24]
 800625a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800625e:	4b3d      	ldr	r3, [pc, #244]	; (8006354 <HAL_GPIO_Init+0x354>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	43db      	mvns	r3, r3
 8006268:	69ba      	ldr	r2, [r7, #24]
 800626a:	4013      	ands	r3, r2
 800626c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800626e:	683b      	ldr	r3, [r7, #0]
 8006270:	685b      	ldr	r3, [r3, #4]
 8006272:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006276:	2b00      	cmp	r3, #0
 8006278:	d003      	beq.n	8006282 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 800627a:	69ba      	ldr	r2, [r7, #24]
 800627c:	693b      	ldr	r3, [r7, #16]
 800627e:	4313      	orrs	r3, r2
 8006280:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006282:	4a34      	ldr	r2, [pc, #208]	; (8006354 <HAL_GPIO_Init+0x354>)
 8006284:	69bb      	ldr	r3, [r7, #24]
 8006286:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006288:	4b32      	ldr	r3, [pc, #200]	; (8006354 <HAL_GPIO_Init+0x354>)
 800628a:	685b      	ldr	r3, [r3, #4]
 800628c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800628e:	693b      	ldr	r3, [r7, #16]
 8006290:	43db      	mvns	r3, r3
 8006292:	69ba      	ldr	r2, [r7, #24]
 8006294:	4013      	ands	r3, r2
 8006296:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8006298:	683b      	ldr	r3, [r7, #0]
 800629a:	685b      	ldr	r3, [r3, #4]
 800629c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80062a0:	2b00      	cmp	r3, #0
 80062a2:	d003      	beq.n	80062ac <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80062a4:	69ba      	ldr	r2, [r7, #24]
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	4313      	orrs	r3, r2
 80062aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80062ac:	4a29      	ldr	r2, [pc, #164]	; (8006354 <HAL_GPIO_Init+0x354>)
 80062ae:	69bb      	ldr	r3, [r7, #24]
 80062b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80062b2:	4b28      	ldr	r3, [pc, #160]	; (8006354 <HAL_GPIO_Init+0x354>)
 80062b4:	689b      	ldr	r3, [r3, #8]
 80062b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062b8:	693b      	ldr	r3, [r7, #16]
 80062ba:	43db      	mvns	r3, r3
 80062bc:	69ba      	ldr	r2, [r7, #24]
 80062be:	4013      	ands	r3, r2
 80062c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80062ca:	2b00      	cmp	r3, #0
 80062cc:	d003      	beq.n	80062d6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80062ce:	69ba      	ldr	r2, [r7, #24]
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	4313      	orrs	r3, r2
 80062d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80062d6:	4a1f      	ldr	r2, [pc, #124]	; (8006354 <HAL_GPIO_Init+0x354>)
 80062d8:	69bb      	ldr	r3, [r7, #24]
 80062da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80062dc:	4b1d      	ldr	r3, [pc, #116]	; (8006354 <HAL_GPIO_Init+0x354>)
 80062de:	68db      	ldr	r3, [r3, #12]
 80062e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	43db      	mvns	r3, r3
 80062e6:	69ba      	ldr	r2, [r7, #24]
 80062e8:	4013      	ands	r3, r2
 80062ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	685b      	ldr	r3, [r3, #4]
 80062f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d003      	beq.n	8006300 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80062f8:	69ba      	ldr	r2, [r7, #24]
 80062fa:	693b      	ldr	r3, [r7, #16]
 80062fc:	4313      	orrs	r3, r2
 80062fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006300:	4a14      	ldr	r2, [pc, #80]	; (8006354 <HAL_GPIO_Init+0x354>)
 8006302:	69bb      	ldr	r3, [r7, #24]
 8006304:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006306:	69fb      	ldr	r3, [r7, #28]
 8006308:	3301      	adds	r3, #1
 800630a:	61fb      	str	r3, [r7, #28]
 800630c:	69fb      	ldr	r3, [r7, #28]
 800630e:	2b0f      	cmp	r3, #15
 8006310:	f67f ae84 	bls.w	800601c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop
 8006318:	3724      	adds	r7, #36	; 0x24
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr
 8006322:	bf00      	nop
 8006324:	40023800 	.word	0x40023800
 8006328:	40013800 	.word	0x40013800
 800632c:	40020000 	.word	0x40020000
 8006330:	40020400 	.word	0x40020400
 8006334:	40020800 	.word	0x40020800
 8006338:	40020c00 	.word	0x40020c00
 800633c:	40021000 	.word	0x40021000
 8006340:	40021400 	.word	0x40021400
 8006344:	40021800 	.word	0x40021800
 8006348:	40021c00 	.word	0x40021c00
 800634c:	40022000 	.word	0x40022000
 8006350:	40022400 	.word	0x40022400
 8006354:	40013c00 	.word	0x40013c00

08006358 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	460b      	mov	r3, r1
 8006362:	807b      	strh	r3, [r7, #2]
 8006364:	4613      	mov	r3, r2
 8006366:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006368:	787b      	ldrb	r3, [r7, #1]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d003      	beq.n	8006376 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800636e:	887a      	ldrh	r2, [r7, #2]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006374:	e003      	b.n	800637e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006376:	887b      	ldrh	r3, [r7, #2]
 8006378:	041a      	lsls	r2, r3, #16
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	619a      	str	r2, [r3, #24]
}
 800637e:	bf00      	nop
 8006380:	370c      	adds	r7, #12
 8006382:	46bd      	mov	sp, r7
 8006384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006388:	4770      	bx	lr
	...

0800638c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800638c:	b580      	push	{r7, lr}
 800638e:	b084      	sub	sp, #16
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	2b00      	cmp	r3, #0
 8006398:	d101      	bne.n	800639e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800639a:	2301      	movs	r3, #1
 800639c:	e12b      	b.n	80065f6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063a4:	b2db      	uxtb	r3, r3
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d106      	bne.n	80063b8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2200      	movs	r2, #0
 80063ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80063b2:	6878      	ldr	r0, [r7, #4]
 80063b4:	f7fe fdf8 	bl	8004fa8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2224      	movs	r2, #36	; 0x24
 80063bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	681a      	ldr	r2, [r3, #0]
 80063c6:	687b      	ldr	r3, [r7, #4]
 80063c8:	681b      	ldr	r3, [r3, #0]
 80063ca:	f022 0201 	bic.w	r2, r2, #1
 80063ce:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	681a      	ldr	r2, [r3, #0]
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	681b      	ldr	r3, [r3, #0]
 80063da:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80063de:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	681a      	ldr	r2, [r3, #0]
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	681b      	ldr	r3, [r3, #0]
 80063ea:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80063ee:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80063f0:	f001 fc42 	bl	8007c78 <HAL_RCC_GetPCLK1Freq>
 80063f4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	4a81      	ldr	r2, [pc, #516]	; (8006600 <HAL_I2C_Init+0x274>)
 80063fc:	4293      	cmp	r3, r2
 80063fe:	d807      	bhi.n	8006410 <HAL_I2C_Init+0x84>
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4a80      	ldr	r2, [pc, #512]	; (8006604 <HAL_I2C_Init+0x278>)
 8006404:	4293      	cmp	r3, r2
 8006406:	bf94      	ite	ls
 8006408:	2301      	movls	r3, #1
 800640a:	2300      	movhi	r3, #0
 800640c:	b2db      	uxtb	r3, r3
 800640e:	e006      	b.n	800641e <HAL_I2C_Init+0x92>
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	4a7d      	ldr	r2, [pc, #500]	; (8006608 <HAL_I2C_Init+0x27c>)
 8006414:	4293      	cmp	r3, r2
 8006416:	bf94      	ite	ls
 8006418:	2301      	movls	r3, #1
 800641a:	2300      	movhi	r3, #0
 800641c:	b2db      	uxtb	r3, r3
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8006422:	2301      	movs	r3, #1
 8006424:	e0e7      	b.n	80065f6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	4a78      	ldr	r2, [pc, #480]	; (800660c <HAL_I2C_Init+0x280>)
 800642a:	fba2 2303 	umull	r2, r3, r2, r3
 800642e:	0c9b      	lsrs	r3, r3, #18
 8006430:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	681b      	ldr	r3, [r3, #0]
 8006436:	685b      	ldr	r3, [r3, #4]
 8006438:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	68ba      	ldr	r2, [r7, #8]
 8006442:	430a      	orrs	r2, r1
 8006444:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	6a1b      	ldr	r3, [r3, #32]
 800644c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8006450:	687b      	ldr	r3, [r7, #4]
 8006452:	685b      	ldr	r3, [r3, #4]
 8006454:	4a6a      	ldr	r2, [pc, #424]	; (8006600 <HAL_I2C_Init+0x274>)
 8006456:	4293      	cmp	r3, r2
 8006458:	d802      	bhi.n	8006460 <HAL_I2C_Init+0xd4>
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	3301      	adds	r3, #1
 800645e:	e009      	b.n	8006474 <HAL_I2C_Init+0xe8>
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8006466:	fb02 f303 	mul.w	r3, r2, r3
 800646a:	4a69      	ldr	r2, [pc, #420]	; (8006610 <HAL_I2C_Init+0x284>)
 800646c:	fba2 2303 	umull	r2, r3, r2, r3
 8006470:	099b      	lsrs	r3, r3, #6
 8006472:	3301      	adds	r3, #1
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	6812      	ldr	r2, [r2, #0]
 8006478:	430b      	orrs	r3, r1
 800647a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	69db      	ldr	r3, [r3, #28]
 8006482:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8006486:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	685b      	ldr	r3, [r3, #4]
 800648e:	495c      	ldr	r1, [pc, #368]	; (8006600 <HAL_I2C_Init+0x274>)
 8006490:	428b      	cmp	r3, r1
 8006492:	d819      	bhi.n	80064c8 <HAL_I2C_Init+0x13c>
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	1e59      	subs	r1, r3, #1
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	685b      	ldr	r3, [r3, #4]
 800649c:	005b      	lsls	r3, r3, #1
 800649e:	fbb1 f3f3 	udiv	r3, r1, r3
 80064a2:	1c59      	adds	r1, r3, #1
 80064a4:	f640 73fc 	movw	r3, #4092	; 0xffc
 80064a8:	400b      	ands	r3, r1
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d00a      	beq.n	80064c4 <HAL_I2C_Init+0x138>
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	1e59      	subs	r1, r3, #1
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	685b      	ldr	r3, [r3, #4]
 80064b6:	005b      	lsls	r3, r3, #1
 80064b8:	fbb1 f3f3 	udiv	r3, r1, r3
 80064bc:	3301      	adds	r3, #1
 80064be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064c2:	e051      	b.n	8006568 <HAL_I2C_Init+0x1dc>
 80064c4:	2304      	movs	r3, #4
 80064c6:	e04f      	b.n	8006568 <HAL_I2C_Init+0x1dc>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	689b      	ldr	r3, [r3, #8]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d111      	bne.n	80064f4 <HAL_I2C_Init+0x168>
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	1e58      	subs	r0, r3, #1
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	6859      	ldr	r1, [r3, #4]
 80064d8:	460b      	mov	r3, r1
 80064da:	005b      	lsls	r3, r3, #1
 80064dc:	440b      	add	r3, r1
 80064de:	fbb0 f3f3 	udiv	r3, r0, r3
 80064e2:	3301      	adds	r3, #1
 80064e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	bf0c      	ite	eq
 80064ec:	2301      	moveq	r3, #1
 80064ee:	2300      	movne	r3, #0
 80064f0:	b2db      	uxtb	r3, r3
 80064f2:	e012      	b.n	800651a <HAL_I2C_Init+0x18e>
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	1e58      	subs	r0, r3, #1
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	6859      	ldr	r1, [r3, #4]
 80064fc:	460b      	mov	r3, r1
 80064fe:	009b      	lsls	r3, r3, #2
 8006500:	440b      	add	r3, r1
 8006502:	0099      	lsls	r1, r3, #2
 8006504:	440b      	add	r3, r1
 8006506:	fbb0 f3f3 	udiv	r3, r0, r3
 800650a:	3301      	adds	r3, #1
 800650c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006510:	2b00      	cmp	r3, #0
 8006512:	bf0c      	ite	eq
 8006514:	2301      	moveq	r3, #1
 8006516:	2300      	movne	r3, #0
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b00      	cmp	r3, #0
 800651c:	d001      	beq.n	8006522 <HAL_I2C_Init+0x196>
 800651e:	2301      	movs	r3, #1
 8006520:	e022      	b.n	8006568 <HAL_I2C_Init+0x1dc>
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	689b      	ldr	r3, [r3, #8]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10e      	bne.n	8006548 <HAL_I2C_Init+0x1bc>
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	1e58      	subs	r0, r3, #1
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6859      	ldr	r1, [r3, #4]
 8006532:	460b      	mov	r3, r1
 8006534:	005b      	lsls	r3, r3, #1
 8006536:	440b      	add	r3, r1
 8006538:	fbb0 f3f3 	udiv	r3, r0, r3
 800653c:	3301      	adds	r3, #1
 800653e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006542:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006546:	e00f      	b.n	8006568 <HAL_I2C_Init+0x1dc>
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	1e58      	subs	r0, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6859      	ldr	r1, [r3, #4]
 8006550:	460b      	mov	r3, r1
 8006552:	009b      	lsls	r3, r3, #2
 8006554:	440b      	add	r3, r1
 8006556:	0099      	lsls	r1, r3, #2
 8006558:	440b      	add	r3, r1
 800655a:	fbb0 f3f3 	udiv	r3, r0, r3
 800655e:	3301      	adds	r3, #1
 8006560:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006564:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8006568:	6879      	ldr	r1, [r7, #4]
 800656a:	6809      	ldr	r1, [r1, #0]
 800656c:	4313      	orrs	r3, r2
 800656e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	69da      	ldr	r2, [r3, #28]
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	6a1b      	ldr	r3, [r3, #32]
 8006582:	431a      	orrs	r2, r3
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	430a      	orrs	r2, r1
 800658a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	689b      	ldr	r3, [r3, #8]
 8006592:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8006596:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800659a:	687a      	ldr	r2, [r7, #4]
 800659c:	6911      	ldr	r1, [r2, #16]
 800659e:	687a      	ldr	r2, [r7, #4]
 80065a0:	68d2      	ldr	r2, [r2, #12]
 80065a2:	4311      	orrs	r1, r2
 80065a4:	687a      	ldr	r2, [r7, #4]
 80065a6:	6812      	ldr	r2, [r2, #0]
 80065a8:	430b      	orrs	r3, r1
 80065aa:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	68db      	ldr	r3, [r3, #12]
 80065b2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	695a      	ldr	r2, [r3, #20]
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	699b      	ldr	r3, [r3, #24]
 80065be:	431a      	orrs	r2, r3
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	430a      	orrs	r2, r1
 80065c6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0201 	orr.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	2200      	movs	r2, #0
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	2220      	movs	r2, #32
 80065e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2200      	movs	r2, #0
 80065ea:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2200      	movs	r2, #0
 80065f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80065f4:	2300      	movs	r3, #0
}
 80065f6:	4618      	mov	r0, r3
 80065f8:	3710      	adds	r7, #16
 80065fa:	46bd      	mov	sp, r7
 80065fc:	bd80      	pop	{r7, pc}
 80065fe:	bf00      	nop
 8006600:	000186a0 	.word	0x000186a0
 8006604:	001e847f 	.word	0x001e847f
 8006608:	003d08ff 	.word	0x003d08ff
 800660c:	431bde83 	.word	0x431bde83
 8006610:	10624dd3 	.word	0x10624dd3

08006614 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006614:	b580      	push	{r7, lr}
 8006616:	b088      	sub	sp, #32
 8006618:	af02      	add	r7, sp, #8
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	607a      	str	r2, [r7, #4]
 800661e:	461a      	mov	r2, r3
 8006620:	460b      	mov	r3, r1
 8006622:	817b      	strh	r3, [r7, #10]
 8006624:	4613      	mov	r3, r2
 8006626:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8006628:	f7fe ffa6 	bl	8005578 <HAL_GetTick>
 800662c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006634:	b2db      	uxtb	r3, r3
 8006636:	2b20      	cmp	r3, #32
 8006638:	f040 80e0 	bne.w	80067fc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	9300      	str	r3, [sp, #0]
 8006640:	2319      	movs	r3, #25
 8006642:	2201      	movs	r2, #1
 8006644:	4970      	ldr	r1, [pc, #448]	; (8006808 <HAL_I2C_Master_Transmit+0x1f4>)
 8006646:	68f8      	ldr	r0, [r7, #12]
 8006648:	f000 fc72 	bl	8006f30 <I2C_WaitOnFlagUntilTimeout>
 800664c:	4603      	mov	r3, r0
 800664e:	2b00      	cmp	r3, #0
 8006650:	d001      	beq.n	8006656 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8006652:	2302      	movs	r3, #2
 8006654:	e0d3      	b.n	80067fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800665c:	2b01      	cmp	r3, #1
 800665e:	d101      	bne.n	8006664 <HAL_I2C_Master_Transmit+0x50>
 8006660:	2302      	movs	r3, #2
 8006662:	e0cc      	b.n	80067fe <HAL_I2C_Master_Transmit+0x1ea>
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	2201      	movs	r2, #1
 8006668:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	f003 0301 	and.w	r3, r3, #1
 8006676:	2b01      	cmp	r3, #1
 8006678:	d007      	beq.n	800668a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	681b      	ldr	r3, [r3, #0]
 800667e:	681a      	ldr	r2, [r3, #0]
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	f042 0201 	orr.w	r2, r2, #1
 8006688:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	681b      	ldr	r3, [r3, #0]
 8006694:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006698:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	2221      	movs	r2, #33	; 0x21
 800669e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2210      	movs	r2, #16
 80066a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2200      	movs	r2, #0
 80066ae:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066b0:	68fb      	ldr	r3, [r7, #12]
 80066b2:	687a      	ldr	r2, [r7, #4]
 80066b4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80066b6:	68fb      	ldr	r3, [r7, #12]
 80066b8:	893a      	ldrh	r2, [r7, #8]
 80066ba:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066c0:	b29a      	uxth	r2, r3
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066c6:	68fb      	ldr	r3, [r7, #12]
 80066c8:	4a50      	ldr	r2, [pc, #320]	; (800680c <HAL_I2C_Master_Transmit+0x1f8>)
 80066ca:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80066cc:	8979      	ldrh	r1, [r7, #10]
 80066ce:	697b      	ldr	r3, [r7, #20]
 80066d0:	6a3a      	ldr	r2, [r7, #32]
 80066d2:	68f8      	ldr	r0, [r7, #12]
 80066d4:	f000 fac2 	bl	8006c5c <I2C_MasterRequestWrite>
 80066d8:	4603      	mov	r3, r0
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d001      	beq.n	80066e2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80066de:	2301      	movs	r3, #1
 80066e0:	e08d      	b.n	80067fe <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80066e2:	2300      	movs	r3, #0
 80066e4:	613b      	str	r3, [r7, #16]
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	695b      	ldr	r3, [r3, #20]
 80066ec:	613b      	str	r3, [r7, #16]
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	613b      	str	r3, [r7, #16]
 80066f6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80066f8:	e066      	b.n	80067c8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80066fa:	697a      	ldr	r2, [r7, #20]
 80066fc:	6a39      	ldr	r1, [r7, #32]
 80066fe:	68f8      	ldr	r0, [r7, #12]
 8006700:	f000 fcec 	bl	80070dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006704:	4603      	mov	r3, r0
 8006706:	2b00      	cmp	r3, #0
 8006708:	d00d      	beq.n	8006726 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800670e:	2b04      	cmp	r3, #4
 8006710:	d107      	bne.n	8006722 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	681a      	ldr	r2, [r3, #0]
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006720:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8006722:	2301      	movs	r3, #1
 8006724:	e06b      	b.n	80067fe <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800672a:	781a      	ldrb	r2, [r3, #0]
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006736:	1c5a      	adds	r2, r3, #1
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006740:	b29b      	uxth	r3, r3
 8006742:	3b01      	subs	r3, #1
 8006744:	b29a      	uxth	r2, r3
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800674e:	3b01      	subs	r3, #1
 8006750:	b29a      	uxth	r2, r3
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	681b      	ldr	r3, [r3, #0]
 800675a:	695b      	ldr	r3, [r3, #20]
 800675c:	f003 0304 	and.w	r3, r3, #4
 8006760:	2b04      	cmp	r3, #4
 8006762:	d11b      	bne.n	800679c <HAL_I2C_Master_Transmit+0x188>
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006768:	2b00      	cmp	r3, #0
 800676a:	d017      	beq.n	800679c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006770:	781a      	ldrb	r2, [r3, #0]
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800677c:	1c5a      	adds	r2, r3, #1
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006786:	b29b      	uxth	r3, r3
 8006788:	3b01      	subs	r3, #1
 800678a:	b29a      	uxth	r2, r3
 800678c:	68fb      	ldr	r3, [r7, #12]
 800678e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006794:	3b01      	subs	r3, #1
 8006796:	b29a      	uxth	r2, r3
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800679c:	697a      	ldr	r2, [r7, #20]
 800679e:	6a39      	ldr	r1, [r7, #32]
 80067a0:	68f8      	ldr	r0, [r7, #12]
 80067a2:	f000 fcdc 	bl	800715e <I2C_WaitOnBTFFlagUntilTimeout>
 80067a6:	4603      	mov	r3, r0
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	d00d      	beq.n	80067c8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067b0:	2b04      	cmp	r3, #4
 80067b2:	d107      	bne.n	80067c4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	681a      	ldr	r2, [r3, #0]
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067c2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80067c4:	2301      	movs	r3, #1
 80067c6:	e01a      	b.n	80067fe <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d194      	bne.n	80066fa <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	681a      	ldr	r2, [r3, #0]
 80067d6:	68fb      	ldr	r3, [r7, #12]
 80067d8:	681b      	ldr	r3, [r3, #0]
 80067da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80067de:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80067e0:	68fb      	ldr	r3, [r7, #12]
 80067e2:	2220      	movs	r2, #32
 80067e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80067e8:	68fb      	ldr	r3, [r7, #12]
 80067ea:	2200      	movs	r2, #0
 80067ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	2200      	movs	r2, #0
 80067f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80067f8:	2300      	movs	r3, #0
 80067fa:	e000      	b.n	80067fe <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80067fc:	2302      	movs	r3, #2
  }
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3718      	adds	r7, #24
 8006802:	46bd      	mov	sp, r7
 8006804:	bd80      	pop	{r7, pc}
 8006806:	bf00      	nop
 8006808:	00100002 	.word	0x00100002
 800680c:	ffff0000 	.word	0xffff0000

08006810 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08c      	sub	sp, #48	; 0x30
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	4608      	mov	r0, r1
 800681a:	4611      	mov	r1, r2
 800681c:	461a      	mov	r2, r3
 800681e:	4603      	mov	r3, r0
 8006820:	817b      	strh	r3, [r7, #10]
 8006822:	460b      	mov	r3, r1
 8006824:	813b      	strh	r3, [r7, #8]
 8006826:	4613      	mov	r3, r2
 8006828:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800682a:	f7fe fea5 	bl	8005578 <HAL_GetTick>
 800682e:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006836:	b2db      	uxtb	r3, r3
 8006838:	2b20      	cmp	r3, #32
 800683a:	f040 8208 	bne.w	8006c4e <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800683e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006840:	9300      	str	r3, [sp, #0]
 8006842:	2319      	movs	r3, #25
 8006844:	2201      	movs	r2, #1
 8006846:	497b      	ldr	r1, [pc, #492]	; (8006a34 <HAL_I2C_Mem_Read+0x224>)
 8006848:	68f8      	ldr	r0, [r7, #12]
 800684a:	f000 fb71 	bl	8006f30 <I2C_WaitOnFlagUntilTimeout>
 800684e:	4603      	mov	r3, r0
 8006850:	2b00      	cmp	r3, #0
 8006852:	d001      	beq.n	8006858 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8006854:	2302      	movs	r3, #2
 8006856:	e1fb      	b.n	8006c50 <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006858:	68fb      	ldr	r3, [r7, #12]
 800685a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800685e:	2b01      	cmp	r3, #1
 8006860:	d101      	bne.n	8006866 <HAL_I2C_Mem_Read+0x56>
 8006862:	2302      	movs	r3, #2
 8006864:	e1f4      	b.n	8006c50 <HAL_I2C_Mem_Read+0x440>
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	2201      	movs	r2, #1
 800686a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800686e:	68fb      	ldr	r3, [r7, #12]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	f003 0301 	and.w	r3, r3, #1
 8006878:	2b01      	cmp	r3, #1
 800687a:	d007      	beq.n	800688c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	681a      	ldr	r2, [r3, #0]
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	f042 0201 	orr.w	r2, r2, #1
 800688a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800688c:	68fb      	ldr	r3, [r7, #12]
 800688e:	681b      	ldr	r3, [r3, #0]
 8006890:	681a      	ldr	r2, [r3, #0]
 8006892:	68fb      	ldr	r3, [r7, #12]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800689a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800689c:	68fb      	ldr	r3, [r7, #12]
 800689e:	2222      	movs	r2, #34	; 0x22
 80068a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	2240      	movs	r2, #64	; 0x40
 80068a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	2200      	movs	r2, #0
 80068b0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80068b2:	68fb      	ldr	r3, [r7, #12]
 80068b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80068b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80068bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80068c2:	b29a      	uxth	r2, r3
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80068c8:	68fb      	ldr	r3, [r7, #12]
 80068ca:	4a5b      	ldr	r2, [pc, #364]	; (8006a38 <HAL_I2C_Mem_Read+0x228>)
 80068cc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80068ce:	88f8      	ldrh	r0, [r7, #6]
 80068d0:	893a      	ldrh	r2, [r7, #8]
 80068d2:	8979      	ldrh	r1, [r7, #10]
 80068d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80068d6:	9301      	str	r3, [sp, #4]
 80068d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80068da:	9300      	str	r3, [sp, #0]
 80068dc:	4603      	mov	r3, r0
 80068de:	68f8      	ldr	r0, [r7, #12]
 80068e0:	f000 fa3e 	bl	8006d60 <I2C_RequestMemoryRead>
 80068e4:	4603      	mov	r3, r0
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d001      	beq.n	80068ee <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80068ea:	2301      	movs	r3, #1
 80068ec:	e1b0      	b.n	8006c50 <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80068ee:	68fb      	ldr	r3, [r7, #12]
 80068f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	d113      	bne.n	800691e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80068f6:	2300      	movs	r3, #0
 80068f8:	623b      	str	r3, [r7, #32]
 80068fa:	68fb      	ldr	r3, [r7, #12]
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	695b      	ldr	r3, [r3, #20]
 8006900:	623b      	str	r3, [r7, #32]
 8006902:	68fb      	ldr	r3, [r7, #12]
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	699b      	ldr	r3, [r3, #24]
 8006908:	623b      	str	r3, [r7, #32]
 800690a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	681a      	ldr	r2, [r3, #0]
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800691a:	601a      	str	r2, [r3, #0]
 800691c:	e184      	b.n	8006c28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800691e:	68fb      	ldr	r3, [r7, #12]
 8006920:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006922:	2b01      	cmp	r3, #1
 8006924:	d11b      	bne.n	800695e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006926:	68fb      	ldr	r3, [r7, #12]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681a      	ldr	r2, [r3, #0]
 800692c:	68fb      	ldr	r3, [r7, #12]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006934:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006936:	2300      	movs	r3, #0
 8006938:	61fb      	str	r3, [r7, #28]
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	61fb      	str	r3, [r7, #28]
 8006942:	68fb      	ldr	r3, [r7, #12]
 8006944:	681b      	ldr	r3, [r3, #0]
 8006946:	699b      	ldr	r3, [r3, #24]
 8006948:	61fb      	str	r3, [r7, #28]
 800694a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800694c:	68fb      	ldr	r3, [r7, #12]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	681a      	ldr	r2, [r3, #0]
 8006952:	68fb      	ldr	r3, [r7, #12]
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800695a:	601a      	str	r2, [r3, #0]
 800695c:	e164      	b.n	8006c28 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006962:	2b02      	cmp	r3, #2
 8006964:	d11b      	bne.n	800699e <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	681b      	ldr	r3, [r3, #0]
 800696a:	681a      	ldr	r2, [r3, #0]
 800696c:	68fb      	ldr	r3, [r7, #12]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006974:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8006976:	68fb      	ldr	r3, [r7, #12]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	681a      	ldr	r2, [r3, #0]
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006984:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006986:	2300      	movs	r3, #0
 8006988:	61bb      	str	r3, [r7, #24]
 800698a:	68fb      	ldr	r3, [r7, #12]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	695b      	ldr	r3, [r3, #20]
 8006990:	61bb      	str	r3, [r7, #24]
 8006992:	68fb      	ldr	r3, [r7, #12]
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	699b      	ldr	r3, [r3, #24]
 8006998:	61bb      	str	r3, [r7, #24]
 800699a:	69bb      	ldr	r3, [r7, #24]
 800699c:	e144      	b.n	8006c28 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800699e:	2300      	movs	r3, #0
 80069a0:	617b      	str	r3, [r7, #20]
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	695b      	ldr	r3, [r3, #20]
 80069a8:	617b      	str	r3, [r7, #20]
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	699b      	ldr	r3, [r3, #24]
 80069b0:	617b      	str	r3, [r7, #20]
 80069b2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80069b4:	e138      	b.n	8006c28 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80069b6:	68fb      	ldr	r3, [r7, #12]
 80069b8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069ba:	2b03      	cmp	r3, #3
 80069bc:	f200 80f1 	bhi.w	8006ba2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069c4:	2b01      	cmp	r3, #1
 80069c6:	d123      	bne.n	8006a10 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80069c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80069ca:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80069cc:	68f8      	ldr	r0, [r7, #12]
 80069ce:	f000 fc07 	bl	80071e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80069d2:	4603      	mov	r3, r0
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d001      	beq.n	80069dc <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e139      	b.n	8006c50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	691a      	ldr	r2, [r3, #16]
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069e6:	b2d2      	uxtb	r2, r2
 80069e8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80069ea:	68fb      	ldr	r3, [r7, #12]
 80069ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069ee:	1c5a      	adds	r2, r3, #1
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80069f8:	3b01      	subs	r3, #1
 80069fa:	b29a      	uxth	r2, r3
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a00:	68fb      	ldr	r3, [r7, #12]
 8006a02:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a04:	b29b      	uxth	r3, r3
 8006a06:	3b01      	subs	r3, #1
 8006a08:	b29a      	uxth	r2, r3
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006a0e:	e10b      	b.n	8006c28 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8006a10:	68fb      	ldr	r3, [r7, #12]
 8006a12:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a14:	2b02      	cmp	r3, #2
 8006a16:	d14e      	bne.n	8006ab6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006a18:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a1a:	9300      	str	r3, [sp, #0]
 8006a1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006a1e:	2200      	movs	r2, #0
 8006a20:	4906      	ldr	r1, [pc, #24]	; (8006a3c <HAL_I2C_Mem_Read+0x22c>)
 8006a22:	68f8      	ldr	r0, [r7, #12]
 8006a24:	f000 fa84 	bl	8006f30 <I2C_WaitOnFlagUntilTimeout>
 8006a28:	4603      	mov	r3, r0
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d008      	beq.n	8006a40 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8006a2e:	2301      	movs	r3, #1
 8006a30:	e10e      	b.n	8006c50 <HAL_I2C_Mem_Read+0x440>
 8006a32:	bf00      	nop
 8006a34:	00100002 	.word	0x00100002
 8006a38:	ffff0000 	.word	0xffff0000
 8006a3c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006a40:	68fb      	ldr	r3, [r7, #12]
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006a4e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a50:	68fb      	ldr	r3, [r7, #12]
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	691a      	ldr	r2, [r3, #16]
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a5a:	b2d2      	uxtb	r2, r2
 8006a5c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a5e:	68fb      	ldr	r3, [r7, #12]
 8006a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a62:	1c5a      	adds	r2, r3, #1
 8006a64:	68fb      	ldr	r3, [r7, #12]
 8006a66:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a68:	68fb      	ldr	r3, [r7, #12]
 8006a6a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a6c:	3b01      	subs	r3, #1
 8006a6e:	b29a      	uxth	r2, r3
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006a74:	68fb      	ldr	r3, [r7, #12]
 8006a76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006a78:	b29b      	uxth	r3, r3
 8006a7a:	3b01      	subs	r3, #1
 8006a7c:	b29a      	uxth	r2, r3
 8006a7e:	68fb      	ldr	r3, [r7, #12]
 8006a80:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a82:	68fb      	ldr	r3, [r7, #12]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	691a      	ldr	r2, [r3, #16]
 8006a88:	68fb      	ldr	r3, [r7, #12]
 8006a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a8c:	b2d2      	uxtb	r2, r2
 8006a8e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006a90:	68fb      	ldr	r3, [r7, #12]
 8006a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a94:	1c5a      	adds	r2, r3, #1
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006a9e:	3b01      	subs	r3, #1
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006aa6:	68fb      	ldr	r3, [r7, #12]
 8006aa8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006aaa:	b29b      	uxth	r3, r3
 8006aac:	3b01      	subs	r3, #1
 8006aae:	b29a      	uxth	r2, r3
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ab4:	e0b8      	b.n	8006c28 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006ab6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006ab8:	9300      	str	r3, [sp, #0]
 8006aba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006abc:	2200      	movs	r2, #0
 8006abe:	4966      	ldr	r1, [pc, #408]	; (8006c58 <HAL_I2C_Mem_Read+0x448>)
 8006ac0:	68f8      	ldr	r0, [r7, #12]
 8006ac2:	f000 fa35 	bl	8006f30 <I2C_WaitOnFlagUntilTimeout>
 8006ac6:	4603      	mov	r3, r0
 8006ac8:	2b00      	cmp	r3, #0
 8006aca:	d001      	beq.n	8006ad0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8006acc:	2301      	movs	r3, #1
 8006ace:	e0bf      	b.n	8006c50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	681a      	ldr	r2, [r3, #0]
 8006ad6:	68fb      	ldr	r3, [r7, #12]
 8006ad8:	681b      	ldr	r3, [r3, #0]
 8006ada:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ade:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006ae0:	68fb      	ldr	r3, [r7, #12]
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	691a      	ldr	r2, [r3, #16]
 8006ae6:	68fb      	ldr	r3, [r7, #12]
 8006ae8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aea:	b2d2      	uxtb	r2, r2
 8006aec:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006af2:	1c5a      	adds	r2, r3, #1
 8006af4:	68fb      	ldr	r3, [r7, #12]
 8006af6:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006afc:	3b01      	subs	r3, #1
 8006afe:	b29a      	uxth	r2, r3
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b08:	b29b      	uxth	r3, r3
 8006b0a:	3b01      	subs	r3, #1
 8006b0c:	b29a      	uxth	r2, r3
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8006b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b14:	9300      	str	r3, [sp, #0]
 8006b16:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b18:	2200      	movs	r2, #0
 8006b1a:	494f      	ldr	r1, [pc, #316]	; (8006c58 <HAL_I2C_Mem_Read+0x448>)
 8006b1c:	68f8      	ldr	r0, [r7, #12]
 8006b1e:	f000 fa07 	bl	8006f30 <I2C_WaitOnFlagUntilTimeout>
 8006b22:	4603      	mov	r3, r0
 8006b24:	2b00      	cmp	r3, #0
 8006b26:	d001      	beq.n	8006b2c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8006b28:	2301      	movs	r3, #1
 8006b2a:	e091      	b.n	8006c50 <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	681a      	ldr	r2, [r3, #0]
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006b3a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	691a      	ldr	r2, [r3, #16]
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b46:	b2d2      	uxtb	r2, r2
 8006b48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b4e:	1c5a      	adds	r2, r3, #1
 8006b50:	68fb      	ldr	r3, [r7, #12]
 8006b52:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b54:	68fb      	ldr	r3, [r7, #12]
 8006b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b58:	3b01      	subs	r3, #1
 8006b5a:	b29a      	uxth	r2, r3
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b60:	68fb      	ldr	r3, [r7, #12]
 8006b62:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b64:	b29b      	uxth	r3, r3
 8006b66:	3b01      	subs	r3, #1
 8006b68:	b29a      	uxth	r2, r3
 8006b6a:	68fb      	ldr	r3, [r7, #12]
 8006b6c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	681b      	ldr	r3, [r3, #0]
 8006b72:	691a      	ldr	r2, [r3, #16]
 8006b74:	68fb      	ldr	r3, [r7, #12]
 8006b76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b78:	b2d2      	uxtb	r2, r2
 8006b7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b80:	1c5a      	adds	r2, r3, #1
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006b8a:	3b01      	subs	r3, #1
 8006b8c:	b29a      	uxth	r2, r3
 8006b8e:	68fb      	ldr	r3, [r7, #12]
 8006b90:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006b96:	b29b      	uxth	r3, r3
 8006b98:	3b01      	subs	r3, #1
 8006b9a:	b29a      	uxth	r2, r3
 8006b9c:	68fb      	ldr	r3, [r7, #12]
 8006b9e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006ba0:	e042      	b.n	8006c28 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8006ba2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ba4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8006ba6:	68f8      	ldr	r0, [r7, #12]
 8006ba8:	f000 fb1a 	bl	80071e0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8006bac:	4603      	mov	r3, r0
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d001      	beq.n	8006bb6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8006bb2:	2301      	movs	r3, #1
 8006bb4:	e04c      	b.n	8006c50 <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bb6:	68fb      	ldr	r3, [r7, #12]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	691a      	ldr	r2, [r3, #16]
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc0:	b2d2      	uxtb	r2, r2
 8006bc2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8006bc4:	68fb      	ldr	r3, [r7, #12]
 8006bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc8:	1c5a      	adds	r2, r3, #1
 8006bca:	68fb      	ldr	r3, [r7, #12]
 8006bcc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8006bce:	68fb      	ldr	r3, [r7, #12]
 8006bd0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bd2:	3b01      	subs	r3, #1
 8006bd4:	b29a      	uxth	r2, r3
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8006bda:	68fb      	ldr	r3, [r7, #12]
 8006bdc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bde:	b29b      	uxth	r3, r3
 8006be0:	3b01      	subs	r3, #1
 8006be2:	b29a      	uxth	r2, r3
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	f003 0304 	and.w	r3, r3, #4
 8006bf2:	2b04      	cmp	r3, #4
 8006bf4:	d118      	bne.n	8006c28 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	691a      	ldr	r2, [r3, #16]
 8006bfc:	68fb      	ldr	r3, [r7, #12]
 8006bfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c00:	b2d2      	uxtb	r2, r2
 8006c02:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006c04:	68fb      	ldr	r3, [r7, #12]
 8006c06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c08:	1c5a      	adds	r2, r3, #1
 8006c0a:	68fb      	ldr	r3, [r7, #12]
 8006c0c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8006c0e:	68fb      	ldr	r3, [r7, #12]
 8006c10:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c12:	3b01      	subs	r3, #1
 8006c14:	b29a      	uxth	r2, r3
 8006c16:	68fb      	ldr	r3, [r7, #12]
 8006c18:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8006c1a:	68fb      	ldr	r3, [r7, #12]
 8006c1c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c1e:	b29b      	uxth	r3, r3
 8006c20:	3b01      	subs	r3, #1
 8006c22:	b29a      	uxth	r2, r3
 8006c24:	68fb      	ldr	r3, [r7, #12]
 8006c26:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8006c28:	68fb      	ldr	r3, [r7, #12]
 8006c2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	f47f aec2 	bne.w	80069b6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006c42:	68fb      	ldr	r3, [r7, #12]
 8006c44:	2200      	movs	r2, #0
 8006c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8006c4a:	2300      	movs	r3, #0
 8006c4c:	e000      	b.n	8006c50 <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8006c4e:	2302      	movs	r3, #2
  }
}
 8006c50:	4618      	mov	r0, r3
 8006c52:	3728      	adds	r7, #40	; 0x28
 8006c54:	46bd      	mov	sp, r7
 8006c56:	bd80      	pop	{r7, pc}
 8006c58:	00010004 	.word	0x00010004

08006c5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8006c5c:	b580      	push	{r7, lr}
 8006c5e:	b088      	sub	sp, #32
 8006c60:	af02      	add	r7, sp, #8
 8006c62:	60f8      	str	r0, [r7, #12]
 8006c64:	607a      	str	r2, [r7, #4]
 8006c66:	603b      	str	r3, [r7, #0]
 8006c68:	460b      	mov	r3, r1
 8006c6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8006c72:	697b      	ldr	r3, [r7, #20]
 8006c74:	2b08      	cmp	r3, #8
 8006c76:	d006      	beq.n	8006c86 <I2C_MasterRequestWrite+0x2a>
 8006c78:	697b      	ldr	r3, [r7, #20]
 8006c7a:	2b01      	cmp	r3, #1
 8006c7c:	d003      	beq.n	8006c86 <I2C_MasterRequestWrite+0x2a>
 8006c7e:	697b      	ldr	r3, [r7, #20]
 8006c80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006c84:	d108      	bne.n	8006c98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	681a      	ldr	r2, [r3, #0]
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006c94:	601a      	str	r2, [r3, #0]
 8006c96:	e00b      	b.n	8006cb0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8006c98:	68fb      	ldr	r3, [r7, #12]
 8006c9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006c9c:	2b12      	cmp	r3, #18
 8006c9e:	d107      	bne.n	8006cb0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	681a      	ldr	r2, [r3, #0]
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006cae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	9300      	str	r3, [sp, #0]
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2200      	movs	r2, #0
 8006cb8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006cbc:	68f8      	ldr	r0, [r7, #12]
 8006cbe:	f000 f937 	bl	8006f30 <I2C_WaitOnFlagUntilTimeout>
 8006cc2:	4603      	mov	r3, r0
 8006cc4:	2b00      	cmp	r3, #0
 8006cc6:	d00d      	beq.n	8006ce4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006cd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006cd6:	d103      	bne.n	8006ce0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006cde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ce0:	2303      	movs	r3, #3
 8006ce2:	e035      	b.n	8006d50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ce4:	68fb      	ldr	r3, [r7, #12]
 8006ce6:	691b      	ldr	r3, [r3, #16]
 8006ce8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8006cec:	d108      	bne.n	8006d00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006cee:	897b      	ldrh	r3, [r7, #10]
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006cfc:	611a      	str	r2, [r3, #16]
 8006cfe:	e01b      	b.n	8006d38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006d00:	897b      	ldrh	r3, [r7, #10]
 8006d02:	11db      	asrs	r3, r3, #7
 8006d04:	b2db      	uxtb	r3, r3
 8006d06:	f003 0306 	and.w	r3, r3, #6
 8006d0a:	b2db      	uxtb	r3, r3
 8006d0c:	f063 030f 	orn	r3, r3, #15
 8006d10:	b2da      	uxtb	r2, r3
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	687a      	ldr	r2, [r7, #4]
 8006d1c:	490e      	ldr	r1, [pc, #56]	; (8006d58 <I2C_MasterRequestWrite+0xfc>)
 8006d1e:	68f8      	ldr	r0, [r7, #12]
 8006d20:	f000 f95d 	bl	8006fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d24:	4603      	mov	r3, r0
 8006d26:	2b00      	cmp	r3, #0
 8006d28:	d001      	beq.n	8006d2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e010      	b.n	8006d50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006d2e:	897b      	ldrh	r3, [r7, #10]
 8006d30:	b2da      	uxtb	r2, r3
 8006d32:	68fb      	ldr	r3, [r7, #12]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	687a      	ldr	r2, [r7, #4]
 8006d3c:	4907      	ldr	r1, [pc, #28]	; (8006d5c <I2C_MasterRequestWrite+0x100>)
 8006d3e:	68f8      	ldr	r0, [r7, #12]
 8006d40:	f000 f94d 	bl	8006fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006d44:	4603      	mov	r3, r0
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d001      	beq.n	8006d4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006d4a:	2301      	movs	r3, #1
 8006d4c:	e000      	b.n	8006d50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006d4e:	2300      	movs	r3, #0
}
 8006d50:	4618      	mov	r0, r3
 8006d52:	3718      	adds	r7, #24
 8006d54:	46bd      	mov	sp, r7
 8006d56:	bd80      	pop	{r7, pc}
 8006d58:	00010008 	.word	0x00010008
 8006d5c:	00010002 	.word	0x00010002

08006d60 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b088      	sub	sp, #32
 8006d64:	af02      	add	r7, sp, #8
 8006d66:	60f8      	str	r0, [r7, #12]
 8006d68:	4608      	mov	r0, r1
 8006d6a:	4611      	mov	r1, r2
 8006d6c:	461a      	mov	r2, r3
 8006d6e:	4603      	mov	r3, r0
 8006d70:	817b      	strh	r3, [r7, #10]
 8006d72:	460b      	mov	r3, r1
 8006d74:	813b      	strh	r3, [r7, #8]
 8006d76:	4613      	mov	r3, r2
 8006d78:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	681a      	ldr	r2, [r3, #0]
 8006d80:	68fb      	ldr	r3, [r7, #12]
 8006d82:	681b      	ldr	r3, [r3, #0]
 8006d84:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006d88:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006d8a:	68fb      	ldr	r3, [r7, #12]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	681a      	ldr	r2, [r3, #0]
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d98:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006d9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d9c:	9300      	str	r3, [sp, #0]
 8006d9e:	6a3b      	ldr	r3, [r7, #32]
 8006da0:	2200      	movs	r2, #0
 8006da2:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006da6:	68f8      	ldr	r0, [r7, #12]
 8006da8:	f000 f8c2 	bl	8006f30 <I2C_WaitOnFlagUntilTimeout>
 8006dac:	4603      	mov	r3, r0
 8006dae:	2b00      	cmp	r3, #0
 8006db0:	d00d      	beq.n	8006dce <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006db2:	68fb      	ldr	r3, [r7, #12]
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006dbc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dc0:	d103      	bne.n	8006dca <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006dc8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006dca:	2303      	movs	r3, #3
 8006dcc:	e0aa      	b.n	8006f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006dce:	897b      	ldrh	r3, [r7, #10]
 8006dd0:	b2db      	uxtb	r3, r3
 8006dd2:	461a      	mov	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8006ddc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006de0:	6a3a      	ldr	r2, [r7, #32]
 8006de2:	4952      	ldr	r1, [pc, #328]	; (8006f2c <I2C_RequestMemoryRead+0x1cc>)
 8006de4:	68f8      	ldr	r0, [r7, #12]
 8006de6:	f000 f8fa 	bl	8006fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006dea:	4603      	mov	r3, r0
 8006dec:	2b00      	cmp	r3, #0
 8006dee:	d001      	beq.n	8006df4 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006df0:	2301      	movs	r3, #1
 8006df2:	e097      	b.n	8006f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006df4:	2300      	movs	r3, #0
 8006df6:	617b      	str	r3, [r7, #20]
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	695b      	ldr	r3, [r3, #20]
 8006dfe:	617b      	str	r3, [r7, #20]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	699b      	ldr	r3, [r3, #24]
 8006e06:	617b      	str	r3, [r7, #20]
 8006e08:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e0a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e0c:	6a39      	ldr	r1, [r7, #32]
 8006e0e:	68f8      	ldr	r0, [r7, #12]
 8006e10:	f000 f964 	bl	80070dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006e14:	4603      	mov	r3, r0
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d00d      	beq.n	8006e36 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e1a:	68fb      	ldr	r3, [r7, #12]
 8006e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e1e:	2b04      	cmp	r3, #4
 8006e20:	d107      	bne.n	8006e32 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	681a      	ldr	r2, [r3, #0]
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e30:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006e32:	2301      	movs	r3, #1
 8006e34:	e076      	b.n	8006f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006e36:	88fb      	ldrh	r3, [r7, #6]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d105      	bne.n	8006e48 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e3c:	893b      	ldrh	r3, [r7, #8]
 8006e3e:	b2da      	uxtb	r2, r3
 8006e40:	68fb      	ldr	r3, [r7, #12]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	611a      	str	r2, [r3, #16]
 8006e46:	e021      	b.n	8006e8c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006e48:	893b      	ldrh	r3, [r7, #8]
 8006e4a:	0a1b      	lsrs	r3, r3, #8
 8006e4c:	b29b      	uxth	r3, r3
 8006e4e:	b2da      	uxtb	r2, r3
 8006e50:	68fb      	ldr	r3, [r7, #12]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e58:	6a39      	ldr	r1, [r7, #32]
 8006e5a:	68f8      	ldr	r0, [r7, #12]
 8006e5c:	f000 f93e 	bl	80070dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006e60:	4603      	mov	r3, r0
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d00d      	beq.n	8006e82 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006e6a:	2b04      	cmp	r3, #4
 8006e6c:	d107      	bne.n	8006e7e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	681a      	ldr	r2, [r3, #0]
 8006e74:	68fb      	ldr	r3, [r7, #12]
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006e7c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	e050      	b.n	8006f24 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006e82:	893b      	ldrh	r3, [r7, #8]
 8006e84:	b2da      	uxtb	r2, r3
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006e8c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006e8e:	6a39      	ldr	r1, [r7, #32]
 8006e90:	68f8      	ldr	r0, [r7, #12]
 8006e92:	f000 f923 	bl	80070dc <I2C_WaitOnTXEFlagUntilTimeout>
 8006e96:	4603      	mov	r3, r0
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d00d      	beq.n	8006eb8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ea0:	2b04      	cmp	r3, #4
 8006ea2:	d107      	bne.n	8006eb4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8006eb2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006eb4:	2301      	movs	r3, #1
 8006eb6:	e035      	b.n	8006f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	681a      	ldr	r2, [r3, #0]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006ec6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006ec8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eca:	9300      	str	r3, [sp, #0]
 8006ecc:	6a3b      	ldr	r3, [r7, #32]
 8006ece:	2200      	movs	r2, #0
 8006ed0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8006ed4:	68f8      	ldr	r0, [r7, #12]
 8006ed6:	f000 f82b 	bl	8006f30 <I2C_WaitOnFlagUntilTimeout>
 8006eda:	4603      	mov	r3, r0
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d00d      	beq.n	8006efc <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006eea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006eee:	d103      	bne.n	8006ef8 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006ef6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8006ef8:	2303      	movs	r3, #3
 8006efa:	e013      	b.n	8006f24 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006efc:	897b      	ldrh	r3, [r7, #10]
 8006efe:	b2db      	uxtb	r3, r3
 8006f00:	f043 0301 	orr.w	r3, r3, #1
 8006f04:	b2da      	uxtb	r2, r3
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	681b      	ldr	r3, [r3, #0]
 8006f0a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f0e:	6a3a      	ldr	r2, [r7, #32]
 8006f10:	4906      	ldr	r1, [pc, #24]	; (8006f2c <I2C_RequestMemoryRead+0x1cc>)
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f000 f863 	bl	8006fde <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d001      	beq.n	8006f22 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006f1e:	2301      	movs	r3, #1
 8006f20:	e000      	b.n	8006f24 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006f22:	2300      	movs	r3, #0
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3718      	adds	r7, #24
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	00010002 	.word	0x00010002

08006f30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b084      	sub	sp, #16
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	60f8      	str	r0, [r7, #12]
 8006f38:	60b9      	str	r1, [r7, #8]
 8006f3a:	603b      	str	r3, [r7, #0]
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f40:	e025      	b.n	8006f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f42:	683b      	ldr	r3, [r7, #0]
 8006f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006f48:	d021      	beq.n	8006f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f4a:	f7fe fb15 	bl	8005578 <HAL_GetTick>
 8006f4e:	4602      	mov	r2, r0
 8006f50:	69bb      	ldr	r3, [r7, #24]
 8006f52:	1ad3      	subs	r3, r2, r3
 8006f54:	683a      	ldr	r2, [r7, #0]
 8006f56:	429a      	cmp	r2, r3
 8006f58:	d302      	bcc.n	8006f60 <I2C_WaitOnFlagUntilTimeout+0x30>
 8006f5a:	683b      	ldr	r3, [r7, #0]
 8006f5c:	2b00      	cmp	r3, #0
 8006f5e:	d116      	bne.n	8006f8e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	2200      	movs	r2, #0
 8006f64:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	2220      	movs	r2, #32
 8006f6a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	2200      	movs	r2, #0
 8006f72:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f7a:	f043 0220 	orr.w	r2, r3, #32
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2200      	movs	r2, #0
 8006f86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8006f8a:	2301      	movs	r3, #1
 8006f8c:	e023      	b.n	8006fd6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006f8e:	68bb      	ldr	r3, [r7, #8]
 8006f90:	0c1b      	lsrs	r3, r3, #16
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	2b01      	cmp	r3, #1
 8006f96:	d10d      	bne.n	8006fb4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	681b      	ldr	r3, [r3, #0]
 8006f9c:	695b      	ldr	r3, [r3, #20]
 8006f9e:	43da      	mvns	r2, r3
 8006fa0:	68bb      	ldr	r3, [r7, #8]
 8006fa2:	4013      	ands	r3, r2
 8006fa4:	b29b      	uxth	r3, r3
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	bf0c      	ite	eq
 8006faa:	2301      	moveq	r3, #1
 8006fac:	2300      	movne	r3, #0
 8006fae:	b2db      	uxtb	r3, r3
 8006fb0:	461a      	mov	r2, r3
 8006fb2:	e00c      	b.n	8006fce <I2C_WaitOnFlagUntilTimeout+0x9e>
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	699b      	ldr	r3, [r3, #24]
 8006fba:	43da      	mvns	r2, r3
 8006fbc:	68bb      	ldr	r3, [r7, #8]
 8006fbe:	4013      	ands	r3, r2
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	bf0c      	ite	eq
 8006fc6:	2301      	moveq	r3, #1
 8006fc8:	2300      	movne	r3, #0
 8006fca:	b2db      	uxtb	r3, r3
 8006fcc:	461a      	mov	r2, r3
 8006fce:	79fb      	ldrb	r3, [r7, #7]
 8006fd0:	429a      	cmp	r2, r3
 8006fd2:	d0b6      	beq.n	8006f42 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006fd4:	2300      	movs	r3, #0
}
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	3710      	adds	r7, #16
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	bd80      	pop	{r7, pc}

08006fde <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006fde:	b580      	push	{r7, lr}
 8006fe0:	b084      	sub	sp, #16
 8006fe2:	af00      	add	r7, sp, #0
 8006fe4:	60f8      	str	r0, [r7, #12]
 8006fe6:	60b9      	str	r1, [r7, #8]
 8006fe8:	607a      	str	r2, [r7, #4]
 8006fea:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006fec:	e051      	b.n	8007092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	695b      	ldr	r3, [r3, #20]
 8006ff4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006ff8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006ffc:	d123      	bne.n	8007046 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006ffe:	68fb      	ldr	r3, [r7, #12]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	681a      	ldr	r2, [r3, #0]
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800700c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8007016:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	2220      	movs	r2, #32
 8007022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	2200      	movs	r2, #0
 800702a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007032:	f043 0204 	orr.w	r2, r3, #4
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800703a:	68fb      	ldr	r3, [r7, #12]
 800703c:	2200      	movs	r2, #0
 800703e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007042:	2301      	movs	r3, #1
 8007044:	e046      	b.n	80070d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800704c:	d021      	beq.n	8007092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800704e:	f7fe fa93 	bl	8005578 <HAL_GetTick>
 8007052:	4602      	mov	r2, r0
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	1ad3      	subs	r3, r2, r3
 8007058:	687a      	ldr	r2, [r7, #4]
 800705a:	429a      	cmp	r2, r3
 800705c:	d302      	bcc.n	8007064 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d116      	bne.n	8007092 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2200      	movs	r2, #0
 8007068:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	2220      	movs	r2, #32
 800706e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007072:	68fb      	ldr	r3, [r7, #12]
 8007074:	2200      	movs	r2, #0
 8007076:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800707a:	68fb      	ldr	r3, [r7, #12]
 800707c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800707e:	f043 0220 	orr.w	r2, r3, #32
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	2200      	movs	r2, #0
 800708a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800708e:	2301      	movs	r3, #1
 8007090:	e020      	b.n	80070d4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007092:	68bb      	ldr	r3, [r7, #8]
 8007094:	0c1b      	lsrs	r3, r3, #16
 8007096:	b2db      	uxtb	r3, r3
 8007098:	2b01      	cmp	r3, #1
 800709a:	d10c      	bne.n	80070b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800709c:	68fb      	ldr	r3, [r7, #12]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	695b      	ldr	r3, [r3, #20]
 80070a2:	43da      	mvns	r2, r3
 80070a4:	68bb      	ldr	r3, [r7, #8]
 80070a6:	4013      	ands	r3, r2
 80070a8:	b29b      	uxth	r3, r3
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	bf14      	ite	ne
 80070ae:	2301      	movne	r3, #1
 80070b0:	2300      	moveq	r3, #0
 80070b2:	b2db      	uxtb	r3, r3
 80070b4:	e00b      	b.n	80070ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	699b      	ldr	r3, [r3, #24]
 80070bc:	43da      	mvns	r2, r3
 80070be:	68bb      	ldr	r3, [r7, #8]
 80070c0:	4013      	ands	r3, r2
 80070c2:	b29b      	uxth	r3, r3
 80070c4:	2b00      	cmp	r3, #0
 80070c6:	bf14      	ite	ne
 80070c8:	2301      	movne	r3, #1
 80070ca:	2300      	moveq	r3, #0
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d18d      	bne.n	8006fee <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80070d2:	2300      	movs	r3, #0
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	3710      	adds	r7, #16
 80070d8:	46bd      	mov	sp, r7
 80070da:	bd80      	pop	{r7, pc}

080070dc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80070dc:	b580      	push	{r7, lr}
 80070de:	b084      	sub	sp, #16
 80070e0:	af00      	add	r7, sp, #0
 80070e2:	60f8      	str	r0, [r7, #12]
 80070e4:	60b9      	str	r1, [r7, #8]
 80070e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80070e8:	e02d      	b.n	8007146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80070ea:	68f8      	ldr	r0, [r7, #12]
 80070ec:	f000 f8ce 	bl	800728c <I2C_IsAcknowledgeFailed>
 80070f0:	4603      	mov	r3, r0
 80070f2:	2b00      	cmp	r3, #0
 80070f4:	d001      	beq.n	80070fa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80070f6:	2301      	movs	r3, #1
 80070f8:	e02d      	b.n	8007156 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007100:	d021      	beq.n	8007146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007102:	f7fe fa39 	bl	8005578 <HAL_GetTick>
 8007106:	4602      	mov	r2, r0
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	1ad3      	subs	r3, r2, r3
 800710c:	68ba      	ldr	r2, [r7, #8]
 800710e:	429a      	cmp	r2, r3
 8007110:	d302      	bcc.n	8007118 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007112:	68bb      	ldr	r3, [r7, #8]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d116      	bne.n	8007146 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007118:	68fb      	ldr	r3, [r7, #12]
 800711a:	2200      	movs	r2, #0
 800711c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	2220      	movs	r2, #32
 8007122:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	2200      	movs	r2, #0
 800712a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800712e:	68fb      	ldr	r3, [r7, #12]
 8007130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007132:	f043 0220 	orr.w	r2, r3, #32
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800713a:	68fb      	ldr	r3, [r7, #12]
 800713c:	2200      	movs	r2, #0
 800713e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8007142:	2301      	movs	r3, #1
 8007144:	e007      	b.n	8007156 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007146:	68fb      	ldr	r3, [r7, #12]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	695b      	ldr	r3, [r3, #20]
 800714c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007150:	2b80      	cmp	r3, #128	; 0x80
 8007152:	d1ca      	bne.n	80070ea <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007154:	2300      	movs	r3, #0
}
 8007156:	4618      	mov	r0, r3
 8007158:	3710      	adds	r7, #16
 800715a:	46bd      	mov	sp, r7
 800715c:	bd80      	pop	{r7, pc}

0800715e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800715e:	b580      	push	{r7, lr}
 8007160:	b084      	sub	sp, #16
 8007162:	af00      	add	r7, sp, #0
 8007164:	60f8      	str	r0, [r7, #12]
 8007166:	60b9      	str	r1, [r7, #8]
 8007168:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800716a:	e02d      	b.n	80071c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800716c:	68f8      	ldr	r0, [r7, #12]
 800716e:	f000 f88d 	bl	800728c <I2C_IsAcknowledgeFailed>
 8007172:	4603      	mov	r3, r0
 8007174:	2b00      	cmp	r3, #0
 8007176:	d001      	beq.n	800717c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007178:	2301      	movs	r3, #1
 800717a:	e02d      	b.n	80071d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800717c:	68bb      	ldr	r3, [r7, #8]
 800717e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8007182:	d021      	beq.n	80071c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007184:	f7fe f9f8 	bl	8005578 <HAL_GetTick>
 8007188:	4602      	mov	r2, r0
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	1ad3      	subs	r3, r2, r3
 800718e:	68ba      	ldr	r2, [r7, #8]
 8007190:	429a      	cmp	r2, r3
 8007192:	d302      	bcc.n	800719a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007194:	68bb      	ldr	r3, [r7, #8]
 8007196:	2b00      	cmp	r3, #0
 8007198:	d116      	bne.n	80071c8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	2220      	movs	r2, #32
 80071a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80071a8:	68fb      	ldr	r3, [r7, #12]
 80071aa:	2200      	movs	r2, #0
 80071ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071b4:	f043 0220 	orr.w	r2, r3, #32
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	2200      	movs	r2, #0
 80071c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80071c4:	2301      	movs	r3, #1
 80071c6:	e007      	b.n	80071d8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	695b      	ldr	r3, [r3, #20]
 80071ce:	f003 0304 	and.w	r3, r3, #4
 80071d2:	2b04      	cmp	r3, #4
 80071d4:	d1ca      	bne.n	800716c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80071d6:	2300      	movs	r3, #0
}
 80071d8:	4618      	mov	r0, r3
 80071da:	3710      	adds	r7, #16
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}

080071e0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
 80071e6:	60f8      	str	r0, [r7, #12]
 80071e8:	60b9      	str	r1, [r7, #8]
 80071ea:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80071ec:	e042      	b.n	8007274 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	695b      	ldr	r3, [r3, #20]
 80071f4:	f003 0310 	and.w	r3, r3, #16
 80071f8:	2b10      	cmp	r3, #16
 80071fa:	d119      	bne.n	8007230 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	f06f 0210 	mvn.w	r2, #16
 8007204:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007206:	68fb      	ldr	r3, [r7, #12]
 8007208:	2200      	movs	r2, #0
 800720a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800720c:	68fb      	ldr	r3, [r7, #12]
 800720e:	2220      	movs	r2, #32
 8007210:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	2200      	movs	r2, #0
 8007218:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	2200      	movs	r2, #0
 8007228:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800722c:	2301      	movs	r3, #1
 800722e:	e029      	b.n	8007284 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007230:	f7fe f9a2 	bl	8005578 <HAL_GetTick>
 8007234:	4602      	mov	r2, r0
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	1ad3      	subs	r3, r2, r3
 800723a:	68ba      	ldr	r2, [r7, #8]
 800723c:	429a      	cmp	r2, r3
 800723e:	d302      	bcc.n	8007246 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007240:	68bb      	ldr	r3, [r7, #8]
 8007242:	2b00      	cmp	r3, #0
 8007244:	d116      	bne.n	8007274 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8007246:	68fb      	ldr	r3, [r7, #12]
 8007248:	2200      	movs	r2, #0
 800724a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800724c:	68fb      	ldr	r3, [r7, #12]
 800724e:	2220      	movs	r2, #32
 8007250:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007254:	68fb      	ldr	r3, [r7, #12]
 8007256:	2200      	movs	r2, #0
 8007258:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007260:	f043 0220 	orr.w	r2, r3, #32
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007268:	68fb      	ldr	r3, [r7, #12]
 800726a:	2200      	movs	r2, #0
 800726c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8007270:	2301      	movs	r3, #1
 8007272:	e007      	b.n	8007284 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	695b      	ldr	r3, [r3, #20]
 800727a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800727e:	2b40      	cmp	r3, #64	; 0x40
 8007280:	d1b5      	bne.n	80071ee <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3710      	adds	r7, #16
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}

0800728c <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800728c:	b480      	push	{r7}
 800728e:	b083      	sub	sp, #12
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800729e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80072a2:	d11b      	bne.n	80072dc <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80072ac:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	2200      	movs	r2, #0
 80072b2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	2220      	movs	r2, #32
 80072b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072c8:	f043 0204 	orr.w	r2, r3, #4
 80072cc:	687b      	ldr	r3, [r7, #4]
 80072ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2200      	movs	r2, #0
 80072d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80072d8:	2301      	movs	r3, #1
 80072da:	e000      	b.n	80072de <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80072dc:	2300      	movs	r3, #0
}
 80072de:	4618      	mov	r0, r3
 80072e0:	370c      	adds	r7, #12
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr

080072ea <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter new state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80072ea:	b480      	push	{r7}
 80072ec:	b083      	sub	sp, #12
 80072ee:	af00      	add	r7, sp, #0
 80072f0:	6078      	str	r0, [r7, #4]
 80072f2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072fa:	b2db      	uxtb	r3, r3
 80072fc:	2b20      	cmp	r3, #32
 80072fe:	d129      	bne.n	8007354 <HAL_I2CEx_ConfigAnalogFilter+0x6a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2224      	movs	r2, #36	; 0x24
 8007304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	681a      	ldr	r2, [r3, #0]
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	f022 0201 	bic.w	r2, r2, #1
 8007316:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	681b      	ldr	r3, [r3, #0]
 800731c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	f022 0210 	bic.w	r2, r2, #16
 8007326:	625a      	str	r2, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	683a      	ldr	r2, [r7, #0]
 8007334:	430a      	orrs	r2, r1
 8007336:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	681a      	ldr	r2, [r3, #0]
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f042 0201 	orr.w	r2, r2, #1
 8007346:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	2220      	movs	r2, #32
 800734c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007350:	2300      	movs	r3, #0
 8007352:	e000      	b.n	8007356 <HAL_I2CEx_ConfigAnalogFilter+0x6c>
  }
  else
  {
    return HAL_BUSY;
 8007354:	2302      	movs	r3, #2
  }
}
 8007356:	4618      	mov	r0, r3
 8007358:	370c      	adds	r7, #12
 800735a:	46bd      	mov	sp, r7
 800735c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007360:	4770      	bx	lr

08007362 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007362:	b480      	push	{r7}
 8007364:	b085      	sub	sp, #20
 8007366:	af00      	add	r7, sp, #0
 8007368:	6078      	str	r0, [r7, #4]
 800736a:	6039      	str	r1, [r7, #0]
  uint16_t tmpreg = 0;
 800736c:	2300      	movs	r3, #0
 800736e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b20      	cmp	r3, #32
 800737a:	d12a      	bne.n	80073d2 <HAL_I2CEx_ConfigDigitalFilter+0x70>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	2224      	movs	r2, #36	; 0x24
 8007380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	681a      	ldr	r2, [r3, #0]
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	681b      	ldr	r3, [r3, #0]
 800738e:	f022 0201 	bic.w	r2, r2, #1
 8007392:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800739a:	81fb      	strh	r3, [r7, #14]

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 800739c:	89fb      	ldrh	r3, [r7, #14]
 800739e:	f023 030f 	bic.w	r3, r3, #15
 80073a2:	81fb      	strh	r3, [r7, #14]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 80073a4:	683b      	ldr	r3, [r7, #0]
 80073a6:	b29a      	uxth	r2, r3
 80073a8:	89fb      	ldrh	r3, [r7, #14]
 80073aa:	4313      	orrs	r3, r2
 80073ac:	81fb      	strh	r3, [r7, #14]

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	89fa      	ldrh	r2, [r7, #14]
 80073b4:	625a      	str	r2, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 80073b6:	687b      	ldr	r3, [r7, #4]
 80073b8:	681b      	ldr	r3, [r3, #0]
 80073ba:	681a      	ldr	r2, [r3, #0]
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	f042 0201 	orr.w	r2, r2, #1
 80073c4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	2220      	movs	r2, #32
 80073ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80073ce:	2300      	movs	r3, #0
 80073d0:	e000      	b.n	80073d4 <HAL_I2CEx_ConfigDigitalFilter+0x72>
  }
  else
  {
    return HAL_BUSY;
 80073d2:	2302      	movs	r3, #2
  }
}
 80073d4:	4618      	mov	r0, r3
 80073d6:	3714      	adds	r7, #20
 80073d8:	46bd      	mov	sp, r7
 80073da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073de:	4770      	bx	lr

080073e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b086      	sub	sp, #24
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d101      	bne.n	80073f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80073ee:	2301      	movs	r3, #1
 80073f0:	e264      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	f003 0301 	and.w	r3, r3, #1
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d075      	beq.n	80074ea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80073fe:	4ba3      	ldr	r3, [pc, #652]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007400:	689b      	ldr	r3, [r3, #8]
 8007402:	f003 030c 	and.w	r3, r3, #12
 8007406:	2b04      	cmp	r3, #4
 8007408:	d00c      	beq.n	8007424 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800740a:	4ba0      	ldr	r3, [pc, #640]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 800740c:	689b      	ldr	r3, [r3, #8]
 800740e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007412:	2b08      	cmp	r3, #8
 8007414:	d112      	bne.n	800743c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007416:	4b9d      	ldr	r3, [pc, #628]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007418:	685b      	ldr	r3, [r3, #4]
 800741a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800741e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007422:	d10b      	bne.n	800743c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007424:	4b99      	ldr	r3, [pc, #612]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007426:	681b      	ldr	r3, [r3, #0]
 8007428:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800742c:	2b00      	cmp	r3, #0
 800742e:	d05b      	beq.n	80074e8 <HAL_RCC_OscConfig+0x108>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	685b      	ldr	r3, [r3, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d157      	bne.n	80074e8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007438:	2301      	movs	r3, #1
 800743a:	e23f      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	685b      	ldr	r3, [r3, #4]
 8007440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007444:	d106      	bne.n	8007454 <HAL_RCC_OscConfig+0x74>
 8007446:	4b91      	ldr	r3, [pc, #580]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007448:	681b      	ldr	r3, [r3, #0]
 800744a:	4a90      	ldr	r2, [pc, #576]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 800744c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007450:	6013      	str	r3, [r2, #0]
 8007452:	e01d      	b.n	8007490 <HAL_RCC_OscConfig+0xb0>
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	685b      	ldr	r3, [r3, #4]
 8007458:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800745c:	d10c      	bne.n	8007478 <HAL_RCC_OscConfig+0x98>
 800745e:	4b8b      	ldr	r3, [pc, #556]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007460:	681b      	ldr	r3, [r3, #0]
 8007462:	4a8a      	ldr	r2, [pc, #552]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007464:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007468:	6013      	str	r3, [r2, #0]
 800746a:	4b88      	ldr	r3, [pc, #544]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a87      	ldr	r2, [pc, #540]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007470:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007474:	6013      	str	r3, [r2, #0]
 8007476:	e00b      	b.n	8007490 <HAL_RCC_OscConfig+0xb0>
 8007478:	4b84      	ldr	r3, [pc, #528]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	4a83      	ldr	r2, [pc, #524]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 800747e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007482:	6013      	str	r3, [r2, #0]
 8007484:	4b81      	ldr	r3, [pc, #516]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007486:	681b      	ldr	r3, [r3, #0]
 8007488:	4a80      	ldr	r2, [pc, #512]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 800748a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800748e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	685b      	ldr	r3, [r3, #4]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d013      	beq.n	80074c0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007498:	f7fe f86e 	bl	8005578 <HAL_GetTick>
 800749c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800749e:	e008      	b.n	80074b2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074a0:	f7fe f86a 	bl	8005578 <HAL_GetTick>
 80074a4:	4602      	mov	r2, r0
 80074a6:	693b      	ldr	r3, [r7, #16]
 80074a8:	1ad3      	subs	r3, r2, r3
 80074aa:	2b64      	cmp	r3, #100	; 0x64
 80074ac:	d901      	bls.n	80074b2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80074ae:	2303      	movs	r3, #3
 80074b0:	e204      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80074b2:	4b76      	ldr	r3, [pc, #472]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074ba:	2b00      	cmp	r3, #0
 80074bc:	d0f0      	beq.n	80074a0 <HAL_RCC_OscConfig+0xc0>
 80074be:	e014      	b.n	80074ea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074c0:	f7fe f85a 	bl	8005578 <HAL_GetTick>
 80074c4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074c6:	e008      	b.n	80074da <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80074c8:	f7fe f856 	bl	8005578 <HAL_GetTick>
 80074cc:	4602      	mov	r2, r0
 80074ce:	693b      	ldr	r3, [r7, #16]
 80074d0:	1ad3      	subs	r3, r2, r3
 80074d2:	2b64      	cmp	r3, #100	; 0x64
 80074d4:	d901      	bls.n	80074da <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80074d6:	2303      	movs	r3, #3
 80074d8:	e1f0      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80074da:	4b6c      	ldr	r3, [pc, #432]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80074e2:	2b00      	cmp	r3, #0
 80074e4:	d1f0      	bne.n	80074c8 <HAL_RCC_OscConfig+0xe8>
 80074e6:	e000      	b.n	80074ea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80074e8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	f003 0302 	and.w	r3, r3, #2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d063      	beq.n	80075be <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80074f6:	4b65      	ldr	r3, [pc, #404]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 80074f8:	689b      	ldr	r3, [r3, #8]
 80074fa:	f003 030c 	and.w	r3, r3, #12
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d00b      	beq.n	800751a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007502:	4b62      	ldr	r3, [pc, #392]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007504:	689b      	ldr	r3, [r3, #8]
 8007506:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800750a:	2b08      	cmp	r3, #8
 800750c:	d11c      	bne.n	8007548 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800750e:	4b5f      	ldr	r3, [pc, #380]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007510:	685b      	ldr	r3, [r3, #4]
 8007512:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007516:	2b00      	cmp	r3, #0
 8007518:	d116      	bne.n	8007548 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800751a:	4b5c      	ldr	r3, [pc, #368]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	f003 0302 	and.w	r3, r3, #2
 8007522:	2b00      	cmp	r3, #0
 8007524:	d005      	beq.n	8007532 <HAL_RCC_OscConfig+0x152>
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	68db      	ldr	r3, [r3, #12]
 800752a:	2b01      	cmp	r3, #1
 800752c:	d001      	beq.n	8007532 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800752e:	2301      	movs	r3, #1
 8007530:	e1c4      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007532:	4b56      	ldr	r3, [pc, #344]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	691b      	ldr	r3, [r3, #16]
 800753e:	00db      	lsls	r3, r3, #3
 8007540:	4952      	ldr	r1, [pc, #328]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007542:	4313      	orrs	r3, r2
 8007544:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007546:	e03a      	b.n	80075be <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68db      	ldr	r3, [r3, #12]
 800754c:	2b00      	cmp	r3, #0
 800754e:	d020      	beq.n	8007592 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007550:	4b4f      	ldr	r3, [pc, #316]	; (8007690 <HAL_RCC_OscConfig+0x2b0>)
 8007552:	2201      	movs	r2, #1
 8007554:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007556:	f7fe f80f 	bl	8005578 <HAL_GetTick>
 800755a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800755c:	e008      	b.n	8007570 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800755e:	f7fe f80b 	bl	8005578 <HAL_GetTick>
 8007562:	4602      	mov	r2, r0
 8007564:	693b      	ldr	r3, [r7, #16]
 8007566:	1ad3      	subs	r3, r2, r3
 8007568:	2b02      	cmp	r3, #2
 800756a:	d901      	bls.n	8007570 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800756c:	2303      	movs	r3, #3
 800756e:	e1a5      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007570:	4b46      	ldr	r3, [pc, #280]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007572:	681b      	ldr	r3, [r3, #0]
 8007574:	f003 0302 	and.w	r3, r3, #2
 8007578:	2b00      	cmp	r3, #0
 800757a:	d0f0      	beq.n	800755e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800757c:	4b43      	ldr	r3, [pc, #268]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	691b      	ldr	r3, [r3, #16]
 8007588:	00db      	lsls	r3, r3, #3
 800758a:	4940      	ldr	r1, [pc, #256]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 800758c:	4313      	orrs	r3, r2
 800758e:	600b      	str	r3, [r1, #0]
 8007590:	e015      	b.n	80075be <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007592:	4b3f      	ldr	r3, [pc, #252]	; (8007690 <HAL_RCC_OscConfig+0x2b0>)
 8007594:	2200      	movs	r2, #0
 8007596:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007598:	f7fd ffee 	bl	8005578 <HAL_GetTick>
 800759c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800759e:	e008      	b.n	80075b2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80075a0:	f7fd ffea 	bl	8005578 <HAL_GetTick>
 80075a4:	4602      	mov	r2, r0
 80075a6:	693b      	ldr	r3, [r7, #16]
 80075a8:	1ad3      	subs	r3, r2, r3
 80075aa:	2b02      	cmp	r3, #2
 80075ac:	d901      	bls.n	80075b2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80075ae:	2303      	movs	r3, #3
 80075b0:	e184      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80075b2:	4b36      	ldr	r3, [pc, #216]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	f003 0302 	and.w	r3, r3, #2
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d1f0      	bne.n	80075a0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	f003 0308 	and.w	r3, r3, #8
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d030      	beq.n	800762c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	695b      	ldr	r3, [r3, #20]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d016      	beq.n	8007600 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80075d2:	4b30      	ldr	r3, [pc, #192]	; (8007694 <HAL_RCC_OscConfig+0x2b4>)
 80075d4:	2201      	movs	r2, #1
 80075d6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80075d8:	f7fd ffce 	bl	8005578 <HAL_GetTick>
 80075dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075de:	e008      	b.n	80075f2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80075e0:	f7fd ffca 	bl	8005578 <HAL_GetTick>
 80075e4:	4602      	mov	r2, r0
 80075e6:	693b      	ldr	r3, [r7, #16]
 80075e8:	1ad3      	subs	r3, r2, r3
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d901      	bls.n	80075f2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80075ee:	2303      	movs	r3, #3
 80075f0:	e164      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80075f2:	4b26      	ldr	r3, [pc, #152]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 80075f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80075f6:	f003 0302 	and.w	r3, r3, #2
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d0f0      	beq.n	80075e0 <HAL_RCC_OscConfig+0x200>
 80075fe:	e015      	b.n	800762c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007600:	4b24      	ldr	r3, [pc, #144]	; (8007694 <HAL_RCC_OscConfig+0x2b4>)
 8007602:	2200      	movs	r2, #0
 8007604:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007606:	f7fd ffb7 	bl	8005578 <HAL_GetTick>
 800760a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800760c:	e008      	b.n	8007620 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800760e:	f7fd ffb3 	bl	8005578 <HAL_GetTick>
 8007612:	4602      	mov	r2, r0
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	1ad3      	subs	r3, r2, r3
 8007618:	2b02      	cmp	r3, #2
 800761a:	d901      	bls.n	8007620 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800761c:	2303      	movs	r3, #3
 800761e:	e14d      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007620:	4b1a      	ldr	r3, [pc, #104]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007622:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007624:	f003 0302 	and.w	r3, r3, #2
 8007628:	2b00      	cmp	r3, #0
 800762a:	d1f0      	bne.n	800760e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	f003 0304 	and.w	r3, r3, #4
 8007634:	2b00      	cmp	r3, #0
 8007636:	f000 80a0 	beq.w	800777a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800763a:	2300      	movs	r3, #0
 800763c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800763e:	4b13      	ldr	r3, [pc, #76]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007642:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007646:	2b00      	cmp	r3, #0
 8007648:	d10f      	bne.n	800766a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800764a:	2300      	movs	r3, #0
 800764c:	60bb      	str	r3, [r7, #8]
 800764e:	4b0f      	ldr	r3, [pc, #60]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007652:	4a0e      	ldr	r2, [pc, #56]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 8007654:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007658:	6413      	str	r3, [r2, #64]	; 0x40
 800765a:	4b0c      	ldr	r3, [pc, #48]	; (800768c <HAL_RCC_OscConfig+0x2ac>)
 800765c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800765e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007662:	60bb      	str	r3, [r7, #8]
 8007664:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007666:	2301      	movs	r3, #1
 8007668:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800766a:	4b0b      	ldr	r3, [pc, #44]	; (8007698 <HAL_RCC_OscConfig+0x2b8>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007672:	2b00      	cmp	r3, #0
 8007674:	d121      	bne.n	80076ba <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007676:	4b08      	ldr	r3, [pc, #32]	; (8007698 <HAL_RCC_OscConfig+0x2b8>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	4a07      	ldr	r2, [pc, #28]	; (8007698 <HAL_RCC_OscConfig+0x2b8>)
 800767c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007680:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007682:	f7fd ff79 	bl	8005578 <HAL_GetTick>
 8007686:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007688:	e011      	b.n	80076ae <HAL_RCC_OscConfig+0x2ce>
 800768a:	bf00      	nop
 800768c:	40023800 	.word	0x40023800
 8007690:	42470000 	.word	0x42470000
 8007694:	42470e80 	.word	0x42470e80
 8007698:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800769c:	f7fd ff6c 	bl	8005578 <HAL_GetTick>
 80076a0:	4602      	mov	r2, r0
 80076a2:	693b      	ldr	r3, [r7, #16]
 80076a4:	1ad3      	subs	r3, r2, r3
 80076a6:	2b02      	cmp	r3, #2
 80076a8:	d901      	bls.n	80076ae <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 80076aa:	2303      	movs	r3, #3
 80076ac:	e106      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80076ae:	4b85      	ldr	r3, [pc, #532]	; (80078c4 <HAL_RCC_OscConfig+0x4e4>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80076b6:	2b00      	cmp	r3, #0
 80076b8:	d0f0      	beq.n	800769c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	689b      	ldr	r3, [r3, #8]
 80076be:	2b01      	cmp	r3, #1
 80076c0:	d106      	bne.n	80076d0 <HAL_RCC_OscConfig+0x2f0>
 80076c2:	4b81      	ldr	r3, [pc, #516]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 80076c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076c6:	4a80      	ldr	r2, [pc, #512]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 80076c8:	f043 0301 	orr.w	r3, r3, #1
 80076cc:	6713      	str	r3, [r2, #112]	; 0x70
 80076ce:	e01c      	b.n	800770a <HAL_RCC_OscConfig+0x32a>
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	689b      	ldr	r3, [r3, #8]
 80076d4:	2b05      	cmp	r3, #5
 80076d6:	d10c      	bne.n	80076f2 <HAL_RCC_OscConfig+0x312>
 80076d8:	4b7b      	ldr	r3, [pc, #492]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 80076da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076dc:	4a7a      	ldr	r2, [pc, #488]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 80076de:	f043 0304 	orr.w	r3, r3, #4
 80076e2:	6713      	str	r3, [r2, #112]	; 0x70
 80076e4:	4b78      	ldr	r3, [pc, #480]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 80076e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076e8:	4a77      	ldr	r2, [pc, #476]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 80076ea:	f043 0301 	orr.w	r3, r3, #1
 80076ee:	6713      	str	r3, [r2, #112]	; 0x70
 80076f0:	e00b      	b.n	800770a <HAL_RCC_OscConfig+0x32a>
 80076f2:	4b75      	ldr	r3, [pc, #468]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 80076f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80076f6:	4a74      	ldr	r2, [pc, #464]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 80076f8:	f023 0301 	bic.w	r3, r3, #1
 80076fc:	6713      	str	r3, [r2, #112]	; 0x70
 80076fe:	4b72      	ldr	r3, [pc, #456]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 8007700:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007702:	4a71      	ldr	r2, [pc, #452]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 8007704:	f023 0304 	bic.w	r3, r3, #4
 8007708:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d015      	beq.n	800773e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007712:	f7fd ff31 	bl	8005578 <HAL_GetTick>
 8007716:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007718:	e00a      	b.n	8007730 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800771a:	f7fd ff2d 	bl	8005578 <HAL_GetTick>
 800771e:	4602      	mov	r2, r0
 8007720:	693b      	ldr	r3, [r7, #16]
 8007722:	1ad3      	subs	r3, r2, r3
 8007724:	f241 3288 	movw	r2, #5000	; 0x1388
 8007728:	4293      	cmp	r3, r2
 800772a:	d901      	bls.n	8007730 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800772c:	2303      	movs	r3, #3
 800772e:	e0c5      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007730:	4b65      	ldr	r3, [pc, #404]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 8007732:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007734:	f003 0302 	and.w	r3, r3, #2
 8007738:	2b00      	cmp	r3, #0
 800773a:	d0ee      	beq.n	800771a <HAL_RCC_OscConfig+0x33a>
 800773c:	e014      	b.n	8007768 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800773e:	f7fd ff1b 	bl	8005578 <HAL_GetTick>
 8007742:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007744:	e00a      	b.n	800775c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007746:	f7fd ff17 	bl	8005578 <HAL_GetTick>
 800774a:	4602      	mov	r2, r0
 800774c:	693b      	ldr	r3, [r7, #16]
 800774e:	1ad3      	subs	r3, r2, r3
 8007750:	f241 3288 	movw	r2, #5000	; 0x1388
 8007754:	4293      	cmp	r3, r2
 8007756:	d901      	bls.n	800775c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8007758:	2303      	movs	r3, #3
 800775a:	e0af      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800775c:	4b5a      	ldr	r3, [pc, #360]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 800775e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007760:	f003 0302 	and.w	r3, r3, #2
 8007764:	2b00      	cmp	r3, #0
 8007766:	d1ee      	bne.n	8007746 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007768:	7dfb      	ldrb	r3, [r7, #23]
 800776a:	2b01      	cmp	r3, #1
 800776c:	d105      	bne.n	800777a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800776e:	4b56      	ldr	r3, [pc, #344]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 8007770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007772:	4a55      	ldr	r2, [pc, #340]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 8007774:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007778:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	699b      	ldr	r3, [r3, #24]
 800777e:	2b00      	cmp	r3, #0
 8007780:	f000 809b 	beq.w	80078ba <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007784:	4b50      	ldr	r3, [pc, #320]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 8007786:	689b      	ldr	r3, [r3, #8]
 8007788:	f003 030c 	and.w	r3, r3, #12
 800778c:	2b08      	cmp	r3, #8
 800778e:	d05c      	beq.n	800784a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	2b02      	cmp	r3, #2
 8007796:	d141      	bne.n	800781c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007798:	4b4c      	ldr	r3, [pc, #304]	; (80078cc <HAL_RCC_OscConfig+0x4ec>)
 800779a:	2200      	movs	r2, #0
 800779c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800779e:	f7fd feeb 	bl	8005578 <HAL_GetTick>
 80077a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077a4:	e008      	b.n	80077b8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077a6:	f7fd fee7 	bl	8005578 <HAL_GetTick>
 80077aa:	4602      	mov	r2, r0
 80077ac:	693b      	ldr	r3, [r7, #16]
 80077ae:	1ad3      	subs	r3, r2, r3
 80077b0:	2b02      	cmp	r3, #2
 80077b2:	d901      	bls.n	80077b8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80077b4:	2303      	movs	r3, #3
 80077b6:	e081      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80077b8:	4b43      	ldr	r3, [pc, #268]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80077c0:	2b00      	cmp	r3, #0
 80077c2:	d1f0      	bne.n	80077a6 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	69da      	ldr	r2, [r3, #28]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	6a1b      	ldr	r3, [r3, #32]
 80077cc:	431a      	orrs	r2, r3
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077d2:	019b      	lsls	r3, r3, #6
 80077d4:	431a      	orrs	r2, r3
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80077da:	085b      	lsrs	r3, r3, #1
 80077dc:	3b01      	subs	r3, #1
 80077de:	041b      	lsls	r3, r3, #16
 80077e0:	431a      	orrs	r2, r3
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80077e6:	061b      	lsls	r3, r3, #24
 80077e8:	4937      	ldr	r1, [pc, #220]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 80077ea:	4313      	orrs	r3, r2
 80077ec:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80077ee:	4b37      	ldr	r3, [pc, #220]	; (80078cc <HAL_RCC_OscConfig+0x4ec>)
 80077f0:	2201      	movs	r2, #1
 80077f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80077f4:	f7fd fec0 	bl	8005578 <HAL_GetTick>
 80077f8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80077fa:	e008      	b.n	800780e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80077fc:	f7fd febc 	bl	8005578 <HAL_GetTick>
 8007800:	4602      	mov	r2, r0
 8007802:	693b      	ldr	r3, [r7, #16]
 8007804:	1ad3      	subs	r3, r2, r3
 8007806:	2b02      	cmp	r3, #2
 8007808:	d901      	bls.n	800780e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800780a:	2303      	movs	r3, #3
 800780c:	e056      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800780e:	4b2e      	ldr	r3, [pc, #184]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 8007810:	681b      	ldr	r3, [r3, #0]
 8007812:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007816:	2b00      	cmp	r3, #0
 8007818:	d0f0      	beq.n	80077fc <HAL_RCC_OscConfig+0x41c>
 800781a:	e04e      	b.n	80078ba <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800781c:	4b2b      	ldr	r3, [pc, #172]	; (80078cc <HAL_RCC_OscConfig+0x4ec>)
 800781e:	2200      	movs	r2, #0
 8007820:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007822:	f7fd fea9 	bl	8005578 <HAL_GetTick>
 8007826:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007828:	e008      	b.n	800783c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800782a:	f7fd fea5 	bl	8005578 <HAL_GetTick>
 800782e:	4602      	mov	r2, r0
 8007830:	693b      	ldr	r3, [r7, #16]
 8007832:	1ad3      	subs	r3, r2, r3
 8007834:	2b02      	cmp	r3, #2
 8007836:	d901      	bls.n	800783c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8007838:	2303      	movs	r3, #3
 800783a:	e03f      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800783c:	4b22      	ldr	r3, [pc, #136]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007844:	2b00      	cmp	r3, #0
 8007846:	d1f0      	bne.n	800782a <HAL_RCC_OscConfig+0x44a>
 8007848:	e037      	b.n	80078ba <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	699b      	ldr	r3, [r3, #24]
 800784e:	2b01      	cmp	r3, #1
 8007850:	d101      	bne.n	8007856 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8007852:	2301      	movs	r3, #1
 8007854:	e032      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007856:	4b1c      	ldr	r3, [pc, #112]	; (80078c8 <HAL_RCC_OscConfig+0x4e8>)
 8007858:	685b      	ldr	r3, [r3, #4]
 800785a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	699b      	ldr	r3, [r3, #24]
 8007860:	2b01      	cmp	r3, #1
 8007862:	d028      	beq.n	80078b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800786e:	429a      	cmp	r2, r3
 8007870:	d121      	bne.n	80078b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800787c:	429a      	cmp	r2, r3
 800787e:	d11a      	bne.n	80078b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007880:	68fa      	ldr	r2, [r7, #12]
 8007882:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007886:	4013      	ands	r3, r2
 8007888:	687a      	ldr	r2, [r7, #4]
 800788a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800788c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800788e:	4293      	cmp	r3, r2
 8007890:	d111      	bne.n	80078b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800789c:	085b      	lsrs	r3, r3, #1
 800789e:	3b01      	subs	r3, #1
 80078a0:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80078a2:	429a      	cmp	r2, r3
 80078a4:	d107      	bne.n	80078b6 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b0:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80078b2:	429a      	cmp	r2, r3
 80078b4:	d001      	beq.n	80078ba <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 80078b6:	2301      	movs	r3, #1
 80078b8:	e000      	b.n	80078bc <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 80078ba:	2300      	movs	r3, #0
}
 80078bc:	4618      	mov	r0, r3
 80078be:	3718      	adds	r7, #24
 80078c0:	46bd      	mov	sp, r7
 80078c2:	bd80      	pop	{r7, pc}
 80078c4:	40007000 	.word	0x40007000
 80078c8:	40023800 	.word	0x40023800
 80078cc:	42470060 	.word	0x42470060

080078d0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80078d0:	b580      	push	{r7, lr}
 80078d2:	b084      	sub	sp, #16
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
 80078d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d101      	bne.n	80078e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80078e0:	2301      	movs	r3, #1
 80078e2:	e0cc      	b.n	8007a7e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80078e4:	4b68      	ldr	r3, [pc, #416]	; (8007a88 <HAL_RCC_ClockConfig+0x1b8>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f003 030f 	and.w	r3, r3, #15
 80078ec:	683a      	ldr	r2, [r7, #0]
 80078ee:	429a      	cmp	r2, r3
 80078f0:	d90c      	bls.n	800790c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80078f2:	4b65      	ldr	r3, [pc, #404]	; (8007a88 <HAL_RCC_ClockConfig+0x1b8>)
 80078f4:	683a      	ldr	r2, [r7, #0]
 80078f6:	b2d2      	uxtb	r2, r2
 80078f8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80078fa:	4b63      	ldr	r3, [pc, #396]	; (8007a88 <HAL_RCC_ClockConfig+0x1b8>)
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f003 030f 	and.w	r3, r3, #15
 8007902:	683a      	ldr	r2, [r7, #0]
 8007904:	429a      	cmp	r2, r3
 8007906:	d001      	beq.n	800790c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007908:	2301      	movs	r3, #1
 800790a:	e0b8      	b.n	8007a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f003 0302 	and.w	r3, r3, #2
 8007914:	2b00      	cmp	r3, #0
 8007916:	d020      	beq.n	800795a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	f003 0304 	and.w	r3, r3, #4
 8007920:	2b00      	cmp	r3, #0
 8007922:	d005      	beq.n	8007930 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007924:	4b59      	ldr	r3, [pc, #356]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 8007926:	689b      	ldr	r3, [r3, #8]
 8007928:	4a58      	ldr	r2, [pc, #352]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 800792a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800792e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	f003 0308 	and.w	r3, r3, #8
 8007938:	2b00      	cmp	r3, #0
 800793a:	d005      	beq.n	8007948 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800793c:	4b53      	ldr	r3, [pc, #332]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 800793e:	689b      	ldr	r3, [r3, #8]
 8007940:	4a52      	ldr	r2, [pc, #328]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 8007942:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007946:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007948:	4b50      	ldr	r3, [pc, #320]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 800794a:	689b      	ldr	r3, [r3, #8]
 800794c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	689b      	ldr	r3, [r3, #8]
 8007954:	494d      	ldr	r1, [pc, #308]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 8007956:	4313      	orrs	r3, r2
 8007958:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	f003 0301 	and.w	r3, r3, #1
 8007962:	2b00      	cmp	r3, #0
 8007964:	d044      	beq.n	80079f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	685b      	ldr	r3, [r3, #4]
 800796a:	2b01      	cmp	r3, #1
 800796c:	d107      	bne.n	800797e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800796e:	4b47      	ldr	r3, [pc, #284]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007976:	2b00      	cmp	r3, #0
 8007978:	d119      	bne.n	80079ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800797a:	2301      	movs	r3, #1
 800797c:	e07f      	b.n	8007a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	685b      	ldr	r3, [r3, #4]
 8007982:	2b02      	cmp	r3, #2
 8007984:	d003      	beq.n	800798e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800798a:	2b03      	cmp	r3, #3
 800798c:	d107      	bne.n	800799e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800798e:	4b3f      	ldr	r3, [pc, #252]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007996:	2b00      	cmp	r3, #0
 8007998:	d109      	bne.n	80079ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800799a:	2301      	movs	r3, #1
 800799c:	e06f      	b.n	8007a7e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800799e:	4b3b      	ldr	r3, [pc, #236]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f003 0302 	and.w	r3, r3, #2
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d101      	bne.n	80079ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80079aa:	2301      	movs	r3, #1
 80079ac:	e067      	b.n	8007a7e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80079ae:	4b37      	ldr	r3, [pc, #220]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 80079b0:	689b      	ldr	r3, [r3, #8]
 80079b2:	f023 0203 	bic.w	r2, r3, #3
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	685b      	ldr	r3, [r3, #4]
 80079ba:	4934      	ldr	r1, [pc, #208]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 80079bc:	4313      	orrs	r3, r2
 80079be:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80079c0:	f7fd fdda 	bl	8005578 <HAL_GetTick>
 80079c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079c6:	e00a      	b.n	80079de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80079c8:	f7fd fdd6 	bl	8005578 <HAL_GetTick>
 80079cc:	4602      	mov	r2, r0
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	1ad3      	subs	r3, r2, r3
 80079d2:	f241 3288 	movw	r2, #5000	; 0x1388
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d901      	bls.n	80079de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80079da:	2303      	movs	r3, #3
 80079dc:	e04f      	b.n	8007a7e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80079de:	4b2b      	ldr	r3, [pc, #172]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 80079e0:	689b      	ldr	r3, [r3, #8]
 80079e2:	f003 020c 	and.w	r2, r3, #12
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685b      	ldr	r3, [r3, #4]
 80079ea:	009b      	lsls	r3, r3, #2
 80079ec:	429a      	cmp	r2, r3
 80079ee:	d1eb      	bne.n	80079c8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80079f0:	4b25      	ldr	r3, [pc, #148]	; (8007a88 <HAL_RCC_ClockConfig+0x1b8>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f003 030f 	and.w	r3, r3, #15
 80079f8:	683a      	ldr	r2, [r7, #0]
 80079fa:	429a      	cmp	r2, r3
 80079fc:	d20c      	bcs.n	8007a18 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80079fe:	4b22      	ldr	r3, [pc, #136]	; (8007a88 <HAL_RCC_ClockConfig+0x1b8>)
 8007a00:	683a      	ldr	r2, [r7, #0]
 8007a02:	b2d2      	uxtb	r2, r2
 8007a04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007a06:	4b20      	ldr	r3, [pc, #128]	; (8007a88 <HAL_RCC_ClockConfig+0x1b8>)
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	f003 030f 	and.w	r3, r3, #15
 8007a0e:	683a      	ldr	r2, [r7, #0]
 8007a10:	429a      	cmp	r2, r3
 8007a12:	d001      	beq.n	8007a18 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007a14:	2301      	movs	r3, #1
 8007a16:	e032      	b.n	8007a7e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	f003 0304 	and.w	r3, r3, #4
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	d008      	beq.n	8007a36 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007a24:	4b19      	ldr	r3, [pc, #100]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 8007a26:	689b      	ldr	r3, [r3, #8]
 8007a28:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	68db      	ldr	r3, [r3, #12]
 8007a30:	4916      	ldr	r1, [pc, #88]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 8007a32:	4313      	orrs	r3, r2
 8007a34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	f003 0308 	and.w	r3, r3, #8
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d009      	beq.n	8007a56 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007a42:	4b12      	ldr	r3, [pc, #72]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 8007a44:	689b      	ldr	r3, [r3, #8]
 8007a46:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	691b      	ldr	r3, [r3, #16]
 8007a4e:	00db      	lsls	r3, r3, #3
 8007a50:	490e      	ldr	r1, [pc, #56]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 8007a52:	4313      	orrs	r3, r2
 8007a54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007a56:	f000 f821 	bl	8007a9c <HAL_RCC_GetSysClockFreq>
 8007a5a:	4602      	mov	r2, r0
 8007a5c:	4b0b      	ldr	r3, [pc, #44]	; (8007a8c <HAL_RCC_ClockConfig+0x1bc>)
 8007a5e:	689b      	ldr	r3, [r3, #8]
 8007a60:	091b      	lsrs	r3, r3, #4
 8007a62:	f003 030f 	and.w	r3, r3, #15
 8007a66:	490a      	ldr	r1, [pc, #40]	; (8007a90 <HAL_RCC_ClockConfig+0x1c0>)
 8007a68:	5ccb      	ldrb	r3, [r1, r3]
 8007a6a:	fa22 f303 	lsr.w	r3, r2, r3
 8007a6e:	4a09      	ldr	r2, [pc, #36]	; (8007a94 <HAL_RCC_ClockConfig+0x1c4>)
 8007a70:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007a72:	4b09      	ldr	r3, [pc, #36]	; (8007a98 <HAL_RCC_ClockConfig+0x1c8>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4618      	mov	r0, r3
 8007a78:	f7fd fd3a 	bl	80054f0 <HAL_InitTick>

  return HAL_OK;
 8007a7c:	2300      	movs	r3, #0
}
 8007a7e:	4618      	mov	r0, r3
 8007a80:	3710      	adds	r7, #16
 8007a82:	46bd      	mov	sp, r7
 8007a84:	bd80      	pop	{r7, pc}
 8007a86:	bf00      	nop
 8007a88:	40023c00 	.word	0x40023c00
 8007a8c:	40023800 	.word	0x40023800
 8007a90:	08009184 	.word	0x08009184
 8007a94:	20000008 	.word	0x20000008
 8007a98:	2000000c 	.word	0x2000000c

08007a9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007a9c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8007aa0:	b084      	sub	sp, #16
 8007aa2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	607b      	str	r3, [r7, #4]
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	60fb      	str	r3, [r7, #12]
 8007aac:	2300      	movs	r3, #0
 8007aae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8007ab0:	2300      	movs	r3, #0
 8007ab2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ab4:	4b67      	ldr	r3, [pc, #412]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ab6:	689b      	ldr	r3, [r3, #8]
 8007ab8:	f003 030c 	and.w	r3, r3, #12
 8007abc:	2b08      	cmp	r3, #8
 8007abe:	d00d      	beq.n	8007adc <HAL_RCC_GetSysClockFreq+0x40>
 8007ac0:	2b08      	cmp	r3, #8
 8007ac2:	f200 80bd 	bhi.w	8007c40 <HAL_RCC_GetSysClockFreq+0x1a4>
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d002      	beq.n	8007ad0 <HAL_RCC_GetSysClockFreq+0x34>
 8007aca:	2b04      	cmp	r3, #4
 8007acc:	d003      	beq.n	8007ad6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007ace:	e0b7      	b.n	8007c40 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ad0:	4b61      	ldr	r3, [pc, #388]	; (8007c58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007ad2:	60bb      	str	r3, [r7, #8]
       break;
 8007ad4:	e0b7      	b.n	8007c46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ad6:	4b61      	ldr	r3, [pc, #388]	; (8007c5c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8007ad8:	60bb      	str	r3, [r7, #8]
      break;
 8007ada:	e0b4      	b.n	8007c46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007adc:	4b5d      	ldr	r3, [pc, #372]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ade:	685b      	ldr	r3, [r3, #4]
 8007ae0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ae4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ae6:	4b5b      	ldr	r3, [pc, #364]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007ae8:	685b      	ldr	r3, [r3, #4]
 8007aea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d04d      	beq.n	8007b8e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007af2:	4b58      	ldr	r3, [pc, #352]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007af4:	685b      	ldr	r3, [r3, #4]
 8007af6:	099b      	lsrs	r3, r3, #6
 8007af8:	461a      	mov	r2, r3
 8007afa:	f04f 0300 	mov.w	r3, #0
 8007afe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007b02:	f04f 0100 	mov.w	r1, #0
 8007b06:	ea02 0800 	and.w	r8, r2, r0
 8007b0a:	ea03 0901 	and.w	r9, r3, r1
 8007b0e:	4640      	mov	r0, r8
 8007b10:	4649      	mov	r1, r9
 8007b12:	f04f 0200 	mov.w	r2, #0
 8007b16:	f04f 0300 	mov.w	r3, #0
 8007b1a:	014b      	lsls	r3, r1, #5
 8007b1c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007b20:	0142      	lsls	r2, r0, #5
 8007b22:	4610      	mov	r0, r2
 8007b24:	4619      	mov	r1, r3
 8007b26:	ebb0 0008 	subs.w	r0, r0, r8
 8007b2a:	eb61 0109 	sbc.w	r1, r1, r9
 8007b2e:	f04f 0200 	mov.w	r2, #0
 8007b32:	f04f 0300 	mov.w	r3, #0
 8007b36:	018b      	lsls	r3, r1, #6
 8007b38:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007b3c:	0182      	lsls	r2, r0, #6
 8007b3e:	1a12      	subs	r2, r2, r0
 8007b40:	eb63 0301 	sbc.w	r3, r3, r1
 8007b44:	f04f 0000 	mov.w	r0, #0
 8007b48:	f04f 0100 	mov.w	r1, #0
 8007b4c:	00d9      	lsls	r1, r3, #3
 8007b4e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007b52:	00d0      	lsls	r0, r2, #3
 8007b54:	4602      	mov	r2, r0
 8007b56:	460b      	mov	r3, r1
 8007b58:	eb12 0208 	adds.w	r2, r2, r8
 8007b5c:	eb43 0309 	adc.w	r3, r3, r9
 8007b60:	f04f 0000 	mov.w	r0, #0
 8007b64:	f04f 0100 	mov.w	r1, #0
 8007b68:	0259      	lsls	r1, r3, #9
 8007b6a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8007b6e:	0250      	lsls	r0, r2, #9
 8007b70:	4602      	mov	r2, r0
 8007b72:	460b      	mov	r3, r1
 8007b74:	4610      	mov	r0, r2
 8007b76:	4619      	mov	r1, r3
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	461a      	mov	r2, r3
 8007b7c:	f04f 0300 	mov.w	r3, #0
 8007b80:	f7f8 fcf8 	bl	8000574 <__aeabi_uldivmod>
 8007b84:	4602      	mov	r2, r0
 8007b86:	460b      	mov	r3, r1
 8007b88:	4613      	mov	r3, r2
 8007b8a:	60fb      	str	r3, [r7, #12]
 8007b8c:	e04a      	b.n	8007c24 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007b8e:	4b31      	ldr	r3, [pc, #196]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007b90:	685b      	ldr	r3, [r3, #4]
 8007b92:	099b      	lsrs	r3, r3, #6
 8007b94:	461a      	mov	r2, r3
 8007b96:	f04f 0300 	mov.w	r3, #0
 8007b9a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8007b9e:	f04f 0100 	mov.w	r1, #0
 8007ba2:	ea02 0400 	and.w	r4, r2, r0
 8007ba6:	ea03 0501 	and.w	r5, r3, r1
 8007baa:	4620      	mov	r0, r4
 8007bac:	4629      	mov	r1, r5
 8007bae:	f04f 0200 	mov.w	r2, #0
 8007bb2:	f04f 0300 	mov.w	r3, #0
 8007bb6:	014b      	lsls	r3, r1, #5
 8007bb8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007bbc:	0142      	lsls	r2, r0, #5
 8007bbe:	4610      	mov	r0, r2
 8007bc0:	4619      	mov	r1, r3
 8007bc2:	1b00      	subs	r0, r0, r4
 8007bc4:	eb61 0105 	sbc.w	r1, r1, r5
 8007bc8:	f04f 0200 	mov.w	r2, #0
 8007bcc:	f04f 0300 	mov.w	r3, #0
 8007bd0:	018b      	lsls	r3, r1, #6
 8007bd2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8007bd6:	0182      	lsls	r2, r0, #6
 8007bd8:	1a12      	subs	r2, r2, r0
 8007bda:	eb63 0301 	sbc.w	r3, r3, r1
 8007bde:	f04f 0000 	mov.w	r0, #0
 8007be2:	f04f 0100 	mov.w	r1, #0
 8007be6:	00d9      	lsls	r1, r3, #3
 8007be8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007bec:	00d0      	lsls	r0, r2, #3
 8007bee:	4602      	mov	r2, r0
 8007bf0:	460b      	mov	r3, r1
 8007bf2:	1912      	adds	r2, r2, r4
 8007bf4:	eb45 0303 	adc.w	r3, r5, r3
 8007bf8:	f04f 0000 	mov.w	r0, #0
 8007bfc:	f04f 0100 	mov.w	r1, #0
 8007c00:	0299      	lsls	r1, r3, #10
 8007c02:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8007c06:	0290      	lsls	r0, r2, #10
 8007c08:	4602      	mov	r2, r0
 8007c0a:	460b      	mov	r3, r1
 8007c0c:	4610      	mov	r0, r2
 8007c0e:	4619      	mov	r1, r3
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	461a      	mov	r2, r3
 8007c14:	f04f 0300 	mov.w	r3, #0
 8007c18:	f7f8 fcac 	bl	8000574 <__aeabi_uldivmod>
 8007c1c:	4602      	mov	r2, r0
 8007c1e:	460b      	mov	r3, r1
 8007c20:	4613      	mov	r3, r2
 8007c22:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007c24:	4b0b      	ldr	r3, [pc, #44]	; (8007c54 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007c26:	685b      	ldr	r3, [r3, #4]
 8007c28:	0c1b      	lsrs	r3, r3, #16
 8007c2a:	f003 0303 	and.w	r3, r3, #3
 8007c2e:	3301      	adds	r3, #1
 8007c30:	005b      	lsls	r3, r3, #1
 8007c32:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007c34:	68fa      	ldr	r2, [r7, #12]
 8007c36:	683b      	ldr	r3, [r7, #0]
 8007c38:	fbb2 f3f3 	udiv	r3, r2, r3
 8007c3c:	60bb      	str	r3, [r7, #8]
      break;
 8007c3e:	e002      	b.n	8007c46 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007c40:	4b05      	ldr	r3, [pc, #20]	; (8007c58 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007c42:	60bb      	str	r3, [r7, #8]
      break;
 8007c44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007c46:	68bb      	ldr	r3, [r7, #8]
}
 8007c48:	4618      	mov	r0, r3
 8007c4a:	3710      	adds	r7, #16
 8007c4c:	46bd      	mov	sp, r7
 8007c4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007c52:	bf00      	nop
 8007c54:	40023800 	.word	0x40023800
 8007c58:	00f42400 	.word	0x00f42400
 8007c5c:	007a1200 	.word	0x007a1200

08007c60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007c60:	b480      	push	{r7}
 8007c62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007c64:	4b03      	ldr	r3, [pc, #12]	; (8007c74 <HAL_RCC_GetHCLKFreq+0x14>)
 8007c66:	681b      	ldr	r3, [r3, #0]
}
 8007c68:	4618      	mov	r0, r3
 8007c6a:	46bd      	mov	sp, r7
 8007c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c70:	4770      	bx	lr
 8007c72:	bf00      	nop
 8007c74:	20000008 	.word	0x20000008

08007c78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007c78:	b580      	push	{r7, lr}
 8007c7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007c7c:	f7ff fff0 	bl	8007c60 <HAL_RCC_GetHCLKFreq>
 8007c80:	4602      	mov	r2, r0
 8007c82:	4b05      	ldr	r3, [pc, #20]	; (8007c98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007c84:	689b      	ldr	r3, [r3, #8]
 8007c86:	0a9b      	lsrs	r3, r3, #10
 8007c88:	f003 0307 	and.w	r3, r3, #7
 8007c8c:	4903      	ldr	r1, [pc, #12]	; (8007c9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8007c8e:	5ccb      	ldrb	r3, [r1, r3]
 8007c90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007c94:	4618      	mov	r0, r3
 8007c96:	bd80      	pop	{r7, pc}
 8007c98:	40023800 	.word	0x40023800
 8007c9c:	08009194 	.word	0x08009194

08007ca0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007ca0:	b580      	push	{r7, lr}
 8007ca2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007ca4:	f7ff ffdc 	bl	8007c60 <HAL_RCC_GetHCLKFreq>
 8007ca8:	4602      	mov	r2, r0
 8007caa:	4b05      	ldr	r3, [pc, #20]	; (8007cc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007cac:	689b      	ldr	r3, [r3, #8]
 8007cae:	0b5b      	lsrs	r3, r3, #13
 8007cb0:	f003 0307 	and.w	r3, r3, #7
 8007cb4:	4903      	ldr	r1, [pc, #12]	; (8007cc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007cb6:	5ccb      	ldrb	r3, [r1, r3]
 8007cb8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	bd80      	pop	{r7, pc}
 8007cc0:	40023800 	.word	0x40023800
 8007cc4:	08009194 	.word	0x08009194

08007cc8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007cc8:	b580      	push	{r7, lr}
 8007cca:	b082      	sub	sp, #8
 8007ccc:	af00      	add	r7, sp, #0
 8007cce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	2b00      	cmp	r3, #0
 8007cd4:	d101      	bne.n	8007cda <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007cd6:	2301      	movs	r3, #1
 8007cd8:	e03f      	b.n	8007d5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d106      	bne.n	8007cf4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7fd fa08 	bl	8005104 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2224      	movs	r2, #36	; 0x24
 8007cf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	68da      	ldr	r2, [r3, #12]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007d0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007d0c:	6878      	ldr	r0, [r7, #4]
 8007d0e:	f000 fd3d 	bl	800878c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	691a      	ldr	r2, [r3, #16]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d22:	687b      	ldr	r3, [r7, #4]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	695a      	ldr	r2, [r3, #20]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	68da      	ldr	r2, [r3, #12]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007d40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	2200      	movs	r2, #0
 8007d46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	2220      	movs	r2, #32
 8007d4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	2220      	movs	r2, #32
 8007d54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007d58:	2300      	movs	r3, #0
}
 8007d5a:	4618      	mov	r0, r3
 8007d5c:	3708      	adds	r7, #8
 8007d5e:	46bd      	mov	sp, r7
 8007d60:	bd80      	pop	{r7, pc}
	...

08007d64 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007d64:	b580      	push	{r7, lr}
 8007d66:	b086      	sub	sp, #24
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	60f8      	str	r0, [r7, #12]
 8007d6c:	60b9      	str	r1, [r7, #8]
 8007d6e:	4613      	mov	r3, r2
 8007d70:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007d78:	b2db      	uxtb	r3, r3
 8007d7a:	2b20      	cmp	r3, #32
 8007d7c:	d153      	bne.n	8007e26 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d7e:	68bb      	ldr	r3, [r7, #8]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d002      	beq.n	8007d8a <HAL_UART_Transmit_DMA+0x26>
 8007d84:	88fb      	ldrh	r3, [r7, #6]
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d101      	bne.n	8007d8e <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e04c      	b.n	8007e28 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007d8e:	68fb      	ldr	r3, [r7, #12]
 8007d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d94:	2b01      	cmp	r3, #1
 8007d96:	d101      	bne.n	8007d9c <HAL_UART_Transmit_DMA+0x38>
 8007d98:	2302      	movs	r3, #2
 8007d9a:	e045      	b.n	8007e28 <HAL_UART_Transmit_DMA+0xc4>
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	2201      	movs	r2, #1
 8007da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007da4:	68ba      	ldr	r2, [r7, #8]
 8007da6:	68fb      	ldr	r3, [r7, #12]
 8007da8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 8007daa:	68fb      	ldr	r3, [r7, #12]
 8007dac:	88fa      	ldrh	r2, [r7, #6]
 8007dae:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007db0:	68fb      	ldr	r3, [r7, #12]
 8007db2:	88fa      	ldrh	r2, [r7, #6]
 8007db4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	2200      	movs	r2, #0
 8007dba:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	2221      	movs	r2, #33	; 0x21
 8007dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007dc4:	68fb      	ldr	r3, [r7, #12]
 8007dc6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dc8:	4a19      	ldr	r2, [pc, #100]	; (8007e30 <HAL_UART_Transmit_DMA+0xcc>)
 8007dca:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007dcc:	68fb      	ldr	r3, [r7, #12]
 8007dce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd0:	4a18      	ldr	r2, [pc, #96]	; (8007e34 <HAL_UART_Transmit_DMA+0xd0>)
 8007dd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007dd8:	4a17      	ldr	r2, [pc, #92]	; (8007e38 <HAL_UART_Transmit_DMA+0xd4>)
 8007dda:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007ddc:	68fb      	ldr	r3, [r7, #12]
 8007dde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007de0:	2200      	movs	r2, #0
 8007de2:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007de4:	f107 0308 	add.w	r3, r7, #8
 8007de8:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007dee:	697b      	ldr	r3, [r7, #20]
 8007df0:	6819      	ldr	r1, [r3, #0]
 8007df2:	68fb      	ldr	r3, [r7, #12]
 8007df4:	681b      	ldr	r3, [r3, #0]
 8007df6:	3304      	adds	r3, #4
 8007df8:	461a      	mov	r2, r3
 8007dfa:	88fb      	ldrh	r3, [r7, #6]
 8007dfc:	f7fd fdac 	bl	8005958 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007e00:	68fb      	ldr	r3, [r7, #12]
 8007e02:	681b      	ldr	r3, [r3, #0]
 8007e04:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007e08:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007e0a:	68fb      	ldr	r3, [r7, #12]
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007e12:	68fb      	ldr	r3, [r7, #12]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	695a      	ldr	r2, [r3, #20]
 8007e18:	68fb      	ldr	r3, [r7, #12]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007e20:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007e22:	2300      	movs	r3, #0
 8007e24:	e000      	b.n	8007e28 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8007e26:	2302      	movs	r3, #2
  }
}
 8007e28:	4618      	mov	r0, r3
 8007e2a:	3718      	adds	r7, #24
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	bd80      	pop	{r7, pc}
 8007e30:	08008249 	.word	0x08008249
 8007e34:	0800829b 	.word	0x0800829b
 8007e38:	08008383 	.word	0x08008383

08007e3c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e3c:	b580      	push	{r7, lr}
 8007e3e:	b084      	sub	sp, #16
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	60f8      	str	r0, [r7, #12]
 8007e44:	60b9      	str	r1, [r7, #8]
 8007e46:	4613      	mov	r3, r2
 8007e48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007e50:	b2db      	uxtb	r3, r3
 8007e52:	2b20      	cmp	r3, #32
 8007e54:	d11d      	bne.n	8007e92 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e56:	68bb      	ldr	r3, [r7, #8]
 8007e58:	2b00      	cmp	r3, #0
 8007e5a:	d002      	beq.n	8007e62 <HAL_UART_Receive_DMA+0x26>
 8007e5c:	88fb      	ldrh	r3, [r7, #6]
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d101      	bne.n	8007e66 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e016      	b.n	8007e94 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e6c:	2b01      	cmp	r3, #1
 8007e6e:	d101      	bne.n	8007e74 <HAL_UART_Receive_DMA+0x38>
 8007e70:	2302      	movs	r3, #2
 8007e72:	e00f      	b.n	8007e94 <HAL_UART_Receive_DMA+0x58>
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	2201      	movs	r2, #1
 8007e78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	2200      	movs	r2, #0
 8007e80:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 8007e82:	88fb      	ldrh	r3, [r7, #6]
 8007e84:	461a      	mov	r2, r3
 8007e86:	68b9      	ldr	r1, [r7, #8]
 8007e88:	68f8      	ldr	r0, [r7, #12]
 8007e8a:	f000 fac5 	bl	8008418 <UART_Start_Receive_DMA>
 8007e8e:	4603      	mov	r3, r0
 8007e90:	e000      	b.n	8007e94 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007e92:	2302      	movs	r3, #2
  }
}
 8007e94:	4618      	mov	r0, r3
 8007e96:	3710      	adds	r7, #16
 8007e98:	46bd      	mov	sp, r7
 8007e9a:	bd80      	pop	{r7, pc}

08007e9c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007e9c:	b580      	push	{r7, lr}
 8007e9e:	b08a      	sub	sp, #40	; 0x28
 8007ea0:	af00      	add	r7, sp, #0
 8007ea2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ea4:	687b      	ldr	r3, [r7, #4]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	681b      	ldr	r3, [r3, #0]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	695b      	ldr	r3, [r3, #20]
 8007eba:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007ebc:	2300      	movs	r3, #0
 8007ebe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ec6:	f003 030f 	and.w	r3, r3, #15
 8007eca:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007ecc:	69bb      	ldr	r3, [r7, #24]
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d10d      	bne.n	8007eee <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007ed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ed4:	f003 0320 	and.w	r3, r3, #32
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d008      	beq.n	8007eee <HAL_UART_IRQHandler+0x52>
 8007edc:	6a3b      	ldr	r3, [r7, #32]
 8007ede:	f003 0320 	and.w	r3, r3, #32
 8007ee2:	2b00      	cmp	r3, #0
 8007ee4:	d003      	beq.n	8007eee <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f000 fbb9 	bl	800865e <UART_Receive_IT>
      return;
 8007eec:	e17c      	b.n	80081e8 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007eee:	69bb      	ldr	r3, [r7, #24]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	f000 80b1 	beq.w	8008058 <HAL_UART_IRQHandler+0x1bc>
 8007ef6:	69fb      	ldr	r3, [r7, #28]
 8007ef8:	f003 0301 	and.w	r3, r3, #1
 8007efc:	2b00      	cmp	r3, #0
 8007efe:	d105      	bne.n	8007f0c <HAL_UART_IRQHandler+0x70>
 8007f00:	6a3b      	ldr	r3, [r7, #32]
 8007f02:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	f000 80a6 	beq.w	8008058 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	f003 0301 	and.w	r3, r3, #1
 8007f12:	2b00      	cmp	r3, #0
 8007f14:	d00a      	beq.n	8007f2c <HAL_UART_IRQHandler+0x90>
 8007f16:	6a3b      	ldr	r3, [r7, #32]
 8007f18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d005      	beq.n	8007f2c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f24:	f043 0201 	orr.w	r2, r3, #1
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2e:	f003 0304 	and.w	r3, r3, #4
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d00a      	beq.n	8007f4c <HAL_UART_IRQHandler+0xb0>
 8007f36:	69fb      	ldr	r3, [r7, #28]
 8007f38:	f003 0301 	and.w	r3, r3, #1
 8007f3c:	2b00      	cmp	r3, #0
 8007f3e:	d005      	beq.n	8007f4c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f44:	f043 0202 	orr.w	r2, r3, #2
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f4e:	f003 0302 	and.w	r3, r3, #2
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <HAL_UART_IRQHandler+0xd0>
 8007f56:	69fb      	ldr	r3, [r7, #28]
 8007f58:	f003 0301 	and.w	r3, r3, #1
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d005      	beq.n	8007f6c <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f64:	f043 0204 	orr.w	r2, r3, #4
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f6e:	f003 0308 	and.w	r3, r3, #8
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d00f      	beq.n	8007f96 <HAL_UART_IRQHandler+0xfa>
 8007f76:	6a3b      	ldr	r3, [r7, #32]
 8007f78:	f003 0320 	and.w	r3, r3, #32
 8007f7c:	2b00      	cmp	r3, #0
 8007f7e:	d104      	bne.n	8007f8a <HAL_UART_IRQHandler+0xee>
 8007f80:	69fb      	ldr	r3, [r7, #28]
 8007f82:	f003 0301 	and.w	r3, r3, #1
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d005      	beq.n	8007f96 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8e:	f043 0208 	orr.w	r2, r3, #8
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	f000 811f 	beq.w	80081de <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007fa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007fa2:	f003 0320 	and.w	r3, r3, #32
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d007      	beq.n	8007fba <HAL_UART_IRQHandler+0x11e>
 8007faa:	6a3b      	ldr	r3, [r7, #32]
 8007fac:	f003 0320 	and.w	r3, r3, #32
 8007fb0:	2b00      	cmp	r3, #0
 8007fb2:	d002      	beq.n	8007fba <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007fb4:	6878      	ldr	r0, [r7, #4]
 8007fb6:	f000 fb52 	bl	800865e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	681b      	ldr	r3, [r3, #0]
 8007fbe:	695b      	ldr	r3, [r3, #20]
 8007fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fc4:	2b40      	cmp	r3, #64	; 0x40
 8007fc6:	bf0c      	ite	eq
 8007fc8:	2301      	moveq	r3, #1
 8007fca:	2300      	movne	r3, #0
 8007fcc:	b2db      	uxtb	r3, r3
 8007fce:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007fd4:	f003 0308 	and.w	r3, r3, #8
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d102      	bne.n	8007fe2 <HAL_UART_IRQHandler+0x146>
 8007fdc:	697b      	ldr	r3, [r7, #20]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d031      	beq.n	8008046 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007fe2:	6878      	ldr	r0, [r7, #4]
 8007fe4:	f000 fa92 	bl	800850c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	695b      	ldr	r3, [r3, #20]
 8007fee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ff2:	2b40      	cmp	r3, #64	; 0x40
 8007ff4:	d123      	bne.n	800803e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	695a      	ldr	r2, [r3, #20]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	681b      	ldr	r3, [r3, #0]
 8008000:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008004:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800800a:	2b00      	cmp	r3, #0
 800800c:	d013      	beq.n	8008036 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008012:	4a77      	ldr	r2, [pc, #476]	; (80081f0 <HAL_UART_IRQHandler+0x354>)
 8008014:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800801a:	4618      	mov	r0, r3
 800801c:	f7fd fd64 	bl	8005ae8 <HAL_DMA_Abort_IT>
 8008020:	4603      	mov	r3, r0
 8008022:	2b00      	cmp	r3, #0
 8008024:	d016      	beq.n	8008054 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008026:	687b      	ldr	r3, [r7, #4]
 8008028:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800802a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800802c:	687a      	ldr	r2, [r7, #4]
 800802e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008030:	4610      	mov	r0, r2
 8008032:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008034:	e00e      	b.n	8008054 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008036:	6878      	ldr	r0, [r7, #4]
 8008038:	f000 f8f0 	bl	800821c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800803c:	e00a      	b.n	8008054 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800803e:	6878      	ldr	r0, [r7, #4]
 8008040:	f000 f8ec 	bl	800821c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008044:	e006      	b.n	8008054 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008046:	6878      	ldr	r0, [r7, #4]
 8008048:	f000 f8e8 	bl	800821c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2200      	movs	r2, #0
 8008050:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008052:	e0c4      	b.n	80081de <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008054:	bf00      	nop
    return;
 8008056:	e0c2      	b.n	80081de <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800805c:	2b01      	cmp	r3, #1
 800805e:	f040 80a2 	bne.w	80081a6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8008062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008064:	f003 0310 	and.w	r3, r3, #16
 8008068:	2b00      	cmp	r3, #0
 800806a:	f000 809c 	beq.w	80081a6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 800806e:	6a3b      	ldr	r3, [r7, #32]
 8008070:	f003 0310 	and.w	r3, r3, #16
 8008074:	2b00      	cmp	r3, #0
 8008076:	f000 8096 	beq.w	80081a6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800807a:	2300      	movs	r3, #0
 800807c:	60fb      	str	r3, [r7, #12]
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	681b      	ldr	r3, [r3, #0]
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	60fb      	str	r3, [r7, #12]
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	685b      	ldr	r3, [r3, #4]
 800808c:	60fb      	str	r3, [r7, #12]
 800808e:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	681b      	ldr	r3, [r3, #0]
 8008094:	695b      	ldr	r3, [r3, #20]
 8008096:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800809a:	2b40      	cmp	r3, #64	; 0x40
 800809c:	d14f      	bne.n	800813e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	685b      	ldr	r3, [r3, #4]
 80080a6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80080a8:	8a3b      	ldrh	r3, [r7, #16]
 80080aa:	2b00      	cmp	r3, #0
 80080ac:	f000 8099 	beq.w	80081e2 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80080b4:	8a3a      	ldrh	r2, [r7, #16]
 80080b6:	429a      	cmp	r2, r3
 80080b8:	f080 8093 	bcs.w	80081e2 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80080bc:	687b      	ldr	r3, [r7, #4]
 80080be:	8a3a      	ldrh	r2, [r7, #16]
 80080c0:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c6:	69db      	ldr	r3, [r3, #28]
 80080c8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80080cc:	d02b      	beq.n	8008126 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	68da      	ldr	r2, [r3, #12]
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80080dc:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080de:	687b      	ldr	r3, [r7, #4]
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	695a      	ldr	r2, [r3, #20]
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	f022 0201 	bic.w	r2, r2, #1
 80080ec:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	695a      	ldr	r2, [r3, #20]
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80080fc:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	2220      	movs	r2, #32
 8008102:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2200      	movs	r2, #0
 800810a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	68da      	ldr	r2, [r3, #12]
 8008112:	687b      	ldr	r3, [r7, #4]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	f022 0210 	bic.w	r2, r2, #16
 800811a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800811c:	687b      	ldr	r3, [r7, #4]
 800811e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008120:	4618      	mov	r0, r3
 8008122:	f7fd fc71 	bl	8005a08 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800812e:	b29b      	uxth	r3, r3
 8008130:	1ad3      	subs	r3, r2, r3
 8008132:	b29b      	uxth	r3, r3
 8008134:	4619      	mov	r1, r3
 8008136:	6878      	ldr	r0, [r7, #4]
 8008138:	f000 f87a 	bl	8008230 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800813c:	e051      	b.n	80081e2 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008146:	b29b      	uxth	r3, r3
 8008148:	1ad3      	subs	r3, r2, r3
 800814a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008150:	b29b      	uxth	r3, r3
 8008152:	2b00      	cmp	r3, #0
 8008154:	d047      	beq.n	80081e6 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8008156:	8a7b      	ldrh	r3, [r7, #18]
 8008158:	2b00      	cmp	r3, #0
 800815a:	d044      	beq.n	80081e6 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	68da      	ldr	r2, [r3, #12]
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	681b      	ldr	r3, [r3, #0]
 8008166:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800816a:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	681b      	ldr	r3, [r3, #0]
 8008170:	695a      	ldr	r2, [r3, #20]
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	f022 0201 	bic.w	r2, r2, #1
 800817a:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	2220      	movs	r2, #32
 8008180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2200      	movs	r2, #0
 8008188:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	68da      	ldr	r2, [r3, #12]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f022 0210 	bic.w	r2, r2, #16
 8008198:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800819a:	8a7b      	ldrh	r3, [r7, #18]
 800819c:	4619      	mov	r1, r3
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f846 	bl	8008230 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80081a4:	e01f      	b.n	80081e6 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80081a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d008      	beq.n	80081c2 <HAL_UART_IRQHandler+0x326>
 80081b0:	6a3b      	ldr	r3, [r7, #32]
 80081b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d003      	beq.n	80081c2 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 f9e7 	bl	800858e <UART_Transmit_IT>
    return;
 80081c0:	e012      	b.n	80081e8 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80081c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081c4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081c8:	2b00      	cmp	r3, #0
 80081ca:	d00d      	beq.n	80081e8 <HAL_UART_IRQHandler+0x34c>
 80081cc:	6a3b      	ldr	r3, [r7, #32]
 80081ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80081d2:	2b00      	cmp	r3, #0
 80081d4:	d008      	beq.n	80081e8 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 80081d6:	6878      	ldr	r0, [r7, #4]
 80081d8:	f000 fa29 	bl	800862e <UART_EndTransmit_IT>
    return;
 80081dc:	e004      	b.n	80081e8 <HAL_UART_IRQHandler+0x34c>
    return;
 80081de:	bf00      	nop
 80081e0:	e002      	b.n	80081e8 <HAL_UART_IRQHandler+0x34c>
      return;
 80081e2:	bf00      	nop
 80081e4:	e000      	b.n	80081e8 <HAL_UART_IRQHandler+0x34c>
      return;
 80081e6:	bf00      	nop
  }
}
 80081e8:	3728      	adds	r7, #40	; 0x28
 80081ea:	46bd      	mov	sp, r7
 80081ec:	bd80      	pop	{r7, pc}
 80081ee:	bf00      	nop
 80081f0:	08008567 	.word	0x08008567

080081f4 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80081f4:	b480      	push	{r7}
 80081f6:	b083      	sub	sp, #12
 80081f8:	af00      	add	r7, sp, #0
 80081fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 80081fc:	bf00      	nop
 80081fe:	370c      	adds	r7, #12
 8008200:	46bd      	mov	sp, r7
 8008202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008206:	4770      	bx	lr

08008208 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008208:	b480      	push	{r7}
 800820a:	b083      	sub	sp, #12
 800820c:	af00      	add	r7, sp, #0
 800820e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008210:	bf00      	nop
 8008212:	370c      	adds	r7, #12
 8008214:	46bd      	mov	sp, r7
 8008216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800821a:	4770      	bx	lr

0800821c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
 8008222:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008224:	bf00      	nop
 8008226:	370c      	adds	r7, #12
 8008228:	46bd      	mov	sp, r7
 800822a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800822e:	4770      	bx	lr

08008230 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008230:	b480      	push	{r7}
 8008232:	b083      	sub	sp, #12
 8008234:	af00      	add	r7, sp, #0
 8008236:	6078      	str	r0, [r7, #4]
 8008238:	460b      	mov	r3, r1
 800823a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800823c:	bf00      	nop
 800823e:	370c      	adds	r7, #12
 8008240:	46bd      	mov	sp, r7
 8008242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008246:	4770      	bx	lr

08008248 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8008248:	b580      	push	{r7, lr}
 800824a:	b084      	sub	sp, #16
 800824c:	af00      	add	r7, sp, #0
 800824e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008254:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008260:	2b00      	cmp	r3, #0
 8008262:	d113      	bne.n	800828c <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	2200      	movs	r2, #0
 8008268:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	695a      	ldr	r2, [r3, #20]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008278:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008288:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800828a:	e002      	b.n	8008292 <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 800828c:	68f8      	ldr	r0, [r7, #12]
 800828e:	f7fc f8fb 	bl	8004488 <HAL_UART_TxCpltCallback>
}
 8008292:	bf00      	nop
 8008294:	3710      	adds	r7, #16
 8008296:	46bd      	mov	sp, r7
 8008298:	bd80      	pop	{r7, pc}

0800829a <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800829a:	b580      	push	{r7, lr}
 800829c:	b084      	sub	sp, #16
 800829e:	af00      	add	r7, sp, #0
 80082a0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082a6:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 80082a8:	68f8      	ldr	r0, [r7, #12]
 80082aa:	f7ff ffa3 	bl	80081f4 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80082ae:	bf00      	nop
 80082b0:	3710      	adds	r7, #16
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd80      	pop	{r7, pc}

080082b6 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80082b6:	b580      	push	{r7, lr}
 80082b8:	b084      	sub	sp, #16
 80082ba:	af00      	add	r7, sp, #0
 80082bc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80082be:	687b      	ldr	r3, [r7, #4]
 80082c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80082c2:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80082c4:	687b      	ldr	r3, [r7, #4]
 80082c6:	681b      	ldr	r3, [r3, #0]
 80082c8:	681b      	ldr	r3, [r3, #0]
 80082ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d12a      	bne.n	8008328 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 80082d2:	68fb      	ldr	r3, [r7, #12]
 80082d4:	2200      	movs	r2, #0
 80082d6:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80082d8:	68fb      	ldr	r3, [r7, #12]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	68da      	ldr	r2, [r3, #12]
 80082de:	68fb      	ldr	r3, [r7, #12]
 80082e0:	681b      	ldr	r3, [r3, #0]
 80082e2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082e6:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	695a      	ldr	r2, [r3, #20]
 80082ee:	68fb      	ldr	r3, [r7, #12]
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	f022 0201 	bic.w	r2, r2, #1
 80082f6:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082f8:	68fb      	ldr	r3, [r7, #12]
 80082fa:	681b      	ldr	r3, [r3, #0]
 80082fc:	695a      	ldr	r2, [r3, #20]
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008306:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	2220      	movs	r2, #32
 800830c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008314:	2b01      	cmp	r3, #1
 8008316:	d107      	bne.n	8008328 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	68da      	ldr	r2, [r3, #12]
 800831e:	68fb      	ldr	r3, [r7, #12]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	f022 0210 	bic.w	r2, r2, #16
 8008326:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008328:	68fb      	ldr	r3, [r7, #12]
 800832a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800832c:	2b01      	cmp	r3, #1
 800832e:	d106      	bne.n	800833e <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008334:	4619      	mov	r1, r3
 8008336:	68f8      	ldr	r0, [r7, #12]
 8008338:	f7ff ff7a 	bl	8008230 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800833c:	e002      	b.n	8008344 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 800833e:	68f8      	ldr	r0, [r7, #12]
 8008340:	f7fc f8b4 	bl	80044ac <HAL_UART_RxCpltCallback>
}
 8008344:	bf00      	nop
 8008346:	3710      	adds	r7, #16
 8008348:	46bd      	mov	sp, r7
 800834a:	bd80      	pop	{r7, pc}

0800834c <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800834c:	b580      	push	{r7, lr}
 800834e:	b084      	sub	sp, #16
 8008350:	af00      	add	r7, sp, #0
 8008352:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008358:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800835e:	2b01      	cmp	r3, #1
 8008360:	d108      	bne.n	8008374 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008366:	085b      	lsrs	r3, r3, #1
 8008368:	b29b      	uxth	r3, r3
 800836a:	4619      	mov	r1, r3
 800836c:	68f8      	ldr	r0, [r7, #12]
 800836e:	f7ff ff5f 	bl	8008230 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008372:	e002      	b.n	800837a <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008374:	68f8      	ldr	r0, [r7, #12]
 8008376:	f7ff ff47 	bl	8008208 <HAL_UART_RxHalfCpltCallback>
}
 800837a:	bf00      	nop
 800837c:	3710      	adds	r7, #16
 800837e:	46bd      	mov	sp, r7
 8008380:	bd80      	pop	{r7, pc}

08008382 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008382:	b580      	push	{r7, lr}
 8008384:	b084      	sub	sp, #16
 8008386:	af00      	add	r7, sp, #0
 8008388:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800838a:	2300      	movs	r3, #0
 800838c:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008392:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008394:	68bb      	ldr	r3, [r7, #8]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	695b      	ldr	r3, [r3, #20]
 800839a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800839e:	2b80      	cmp	r3, #128	; 0x80
 80083a0:	bf0c      	ite	eq
 80083a2:	2301      	moveq	r3, #1
 80083a4:	2300      	movne	r3, #0
 80083a6:	b2db      	uxtb	r3, r3
 80083a8:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 80083aa:	68bb      	ldr	r3, [r7, #8]
 80083ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083b0:	b2db      	uxtb	r3, r3
 80083b2:	2b21      	cmp	r3, #33	; 0x21
 80083b4:	d108      	bne.n	80083c8 <UART_DMAError+0x46>
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	2b00      	cmp	r3, #0
 80083ba:	d005      	beq.n	80083c8 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 80083bc:	68bb      	ldr	r3, [r7, #8]
 80083be:	2200      	movs	r2, #0
 80083c0:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 80083c2:	68b8      	ldr	r0, [r7, #8]
 80083c4:	f000 f88c 	bl	80084e0 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80083c8:	68bb      	ldr	r3, [r7, #8]
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	695b      	ldr	r3, [r3, #20]
 80083ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80083d2:	2b40      	cmp	r3, #64	; 0x40
 80083d4:	bf0c      	ite	eq
 80083d6:	2301      	moveq	r3, #1
 80083d8:	2300      	movne	r3, #0
 80083da:	b2db      	uxtb	r3, r3
 80083dc:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083e4:	b2db      	uxtb	r3, r3
 80083e6:	2b22      	cmp	r3, #34	; 0x22
 80083e8:	d108      	bne.n	80083fc <UART_DMAError+0x7a>
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	2b00      	cmp	r3, #0
 80083ee:	d005      	beq.n	80083fc <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 80083f0:	68bb      	ldr	r3, [r7, #8]
 80083f2:	2200      	movs	r2, #0
 80083f4:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 80083f6:	68b8      	ldr	r0, [r7, #8]
 80083f8:	f000 f888 	bl	800850c <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 80083fc:	68bb      	ldr	r3, [r7, #8]
 80083fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008400:	f043 0210 	orr.w	r2, r3, #16
 8008404:	68bb      	ldr	r3, [r7, #8]
 8008406:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008408:	68b8      	ldr	r0, [r7, #8]
 800840a:	f7ff ff07 	bl	800821c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800840e:	bf00      	nop
 8008410:	3710      	adds	r7, #16
 8008412:	46bd      	mov	sp, r7
 8008414:	bd80      	pop	{r7, pc}
	...

08008418 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008418:	b580      	push	{r7, lr}
 800841a:	b086      	sub	sp, #24
 800841c:	af00      	add	r7, sp, #0
 800841e:	60f8      	str	r0, [r7, #12]
 8008420:	60b9      	str	r1, [r7, #8]
 8008422:	4613      	mov	r3, r2
 8008424:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008426:	68ba      	ldr	r2, [r7, #8]
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800842c:	68fb      	ldr	r3, [r7, #12]
 800842e:	88fa      	ldrh	r2, [r7, #6]
 8008430:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	2200      	movs	r2, #0
 8008436:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008438:	68fb      	ldr	r3, [r7, #12]
 800843a:	2222      	movs	r2, #34	; 0x22
 800843c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008444:	4a23      	ldr	r2, [pc, #140]	; (80084d4 <UART_Start_Receive_DMA+0xbc>)
 8008446:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800844c:	4a22      	ldr	r2, [pc, #136]	; (80084d8 <UART_Start_Receive_DMA+0xc0>)
 800844e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008450:	68fb      	ldr	r3, [r7, #12]
 8008452:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008454:	4a21      	ldr	r2, [pc, #132]	; (80084dc <UART_Start_Receive_DMA+0xc4>)
 8008456:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800845c:	2200      	movs	r2, #0
 800845e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008460:	f107 0308 	add.w	r3, r7, #8
 8008464:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008466:	68fb      	ldr	r3, [r7, #12]
 8008468:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800846a:	68fb      	ldr	r3, [r7, #12]
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	3304      	adds	r3, #4
 8008470:	4619      	mov	r1, r3
 8008472:	697b      	ldr	r3, [r7, #20]
 8008474:	681a      	ldr	r2, [r3, #0]
 8008476:	88fb      	ldrh	r3, [r7, #6]
 8008478:	f7fd fa6e 	bl	8005958 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 800847c:	2300      	movs	r3, #0
 800847e:	613b      	str	r3, [r7, #16]
 8008480:	68fb      	ldr	r3, [r7, #12]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	681b      	ldr	r3, [r3, #0]
 8008486:	613b      	str	r3, [r7, #16]
 8008488:	68fb      	ldr	r3, [r7, #12]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	613b      	str	r3, [r7, #16]
 8008490:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008492:	68fb      	ldr	r3, [r7, #12]
 8008494:	2200      	movs	r2, #0
 8008496:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800849a:	68fb      	ldr	r3, [r7, #12]
 800849c:	681b      	ldr	r3, [r3, #0]
 800849e:	68da      	ldr	r2, [r3, #12]
 80084a0:	68fb      	ldr	r3, [r7, #12]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80084a8:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80084aa:	68fb      	ldr	r3, [r7, #12]
 80084ac:	681b      	ldr	r3, [r3, #0]
 80084ae:	695a      	ldr	r2, [r3, #20]
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f042 0201 	orr.w	r2, r2, #1
 80084b8:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80084ba:	68fb      	ldr	r3, [r7, #12]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	695a      	ldr	r2, [r3, #20]
 80084c0:	68fb      	ldr	r3, [r7, #12]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80084c8:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3718      	adds	r7, #24
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd80      	pop	{r7, pc}
 80084d4:	080082b7 	.word	0x080082b7
 80084d8:	0800834d 	.word	0x0800834d
 80084dc:	08008383 	.word	0x08008383

080084e0 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 80084e0:	b480      	push	{r7}
 80084e2:	b083      	sub	sp, #12
 80084e4:	af00      	add	r7, sp, #0
 80084e6:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	68da      	ldr	r2, [r3, #12]
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	681b      	ldr	r3, [r3, #0]
 80084f2:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 80084f6:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2220      	movs	r2, #32
 80084fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008500:	bf00      	nop
 8008502:	370c      	adds	r7, #12
 8008504:	46bd      	mov	sp, r7
 8008506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800850a:	4770      	bx	lr

0800850c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800850c:	b480      	push	{r7}
 800850e:	b083      	sub	sp, #12
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008514:	687b      	ldr	r3, [r7, #4]
 8008516:	681b      	ldr	r3, [r3, #0]
 8008518:	68da      	ldr	r2, [r3, #12]
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	681b      	ldr	r3, [r3, #0]
 800851e:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008522:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	695a      	ldr	r2, [r3, #20]
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f022 0201 	bic.w	r2, r2, #1
 8008532:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008538:	2b01      	cmp	r3, #1
 800853a:	d107      	bne.n	800854c <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	68da      	ldr	r2, [r3, #12]
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	f022 0210 	bic.w	r2, r2, #16
 800854a:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800854c:	687b      	ldr	r3, [r7, #4]
 800854e:	2220      	movs	r2, #32
 8008550:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	631a      	str	r2, [r3, #48]	; 0x30
}
 800855a:	bf00      	nop
 800855c:	370c      	adds	r7, #12
 800855e:	46bd      	mov	sp, r7
 8008560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008564:	4770      	bx	lr

08008566 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008566:	b580      	push	{r7, lr}
 8008568:	b084      	sub	sp, #16
 800856a:	af00      	add	r7, sp, #0
 800856c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008572:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	2200      	movs	r2, #0
 8008578:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	2200      	movs	r2, #0
 800857e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008580:	68f8      	ldr	r0, [r7, #12]
 8008582:	f7ff fe4b 	bl	800821c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008586:	bf00      	nop
 8008588:	3710      	adds	r7, #16
 800858a:	46bd      	mov	sp, r7
 800858c:	bd80      	pop	{r7, pc}

0800858e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800858e:	b480      	push	{r7}
 8008590:	b085      	sub	sp, #20
 8008592:	af00      	add	r7, sp, #0
 8008594:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800859c:	b2db      	uxtb	r3, r3
 800859e:	2b21      	cmp	r3, #33	; 0x21
 80085a0:	d13e      	bne.n	8008620 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	689b      	ldr	r3, [r3, #8]
 80085a6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80085aa:	d114      	bne.n	80085d6 <UART_Transmit_IT+0x48>
 80085ac:	687b      	ldr	r3, [r7, #4]
 80085ae:	691b      	ldr	r3, [r3, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d110      	bne.n	80085d6 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6a1b      	ldr	r3, [r3, #32]
 80085b8:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	881b      	ldrh	r3, [r3, #0]
 80085be:	461a      	mov	r2, r3
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80085c8:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6a1b      	ldr	r3, [r3, #32]
 80085ce:	1c9a      	adds	r2, r3, #2
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	621a      	str	r2, [r3, #32]
 80085d4:	e008      	b.n	80085e8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6a1b      	ldr	r3, [r3, #32]
 80085da:	1c59      	adds	r1, r3, #1
 80085dc:	687a      	ldr	r2, [r7, #4]
 80085de:	6211      	str	r1, [r2, #32]
 80085e0:	781a      	ldrb	r2, [r3, #0]
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	681b      	ldr	r3, [r3, #0]
 80085e6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80085ec:	b29b      	uxth	r3, r3
 80085ee:	3b01      	subs	r3, #1
 80085f0:	b29b      	uxth	r3, r3
 80085f2:	687a      	ldr	r2, [r7, #4]
 80085f4:	4619      	mov	r1, r3
 80085f6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80085f8:	2b00      	cmp	r3, #0
 80085fa:	d10f      	bne.n	800861c <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800860a:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800860c:	687b      	ldr	r3, [r7, #4]
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	68da      	ldr	r2, [r3, #12]
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800861a:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800861c:	2300      	movs	r3, #0
 800861e:	e000      	b.n	8008622 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008620:	2302      	movs	r3, #2
  }
}
 8008622:	4618      	mov	r0, r3
 8008624:	3714      	adds	r7, #20
 8008626:	46bd      	mov	sp, r7
 8008628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800862c:	4770      	bx	lr

0800862e <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800862e:	b580      	push	{r7, lr}
 8008630:	b082      	sub	sp, #8
 8008632:	af00      	add	r7, sp, #0
 8008634:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	68da      	ldr	r2, [r3, #12]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008644:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	2220      	movs	r2, #32
 800864a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800864e:	6878      	ldr	r0, [r7, #4]
 8008650:	f7fb ff1a 	bl	8004488 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008654:	2300      	movs	r3, #0
}
 8008656:	4618      	mov	r0, r3
 8008658:	3708      	adds	r7, #8
 800865a:	46bd      	mov	sp, r7
 800865c:	bd80      	pop	{r7, pc}

0800865e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800865e:	b580      	push	{r7, lr}
 8008660:	b084      	sub	sp, #16
 8008662:	af00      	add	r7, sp, #0
 8008664:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800866c:	b2db      	uxtb	r3, r3
 800866e:	2b22      	cmp	r3, #34	; 0x22
 8008670:	f040 8087 	bne.w	8008782 <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	689b      	ldr	r3, [r3, #8]
 8008678:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800867c:	d117      	bne.n	80086ae <UART_Receive_IT+0x50>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	691b      	ldr	r3, [r3, #16]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d113      	bne.n	80086ae <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008686:	2300      	movs	r3, #0
 8008688:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800868e:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	685b      	ldr	r3, [r3, #4]
 8008696:	b29b      	uxth	r3, r3
 8008698:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800869c:	b29a      	uxth	r2, r3
 800869e:	68bb      	ldr	r3, [r7, #8]
 80086a0:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086a6:	1c9a      	adds	r2, r3, #2
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	629a      	str	r2, [r3, #40]	; 0x28
 80086ac:	e026      	b.n	80086fc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b2:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 80086b4:	2300      	movs	r3, #0
 80086b6:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086c0:	d007      	beq.n	80086d2 <UART_Receive_IT+0x74>
 80086c2:	687b      	ldr	r3, [r7, #4]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d10a      	bne.n	80086e0 <UART_Receive_IT+0x82>
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	691b      	ldr	r3, [r3, #16]
 80086ce:	2b00      	cmp	r3, #0
 80086d0:	d106      	bne.n	80086e0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	685b      	ldr	r3, [r3, #4]
 80086d8:	b2da      	uxtb	r2, r3
 80086da:	68fb      	ldr	r3, [r7, #12]
 80086dc:	701a      	strb	r2, [r3, #0]
 80086de:	e008      	b.n	80086f2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	b2db      	uxtb	r3, r3
 80086e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80086ec:	b2da      	uxtb	r2, r3
 80086ee:	68fb      	ldr	r3, [r7, #12]
 80086f0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086f6:	1c5a      	adds	r2, r3, #1
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008700:	b29b      	uxth	r3, r3
 8008702:	3b01      	subs	r3, #1
 8008704:	b29b      	uxth	r3, r3
 8008706:	687a      	ldr	r2, [r7, #4]
 8008708:	4619      	mov	r1, r3
 800870a:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800870c:	2b00      	cmp	r3, #0
 800870e:	d136      	bne.n	800877e <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	68da      	ldr	r2, [r3, #12]
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	681b      	ldr	r3, [r3, #0]
 800871a:	f022 0220 	bic.w	r2, r2, #32
 800871e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	68da      	ldr	r2, [r3, #12]
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	681b      	ldr	r3, [r3, #0]
 800872a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800872e:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008730:	687b      	ldr	r3, [r7, #4]
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	695a      	ldr	r2, [r3, #20]
 8008736:	687b      	ldr	r3, [r7, #4]
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	f022 0201 	bic.w	r2, r2, #1
 800873e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2220      	movs	r2, #32
 8008744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800874c:	2b01      	cmp	r3, #1
 800874e:	d10e      	bne.n	800876e <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	68da      	ldr	r2, [r3, #12]
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f022 0210 	bic.w	r2, r2, #16
 800875e:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008764:	4619      	mov	r1, r3
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7ff fd62 	bl	8008230 <HAL_UARTEx_RxEventCallback>
 800876c:	e002      	b.n	8008774 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 800876e:	6878      	ldr	r0, [r7, #4]
 8008770:	f7fb fe9c 	bl	80044ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008774:	687b      	ldr	r3, [r7, #4]
 8008776:	2200      	movs	r2, #0
 8008778:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 800877a:	2300      	movs	r3, #0
 800877c:	e002      	b.n	8008784 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800877e:	2300      	movs	r3, #0
 8008780:	e000      	b.n	8008784 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008782:	2302      	movs	r3, #2
  }
}
 8008784:	4618      	mov	r0, r3
 8008786:	3710      	adds	r7, #16
 8008788:	46bd      	mov	sp, r7
 800878a:	bd80      	pop	{r7, pc}

0800878c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800878c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008790:	b09f      	sub	sp, #124	; 0x7c
 8008792:	af00      	add	r7, sp, #0
 8008794:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008796:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	691b      	ldr	r3, [r3, #16]
 800879c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80087a0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a2:	68d9      	ldr	r1, [r3, #12]
 80087a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087a6:	681a      	ldr	r2, [r3, #0]
 80087a8:	ea40 0301 	orr.w	r3, r0, r1
 80087ac:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80087ae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b0:	689a      	ldr	r2, [r3, #8]
 80087b2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087b4:	691b      	ldr	r3, [r3, #16]
 80087b6:	431a      	orrs	r2, r3
 80087b8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ba:	695b      	ldr	r3, [r3, #20]
 80087bc:	431a      	orrs	r2, r3
 80087be:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c0:	69db      	ldr	r3, [r3, #28]
 80087c2:	4313      	orrs	r3, r2
 80087c4:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 80087c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	68db      	ldr	r3, [r3, #12]
 80087cc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80087d0:	f021 010c 	bic.w	r1, r1, #12
 80087d4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087d6:	681a      	ldr	r2, [r3, #0]
 80087d8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80087da:	430b      	orrs	r3, r1
 80087dc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80087de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	695b      	ldr	r3, [r3, #20]
 80087e4:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80087e8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ea:	6999      	ldr	r1, [r3, #24]
 80087ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087ee:	681a      	ldr	r2, [r3, #0]
 80087f0:	ea40 0301 	orr.w	r3, r0, r1
 80087f4:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80087f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80087f8:	681a      	ldr	r2, [r3, #0]
 80087fa:	4bc5      	ldr	r3, [pc, #788]	; (8008b10 <UART_SetConfig+0x384>)
 80087fc:	429a      	cmp	r2, r3
 80087fe:	d004      	beq.n	800880a <UART_SetConfig+0x7e>
 8008800:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008802:	681a      	ldr	r2, [r3, #0]
 8008804:	4bc3      	ldr	r3, [pc, #780]	; (8008b14 <UART_SetConfig+0x388>)
 8008806:	429a      	cmp	r2, r3
 8008808:	d103      	bne.n	8008812 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800880a:	f7ff fa49 	bl	8007ca0 <HAL_RCC_GetPCLK2Freq>
 800880e:	6778      	str	r0, [r7, #116]	; 0x74
 8008810:	e002      	b.n	8008818 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008812:	f7ff fa31 	bl	8007c78 <HAL_RCC_GetPCLK1Freq>
 8008816:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008818:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800881a:	69db      	ldr	r3, [r3, #28]
 800881c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008820:	f040 80b6 	bne.w	8008990 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008824:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008826:	461c      	mov	r4, r3
 8008828:	f04f 0500 	mov.w	r5, #0
 800882c:	4622      	mov	r2, r4
 800882e:	462b      	mov	r3, r5
 8008830:	1891      	adds	r1, r2, r2
 8008832:	6439      	str	r1, [r7, #64]	; 0x40
 8008834:	415b      	adcs	r3, r3
 8008836:	647b      	str	r3, [r7, #68]	; 0x44
 8008838:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800883c:	1912      	adds	r2, r2, r4
 800883e:	eb45 0303 	adc.w	r3, r5, r3
 8008842:	f04f 0000 	mov.w	r0, #0
 8008846:	f04f 0100 	mov.w	r1, #0
 800884a:	00d9      	lsls	r1, r3, #3
 800884c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008850:	00d0      	lsls	r0, r2, #3
 8008852:	4602      	mov	r2, r0
 8008854:	460b      	mov	r3, r1
 8008856:	1911      	adds	r1, r2, r4
 8008858:	6639      	str	r1, [r7, #96]	; 0x60
 800885a:	416b      	adcs	r3, r5
 800885c:	667b      	str	r3, [r7, #100]	; 0x64
 800885e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008860:	685b      	ldr	r3, [r3, #4]
 8008862:	461a      	mov	r2, r3
 8008864:	f04f 0300 	mov.w	r3, #0
 8008868:	1891      	adds	r1, r2, r2
 800886a:	63b9      	str	r1, [r7, #56]	; 0x38
 800886c:	415b      	adcs	r3, r3
 800886e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008870:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008874:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008878:	f7f7 fe7c 	bl	8000574 <__aeabi_uldivmod>
 800887c:	4602      	mov	r2, r0
 800887e:	460b      	mov	r3, r1
 8008880:	4ba5      	ldr	r3, [pc, #660]	; (8008b18 <UART_SetConfig+0x38c>)
 8008882:	fba3 2302 	umull	r2, r3, r3, r2
 8008886:	095b      	lsrs	r3, r3, #5
 8008888:	011e      	lsls	r6, r3, #4
 800888a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800888c:	461c      	mov	r4, r3
 800888e:	f04f 0500 	mov.w	r5, #0
 8008892:	4622      	mov	r2, r4
 8008894:	462b      	mov	r3, r5
 8008896:	1891      	adds	r1, r2, r2
 8008898:	6339      	str	r1, [r7, #48]	; 0x30
 800889a:	415b      	adcs	r3, r3
 800889c:	637b      	str	r3, [r7, #52]	; 0x34
 800889e:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80088a2:	1912      	adds	r2, r2, r4
 80088a4:	eb45 0303 	adc.w	r3, r5, r3
 80088a8:	f04f 0000 	mov.w	r0, #0
 80088ac:	f04f 0100 	mov.w	r1, #0
 80088b0:	00d9      	lsls	r1, r3, #3
 80088b2:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80088b6:	00d0      	lsls	r0, r2, #3
 80088b8:	4602      	mov	r2, r0
 80088ba:	460b      	mov	r3, r1
 80088bc:	1911      	adds	r1, r2, r4
 80088be:	65b9      	str	r1, [r7, #88]	; 0x58
 80088c0:	416b      	adcs	r3, r5
 80088c2:	65fb      	str	r3, [r7, #92]	; 0x5c
 80088c4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088c6:	685b      	ldr	r3, [r3, #4]
 80088c8:	461a      	mov	r2, r3
 80088ca:	f04f 0300 	mov.w	r3, #0
 80088ce:	1891      	adds	r1, r2, r2
 80088d0:	62b9      	str	r1, [r7, #40]	; 0x28
 80088d2:	415b      	adcs	r3, r3
 80088d4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80088d6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80088da:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 80088de:	f7f7 fe49 	bl	8000574 <__aeabi_uldivmod>
 80088e2:	4602      	mov	r2, r0
 80088e4:	460b      	mov	r3, r1
 80088e6:	4b8c      	ldr	r3, [pc, #560]	; (8008b18 <UART_SetConfig+0x38c>)
 80088e8:	fba3 1302 	umull	r1, r3, r3, r2
 80088ec:	095b      	lsrs	r3, r3, #5
 80088ee:	2164      	movs	r1, #100	; 0x64
 80088f0:	fb01 f303 	mul.w	r3, r1, r3
 80088f4:	1ad3      	subs	r3, r2, r3
 80088f6:	00db      	lsls	r3, r3, #3
 80088f8:	3332      	adds	r3, #50	; 0x32
 80088fa:	4a87      	ldr	r2, [pc, #540]	; (8008b18 <UART_SetConfig+0x38c>)
 80088fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008900:	095b      	lsrs	r3, r3, #5
 8008902:	005b      	lsls	r3, r3, #1
 8008904:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008908:	441e      	add	r6, r3
 800890a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800890c:	4618      	mov	r0, r3
 800890e:	f04f 0100 	mov.w	r1, #0
 8008912:	4602      	mov	r2, r0
 8008914:	460b      	mov	r3, r1
 8008916:	1894      	adds	r4, r2, r2
 8008918:	623c      	str	r4, [r7, #32]
 800891a:	415b      	adcs	r3, r3
 800891c:	627b      	str	r3, [r7, #36]	; 0x24
 800891e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008922:	1812      	adds	r2, r2, r0
 8008924:	eb41 0303 	adc.w	r3, r1, r3
 8008928:	f04f 0400 	mov.w	r4, #0
 800892c:	f04f 0500 	mov.w	r5, #0
 8008930:	00dd      	lsls	r5, r3, #3
 8008932:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008936:	00d4      	lsls	r4, r2, #3
 8008938:	4622      	mov	r2, r4
 800893a:	462b      	mov	r3, r5
 800893c:	1814      	adds	r4, r2, r0
 800893e:	653c      	str	r4, [r7, #80]	; 0x50
 8008940:	414b      	adcs	r3, r1
 8008942:	657b      	str	r3, [r7, #84]	; 0x54
 8008944:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	461a      	mov	r2, r3
 800894a:	f04f 0300 	mov.w	r3, #0
 800894e:	1891      	adds	r1, r2, r2
 8008950:	61b9      	str	r1, [r7, #24]
 8008952:	415b      	adcs	r3, r3
 8008954:	61fb      	str	r3, [r7, #28]
 8008956:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800895a:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 800895e:	f7f7 fe09 	bl	8000574 <__aeabi_uldivmod>
 8008962:	4602      	mov	r2, r0
 8008964:	460b      	mov	r3, r1
 8008966:	4b6c      	ldr	r3, [pc, #432]	; (8008b18 <UART_SetConfig+0x38c>)
 8008968:	fba3 1302 	umull	r1, r3, r3, r2
 800896c:	095b      	lsrs	r3, r3, #5
 800896e:	2164      	movs	r1, #100	; 0x64
 8008970:	fb01 f303 	mul.w	r3, r1, r3
 8008974:	1ad3      	subs	r3, r2, r3
 8008976:	00db      	lsls	r3, r3, #3
 8008978:	3332      	adds	r3, #50	; 0x32
 800897a:	4a67      	ldr	r2, [pc, #412]	; (8008b18 <UART_SetConfig+0x38c>)
 800897c:	fba2 2303 	umull	r2, r3, r2, r3
 8008980:	095b      	lsrs	r3, r3, #5
 8008982:	f003 0207 	and.w	r2, r3, #7
 8008986:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	4432      	add	r2, r6
 800898c:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800898e:	e0b9      	b.n	8008b04 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008990:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008992:	461c      	mov	r4, r3
 8008994:	f04f 0500 	mov.w	r5, #0
 8008998:	4622      	mov	r2, r4
 800899a:	462b      	mov	r3, r5
 800899c:	1891      	adds	r1, r2, r2
 800899e:	6139      	str	r1, [r7, #16]
 80089a0:	415b      	adcs	r3, r3
 80089a2:	617b      	str	r3, [r7, #20]
 80089a4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80089a8:	1912      	adds	r2, r2, r4
 80089aa:	eb45 0303 	adc.w	r3, r5, r3
 80089ae:	f04f 0000 	mov.w	r0, #0
 80089b2:	f04f 0100 	mov.w	r1, #0
 80089b6:	00d9      	lsls	r1, r3, #3
 80089b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80089bc:	00d0      	lsls	r0, r2, #3
 80089be:	4602      	mov	r2, r0
 80089c0:	460b      	mov	r3, r1
 80089c2:	eb12 0804 	adds.w	r8, r2, r4
 80089c6:	eb43 0905 	adc.w	r9, r3, r5
 80089ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80089cc:	685b      	ldr	r3, [r3, #4]
 80089ce:	4618      	mov	r0, r3
 80089d0:	f04f 0100 	mov.w	r1, #0
 80089d4:	f04f 0200 	mov.w	r2, #0
 80089d8:	f04f 0300 	mov.w	r3, #0
 80089dc:	008b      	lsls	r3, r1, #2
 80089de:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80089e2:	0082      	lsls	r2, r0, #2
 80089e4:	4640      	mov	r0, r8
 80089e6:	4649      	mov	r1, r9
 80089e8:	f7f7 fdc4 	bl	8000574 <__aeabi_uldivmod>
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	4b49      	ldr	r3, [pc, #292]	; (8008b18 <UART_SetConfig+0x38c>)
 80089f2:	fba3 2302 	umull	r2, r3, r3, r2
 80089f6:	095b      	lsrs	r3, r3, #5
 80089f8:	011e      	lsls	r6, r3, #4
 80089fa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80089fc:	4618      	mov	r0, r3
 80089fe:	f04f 0100 	mov.w	r1, #0
 8008a02:	4602      	mov	r2, r0
 8008a04:	460b      	mov	r3, r1
 8008a06:	1894      	adds	r4, r2, r2
 8008a08:	60bc      	str	r4, [r7, #8]
 8008a0a:	415b      	adcs	r3, r3
 8008a0c:	60fb      	str	r3, [r7, #12]
 8008a0e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a12:	1812      	adds	r2, r2, r0
 8008a14:	eb41 0303 	adc.w	r3, r1, r3
 8008a18:	f04f 0400 	mov.w	r4, #0
 8008a1c:	f04f 0500 	mov.w	r5, #0
 8008a20:	00dd      	lsls	r5, r3, #3
 8008a22:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008a26:	00d4      	lsls	r4, r2, #3
 8008a28:	4622      	mov	r2, r4
 8008a2a:	462b      	mov	r3, r5
 8008a2c:	1814      	adds	r4, r2, r0
 8008a2e:	64bc      	str	r4, [r7, #72]	; 0x48
 8008a30:	414b      	adcs	r3, r1
 8008a32:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008a36:	685b      	ldr	r3, [r3, #4]
 8008a38:	4618      	mov	r0, r3
 8008a3a:	f04f 0100 	mov.w	r1, #0
 8008a3e:	f04f 0200 	mov.w	r2, #0
 8008a42:	f04f 0300 	mov.w	r3, #0
 8008a46:	008b      	lsls	r3, r1, #2
 8008a48:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008a4c:	0082      	lsls	r2, r0, #2
 8008a4e:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008a52:	f7f7 fd8f 	bl	8000574 <__aeabi_uldivmod>
 8008a56:	4602      	mov	r2, r0
 8008a58:	460b      	mov	r3, r1
 8008a5a:	4b2f      	ldr	r3, [pc, #188]	; (8008b18 <UART_SetConfig+0x38c>)
 8008a5c:	fba3 1302 	umull	r1, r3, r3, r2
 8008a60:	095b      	lsrs	r3, r3, #5
 8008a62:	2164      	movs	r1, #100	; 0x64
 8008a64:	fb01 f303 	mul.w	r3, r1, r3
 8008a68:	1ad3      	subs	r3, r2, r3
 8008a6a:	011b      	lsls	r3, r3, #4
 8008a6c:	3332      	adds	r3, #50	; 0x32
 8008a6e:	4a2a      	ldr	r2, [pc, #168]	; (8008b18 <UART_SetConfig+0x38c>)
 8008a70:	fba2 2303 	umull	r2, r3, r2, r3
 8008a74:	095b      	lsrs	r3, r3, #5
 8008a76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008a7a:	441e      	add	r6, r3
 8008a7c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008a7e:	4618      	mov	r0, r3
 8008a80:	f04f 0100 	mov.w	r1, #0
 8008a84:	4602      	mov	r2, r0
 8008a86:	460b      	mov	r3, r1
 8008a88:	1894      	adds	r4, r2, r2
 8008a8a:	603c      	str	r4, [r7, #0]
 8008a8c:	415b      	adcs	r3, r3
 8008a8e:	607b      	str	r3, [r7, #4]
 8008a90:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008a94:	1812      	adds	r2, r2, r0
 8008a96:	eb41 0303 	adc.w	r3, r1, r3
 8008a9a:	f04f 0400 	mov.w	r4, #0
 8008a9e:	f04f 0500 	mov.w	r5, #0
 8008aa2:	00dd      	lsls	r5, r3, #3
 8008aa4:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008aa8:	00d4      	lsls	r4, r2, #3
 8008aaa:	4622      	mov	r2, r4
 8008aac:	462b      	mov	r3, r5
 8008aae:	eb12 0a00 	adds.w	sl, r2, r0
 8008ab2:	eb43 0b01 	adc.w	fp, r3, r1
 8008ab6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f04f 0100 	mov.w	r1, #0
 8008ac0:	f04f 0200 	mov.w	r2, #0
 8008ac4:	f04f 0300 	mov.w	r3, #0
 8008ac8:	008b      	lsls	r3, r1, #2
 8008aca:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008ace:	0082      	lsls	r2, r0, #2
 8008ad0:	4650      	mov	r0, sl
 8008ad2:	4659      	mov	r1, fp
 8008ad4:	f7f7 fd4e 	bl	8000574 <__aeabi_uldivmod>
 8008ad8:	4602      	mov	r2, r0
 8008ada:	460b      	mov	r3, r1
 8008adc:	4b0e      	ldr	r3, [pc, #56]	; (8008b18 <UART_SetConfig+0x38c>)
 8008ade:	fba3 1302 	umull	r1, r3, r3, r2
 8008ae2:	095b      	lsrs	r3, r3, #5
 8008ae4:	2164      	movs	r1, #100	; 0x64
 8008ae6:	fb01 f303 	mul.w	r3, r1, r3
 8008aea:	1ad3      	subs	r3, r2, r3
 8008aec:	011b      	lsls	r3, r3, #4
 8008aee:	3332      	adds	r3, #50	; 0x32
 8008af0:	4a09      	ldr	r2, [pc, #36]	; (8008b18 <UART_SetConfig+0x38c>)
 8008af2:	fba2 2303 	umull	r2, r3, r2, r3
 8008af6:	095b      	lsrs	r3, r3, #5
 8008af8:	f003 020f 	and.w	r2, r3, #15
 8008afc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	4432      	add	r2, r6
 8008b02:	609a      	str	r2, [r3, #8]
}
 8008b04:	bf00      	nop
 8008b06:	377c      	adds	r7, #124	; 0x7c
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b0e:	bf00      	nop
 8008b10:	40011000 	.word	0x40011000
 8008b14:	40011400 	.word	0x40011400
 8008b18:	51eb851f 	.word	0x51eb851f

08008b1c <__cxa_pure_virtual>:
 8008b1c:	b508      	push	{r3, lr}
 8008b1e:	f000 f80d 	bl	8008b3c <_ZSt9terminatev>

08008b22 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8008b22:	b508      	push	{r3, lr}
 8008b24:	4780      	blx	r0
 8008b26:	f000 f80e 	bl	8008b46 <abort>
	...

08008b2c <_ZSt13get_terminatev>:
 8008b2c:	4b02      	ldr	r3, [pc, #8]	; (8008b38 <_ZSt13get_terminatev+0xc>)
 8008b2e:	6818      	ldr	r0, [r3, #0]
 8008b30:	f3bf 8f5b 	dmb	ish
 8008b34:	4770      	bx	lr
 8008b36:	bf00      	nop
 8008b38:	20000014 	.word	0x20000014

08008b3c <_ZSt9terminatev>:
 8008b3c:	b508      	push	{r3, lr}
 8008b3e:	f7ff fff5 	bl	8008b2c <_ZSt13get_terminatev>
 8008b42:	f7ff ffee 	bl	8008b22 <_ZN10__cxxabiv111__terminateEPFvvE>

08008b46 <abort>:
 8008b46:	b508      	push	{r3, lr}
 8008b48:	2006      	movs	r0, #6
 8008b4a:	f000 f873 	bl	8008c34 <raise>
 8008b4e:	2001      	movs	r0, #1
 8008b50:	f7fc fc04 	bl	800535c <_exit>

08008b54 <__errno>:
 8008b54:	4b01      	ldr	r3, [pc, #4]	; (8008b5c <__errno+0x8>)
 8008b56:	6818      	ldr	r0, [r3, #0]
 8008b58:	4770      	bx	lr
 8008b5a:	bf00      	nop
 8008b5c:	20000018 	.word	0x20000018

08008b60 <__libc_init_array>:
 8008b60:	b570      	push	{r4, r5, r6, lr}
 8008b62:	4d0d      	ldr	r5, [pc, #52]	; (8008b98 <__libc_init_array+0x38>)
 8008b64:	4c0d      	ldr	r4, [pc, #52]	; (8008b9c <__libc_init_array+0x3c>)
 8008b66:	1b64      	subs	r4, r4, r5
 8008b68:	10a4      	asrs	r4, r4, #2
 8008b6a:	2600      	movs	r6, #0
 8008b6c:	42a6      	cmp	r6, r4
 8008b6e:	d109      	bne.n	8008b84 <__libc_init_array+0x24>
 8008b70:	4d0b      	ldr	r5, [pc, #44]	; (8008ba0 <__libc_init_array+0x40>)
 8008b72:	4c0c      	ldr	r4, [pc, #48]	; (8008ba4 <__libc_init_array+0x44>)
 8008b74:	f000 f970 	bl	8008e58 <_init>
 8008b78:	1b64      	subs	r4, r4, r5
 8008b7a:	10a4      	asrs	r4, r4, #2
 8008b7c:	2600      	movs	r6, #0
 8008b7e:	42a6      	cmp	r6, r4
 8008b80:	d105      	bne.n	8008b8e <__libc_init_array+0x2e>
 8008b82:	bd70      	pop	{r4, r5, r6, pc}
 8008b84:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b88:	4798      	blx	r3
 8008b8a:	3601      	adds	r6, #1
 8008b8c:	e7ee      	b.n	8008b6c <__libc_init_array+0xc>
 8008b8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b92:	4798      	blx	r3
 8008b94:	3601      	adds	r6, #1
 8008b96:	e7f2      	b.n	8008b7e <__libc_init_array+0x1e>
 8008b98:	080091ac 	.word	0x080091ac
 8008b9c:	080091ac 	.word	0x080091ac
 8008ba0:	080091ac 	.word	0x080091ac
 8008ba4:	080091b4 	.word	0x080091b4

08008ba8 <memcpy>:
 8008ba8:	440a      	add	r2, r1
 8008baa:	4291      	cmp	r1, r2
 8008bac:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8008bb0:	d100      	bne.n	8008bb4 <memcpy+0xc>
 8008bb2:	4770      	bx	lr
 8008bb4:	b510      	push	{r4, lr}
 8008bb6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008bba:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008bbe:	4291      	cmp	r1, r2
 8008bc0:	d1f9      	bne.n	8008bb6 <memcpy+0xe>
 8008bc2:	bd10      	pop	{r4, pc}

08008bc4 <memset>:
 8008bc4:	4402      	add	r2, r0
 8008bc6:	4603      	mov	r3, r0
 8008bc8:	4293      	cmp	r3, r2
 8008bca:	d100      	bne.n	8008bce <memset+0xa>
 8008bcc:	4770      	bx	lr
 8008bce:	f803 1b01 	strb.w	r1, [r3], #1
 8008bd2:	e7f9      	b.n	8008bc8 <memset+0x4>

08008bd4 <realloc>:
 8008bd4:	4b02      	ldr	r3, [pc, #8]	; (8008be0 <realloc+0xc>)
 8008bd6:	460a      	mov	r2, r1
 8008bd8:	4601      	mov	r1, r0
 8008bda:	6818      	ldr	r0, [r3, #0]
 8008bdc:	f000 b8a0 	b.w	8008d20 <_realloc_r>
 8008be0:	20000018 	.word	0x20000018

08008be4 <_raise_r>:
 8008be4:	291f      	cmp	r1, #31
 8008be6:	b538      	push	{r3, r4, r5, lr}
 8008be8:	4604      	mov	r4, r0
 8008bea:	460d      	mov	r5, r1
 8008bec:	d904      	bls.n	8008bf8 <_raise_r+0x14>
 8008bee:	2316      	movs	r3, #22
 8008bf0:	6003      	str	r3, [r0, #0]
 8008bf2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8008bf6:	bd38      	pop	{r3, r4, r5, pc}
 8008bf8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8008bfa:	b112      	cbz	r2, 8008c02 <_raise_r+0x1e>
 8008bfc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008c00:	b94b      	cbnz	r3, 8008c16 <_raise_r+0x32>
 8008c02:	4620      	mov	r0, r4
 8008c04:	f000 f830 	bl	8008c68 <_getpid_r>
 8008c08:	462a      	mov	r2, r5
 8008c0a:	4601      	mov	r1, r0
 8008c0c:	4620      	mov	r0, r4
 8008c0e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008c12:	f000 b817 	b.w	8008c44 <_kill_r>
 8008c16:	2b01      	cmp	r3, #1
 8008c18:	d00a      	beq.n	8008c30 <_raise_r+0x4c>
 8008c1a:	1c59      	adds	r1, r3, #1
 8008c1c:	d103      	bne.n	8008c26 <_raise_r+0x42>
 8008c1e:	2316      	movs	r3, #22
 8008c20:	6003      	str	r3, [r0, #0]
 8008c22:	2001      	movs	r0, #1
 8008c24:	e7e7      	b.n	8008bf6 <_raise_r+0x12>
 8008c26:	2400      	movs	r4, #0
 8008c28:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8008c2c:	4628      	mov	r0, r5
 8008c2e:	4798      	blx	r3
 8008c30:	2000      	movs	r0, #0
 8008c32:	e7e0      	b.n	8008bf6 <_raise_r+0x12>

08008c34 <raise>:
 8008c34:	4b02      	ldr	r3, [pc, #8]	; (8008c40 <raise+0xc>)
 8008c36:	4601      	mov	r1, r0
 8008c38:	6818      	ldr	r0, [r3, #0]
 8008c3a:	f7ff bfd3 	b.w	8008be4 <_raise_r>
 8008c3e:	bf00      	nop
 8008c40:	20000018 	.word	0x20000018

08008c44 <_kill_r>:
 8008c44:	b538      	push	{r3, r4, r5, lr}
 8008c46:	4d07      	ldr	r5, [pc, #28]	; (8008c64 <_kill_r+0x20>)
 8008c48:	2300      	movs	r3, #0
 8008c4a:	4604      	mov	r4, r0
 8008c4c:	4608      	mov	r0, r1
 8008c4e:	4611      	mov	r1, r2
 8008c50:	602b      	str	r3, [r5, #0]
 8008c52:	f7fc fb73 	bl	800533c <_kill>
 8008c56:	1c43      	adds	r3, r0, #1
 8008c58:	d102      	bne.n	8008c60 <_kill_r+0x1c>
 8008c5a:	682b      	ldr	r3, [r5, #0]
 8008c5c:	b103      	cbz	r3, 8008c60 <_kill_r+0x1c>
 8008c5e:	6023      	str	r3, [r4, #0]
 8008c60:	bd38      	pop	{r3, r4, r5, pc}
 8008c62:	bf00      	nop
 8008c64:	20000db8 	.word	0x20000db8

08008c68 <_getpid_r>:
 8008c68:	f7fc bb60 	b.w	800532c <_getpid>

08008c6c <_malloc_r>:
 8008c6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c6e:	1ccd      	adds	r5, r1, #3
 8008c70:	f025 0503 	bic.w	r5, r5, #3
 8008c74:	3508      	adds	r5, #8
 8008c76:	2d0c      	cmp	r5, #12
 8008c78:	bf38      	it	cc
 8008c7a:	250c      	movcc	r5, #12
 8008c7c:	2d00      	cmp	r5, #0
 8008c7e:	4606      	mov	r6, r0
 8008c80:	db01      	blt.n	8008c86 <_malloc_r+0x1a>
 8008c82:	42a9      	cmp	r1, r5
 8008c84:	d903      	bls.n	8008c8e <_malloc_r+0x22>
 8008c86:	230c      	movs	r3, #12
 8008c88:	6033      	str	r3, [r6, #0]
 8008c8a:	2000      	movs	r0, #0
 8008c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c8e:	f000 f87d 	bl	8008d8c <__malloc_lock>
 8008c92:	4921      	ldr	r1, [pc, #132]	; (8008d18 <_malloc_r+0xac>)
 8008c94:	680a      	ldr	r2, [r1, #0]
 8008c96:	4614      	mov	r4, r2
 8008c98:	b99c      	cbnz	r4, 8008cc2 <_malloc_r+0x56>
 8008c9a:	4f20      	ldr	r7, [pc, #128]	; (8008d1c <_malloc_r+0xb0>)
 8008c9c:	683b      	ldr	r3, [r7, #0]
 8008c9e:	b923      	cbnz	r3, 8008caa <_malloc_r+0x3e>
 8008ca0:	4621      	mov	r1, r4
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f000 f862 	bl	8008d6c <_sbrk_r>
 8008ca8:	6038      	str	r0, [r7, #0]
 8008caa:	4629      	mov	r1, r5
 8008cac:	4630      	mov	r0, r6
 8008cae:	f000 f85d 	bl	8008d6c <_sbrk_r>
 8008cb2:	1c43      	adds	r3, r0, #1
 8008cb4:	d123      	bne.n	8008cfe <_malloc_r+0x92>
 8008cb6:	230c      	movs	r3, #12
 8008cb8:	6033      	str	r3, [r6, #0]
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f000 f86c 	bl	8008d98 <__malloc_unlock>
 8008cc0:	e7e3      	b.n	8008c8a <_malloc_r+0x1e>
 8008cc2:	6823      	ldr	r3, [r4, #0]
 8008cc4:	1b5b      	subs	r3, r3, r5
 8008cc6:	d417      	bmi.n	8008cf8 <_malloc_r+0x8c>
 8008cc8:	2b0b      	cmp	r3, #11
 8008cca:	d903      	bls.n	8008cd4 <_malloc_r+0x68>
 8008ccc:	6023      	str	r3, [r4, #0]
 8008cce:	441c      	add	r4, r3
 8008cd0:	6025      	str	r5, [r4, #0]
 8008cd2:	e004      	b.n	8008cde <_malloc_r+0x72>
 8008cd4:	6863      	ldr	r3, [r4, #4]
 8008cd6:	42a2      	cmp	r2, r4
 8008cd8:	bf0c      	ite	eq
 8008cda:	600b      	streq	r3, [r1, #0]
 8008cdc:	6053      	strne	r3, [r2, #4]
 8008cde:	4630      	mov	r0, r6
 8008ce0:	f000 f85a 	bl	8008d98 <__malloc_unlock>
 8008ce4:	f104 000b 	add.w	r0, r4, #11
 8008ce8:	1d23      	adds	r3, r4, #4
 8008cea:	f020 0007 	bic.w	r0, r0, #7
 8008cee:	1ac2      	subs	r2, r0, r3
 8008cf0:	d0cc      	beq.n	8008c8c <_malloc_r+0x20>
 8008cf2:	1a1b      	subs	r3, r3, r0
 8008cf4:	50a3      	str	r3, [r4, r2]
 8008cf6:	e7c9      	b.n	8008c8c <_malloc_r+0x20>
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	6864      	ldr	r4, [r4, #4]
 8008cfc:	e7cc      	b.n	8008c98 <_malloc_r+0x2c>
 8008cfe:	1cc4      	adds	r4, r0, #3
 8008d00:	f024 0403 	bic.w	r4, r4, #3
 8008d04:	42a0      	cmp	r0, r4
 8008d06:	d0e3      	beq.n	8008cd0 <_malloc_r+0x64>
 8008d08:	1a21      	subs	r1, r4, r0
 8008d0a:	4630      	mov	r0, r6
 8008d0c:	f000 f82e 	bl	8008d6c <_sbrk_r>
 8008d10:	3001      	adds	r0, #1
 8008d12:	d1dd      	bne.n	8008cd0 <_malloc_r+0x64>
 8008d14:	e7cf      	b.n	8008cb6 <_malloc_r+0x4a>
 8008d16:	bf00      	nop
 8008d18:	20000b70 	.word	0x20000b70
 8008d1c:	20000b74 	.word	0x20000b74

08008d20 <_realloc_r>:
 8008d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d22:	4607      	mov	r7, r0
 8008d24:	4614      	mov	r4, r2
 8008d26:	460e      	mov	r6, r1
 8008d28:	b921      	cbnz	r1, 8008d34 <_realloc_r+0x14>
 8008d2a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8008d2e:	4611      	mov	r1, r2
 8008d30:	f7ff bf9c 	b.w	8008c6c <_malloc_r>
 8008d34:	b922      	cbnz	r2, 8008d40 <_realloc_r+0x20>
 8008d36:	f000 f835 	bl	8008da4 <_free_r>
 8008d3a:	4625      	mov	r5, r4
 8008d3c:	4628      	mov	r0, r5
 8008d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d40:	f000 f880 	bl	8008e44 <_malloc_usable_size_r>
 8008d44:	42a0      	cmp	r0, r4
 8008d46:	d20f      	bcs.n	8008d68 <_realloc_r+0x48>
 8008d48:	4621      	mov	r1, r4
 8008d4a:	4638      	mov	r0, r7
 8008d4c:	f7ff ff8e 	bl	8008c6c <_malloc_r>
 8008d50:	4605      	mov	r5, r0
 8008d52:	2800      	cmp	r0, #0
 8008d54:	d0f2      	beq.n	8008d3c <_realloc_r+0x1c>
 8008d56:	4631      	mov	r1, r6
 8008d58:	4622      	mov	r2, r4
 8008d5a:	f7ff ff25 	bl	8008ba8 <memcpy>
 8008d5e:	4631      	mov	r1, r6
 8008d60:	4638      	mov	r0, r7
 8008d62:	f000 f81f 	bl	8008da4 <_free_r>
 8008d66:	e7e9      	b.n	8008d3c <_realloc_r+0x1c>
 8008d68:	4635      	mov	r5, r6
 8008d6a:	e7e7      	b.n	8008d3c <_realloc_r+0x1c>

08008d6c <_sbrk_r>:
 8008d6c:	b538      	push	{r3, r4, r5, lr}
 8008d6e:	4d06      	ldr	r5, [pc, #24]	; (8008d88 <_sbrk_r+0x1c>)
 8008d70:	2300      	movs	r3, #0
 8008d72:	4604      	mov	r4, r0
 8008d74:	4608      	mov	r0, r1
 8008d76:	602b      	str	r3, [r5, #0]
 8008d78:	f7fc fafa 	bl	8005370 <_sbrk>
 8008d7c:	1c43      	adds	r3, r0, #1
 8008d7e:	d102      	bne.n	8008d86 <_sbrk_r+0x1a>
 8008d80:	682b      	ldr	r3, [r5, #0]
 8008d82:	b103      	cbz	r3, 8008d86 <_sbrk_r+0x1a>
 8008d84:	6023      	str	r3, [r4, #0]
 8008d86:	bd38      	pop	{r3, r4, r5, pc}
 8008d88:	20000db8 	.word	0x20000db8

08008d8c <__malloc_lock>:
 8008d8c:	4801      	ldr	r0, [pc, #4]	; (8008d94 <__malloc_lock+0x8>)
 8008d8e:	f000 b861 	b.w	8008e54 <__retarget_lock_acquire_recursive>
 8008d92:	bf00      	nop
 8008d94:	20000dc0 	.word	0x20000dc0

08008d98 <__malloc_unlock>:
 8008d98:	4801      	ldr	r0, [pc, #4]	; (8008da0 <__malloc_unlock+0x8>)
 8008d9a:	f000 b85c 	b.w	8008e56 <__retarget_lock_release_recursive>
 8008d9e:	bf00      	nop
 8008da0:	20000dc0 	.word	0x20000dc0

08008da4 <_free_r>:
 8008da4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008da6:	2900      	cmp	r1, #0
 8008da8:	d048      	beq.n	8008e3c <_free_r+0x98>
 8008daa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008dae:	9001      	str	r0, [sp, #4]
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	f1a1 0404 	sub.w	r4, r1, #4
 8008db6:	bfb8      	it	lt
 8008db8:	18e4      	addlt	r4, r4, r3
 8008dba:	f7ff ffe7 	bl	8008d8c <__malloc_lock>
 8008dbe:	4a20      	ldr	r2, [pc, #128]	; (8008e40 <_free_r+0x9c>)
 8008dc0:	9801      	ldr	r0, [sp, #4]
 8008dc2:	6813      	ldr	r3, [r2, #0]
 8008dc4:	4615      	mov	r5, r2
 8008dc6:	b933      	cbnz	r3, 8008dd6 <_free_r+0x32>
 8008dc8:	6063      	str	r3, [r4, #4]
 8008dca:	6014      	str	r4, [r2, #0]
 8008dcc:	b003      	add	sp, #12
 8008dce:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008dd2:	f7ff bfe1 	b.w	8008d98 <__malloc_unlock>
 8008dd6:	42a3      	cmp	r3, r4
 8008dd8:	d90b      	bls.n	8008df2 <_free_r+0x4e>
 8008dda:	6821      	ldr	r1, [r4, #0]
 8008ddc:	1862      	adds	r2, r4, r1
 8008dde:	4293      	cmp	r3, r2
 8008de0:	bf04      	itt	eq
 8008de2:	681a      	ldreq	r2, [r3, #0]
 8008de4:	685b      	ldreq	r3, [r3, #4]
 8008de6:	6063      	str	r3, [r4, #4]
 8008de8:	bf04      	itt	eq
 8008dea:	1852      	addeq	r2, r2, r1
 8008dec:	6022      	streq	r2, [r4, #0]
 8008dee:	602c      	str	r4, [r5, #0]
 8008df0:	e7ec      	b.n	8008dcc <_free_r+0x28>
 8008df2:	461a      	mov	r2, r3
 8008df4:	685b      	ldr	r3, [r3, #4]
 8008df6:	b10b      	cbz	r3, 8008dfc <_free_r+0x58>
 8008df8:	42a3      	cmp	r3, r4
 8008dfa:	d9fa      	bls.n	8008df2 <_free_r+0x4e>
 8008dfc:	6811      	ldr	r1, [r2, #0]
 8008dfe:	1855      	adds	r5, r2, r1
 8008e00:	42a5      	cmp	r5, r4
 8008e02:	d10b      	bne.n	8008e1c <_free_r+0x78>
 8008e04:	6824      	ldr	r4, [r4, #0]
 8008e06:	4421      	add	r1, r4
 8008e08:	1854      	adds	r4, r2, r1
 8008e0a:	42a3      	cmp	r3, r4
 8008e0c:	6011      	str	r1, [r2, #0]
 8008e0e:	d1dd      	bne.n	8008dcc <_free_r+0x28>
 8008e10:	681c      	ldr	r4, [r3, #0]
 8008e12:	685b      	ldr	r3, [r3, #4]
 8008e14:	6053      	str	r3, [r2, #4]
 8008e16:	4421      	add	r1, r4
 8008e18:	6011      	str	r1, [r2, #0]
 8008e1a:	e7d7      	b.n	8008dcc <_free_r+0x28>
 8008e1c:	d902      	bls.n	8008e24 <_free_r+0x80>
 8008e1e:	230c      	movs	r3, #12
 8008e20:	6003      	str	r3, [r0, #0]
 8008e22:	e7d3      	b.n	8008dcc <_free_r+0x28>
 8008e24:	6825      	ldr	r5, [r4, #0]
 8008e26:	1961      	adds	r1, r4, r5
 8008e28:	428b      	cmp	r3, r1
 8008e2a:	bf04      	itt	eq
 8008e2c:	6819      	ldreq	r1, [r3, #0]
 8008e2e:	685b      	ldreq	r3, [r3, #4]
 8008e30:	6063      	str	r3, [r4, #4]
 8008e32:	bf04      	itt	eq
 8008e34:	1949      	addeq	r1, r1, r5
 8008e36:	6021      	streq	r1, [r4, #0]
 8008e38:	6054      	str	r4, [r2, #4]
 8008e3a:	e7c7      	b.n	8008dcc <_free_r+0x28>
 8008e3c:	b003      	add	sp, #12
 8008e3e:	bd30      	pop	{r4, r5, pc}
 8008e40:	20000b70 	.word	0x20000b70

08008e44 <_malloc_usable_size_r>:
 8008e44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e48:	1f18      	subs	r0, r3, #4
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	bfbc      	itt	lt
 8008e4e:	580b      	ldrlt	r3, [r1, r0]
 8008e50:	18c0      	addlt	r0, r0, r3
 8008e52:	4770      	bx	lr

08008e54 <__retarget_lock_acquire_recursive>:
 8008e54:	4770      	bx	lr

08008e56 <__retarget_lock_release_recursive>:
 8008e56:	4770      	bx	lr

08008e58 <_init>:
 8008e58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e5a:	bf00      	nop
 8008e5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e5e:	bc08      	pop	{r3}
 8008e60:	469e      	mov	lr, r3
 8008e62:	4770      	bx	lr

08008e64 <_fini>:
 8008e64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e66:	bf00      	nop
 8008e68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008e6a:	bc08      	pop	{r3}
 8008e6c:	469e      	mov	lr, r3
 8008e6e:	4770      	bx	lr
